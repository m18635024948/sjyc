package co.jp.aoyama.macchinetta.app.order;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.dozer.util.ReflectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.terasoluna.gfw.common.exception.ResourceNotFoundException;
import org.terasoluna.gfw.common.message.ResultMessages;

import com.google.gson.Gson;

import co.jp.aoyama.macchinetta.app.order.coinfo.CoAdjustCoatStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoAdjustGiletStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoAdjustJacketStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoAdjustPants2StandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoAdjustPantsStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoAdjustShirtStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoCustomerMessageInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionCoatStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionGiletStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionGiletTuxedoInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionGiletWashableInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionJacketStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionJacketTuxedoInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionJacketWashableInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionPants2StandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionPants2TuxedoInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionPants2WashableInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionPantsStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionPantsTuxedoInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionPantsWashableInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionShirtStandardInfo;
import co.jp.aoyama.macchinetta.app.order.coinfo.CoProductInfo;
import co.jp.aoyama.macchinetta.app.order.enums.CoItemClassStandardEnum;
import co.jp.aoyama.macchinetta.app.order.enums.CoItemClassTuxedoEnum;
import co.jp.aoyama.macchinetta.app.order.enums.CoItemClassWashableEnum;
import co.jp.aoyama.macchinetta.app.order.enums.CoProductEnum;
import co.jp.aoyama.macchinetta.app.order.enums.ItemTypeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.coat.CoatCoOptionDetailStandardNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.coat.CoatCoOptionStandardNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.coat.CoatCoOptionStandardPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.coat.CoatCoOptionStandardUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.coat.CoatOptionStandardCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletCoOptionDetailStandardNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletCoOptionDetailTuxedoNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletCoOptionDetailWashableNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletCoOptionStandardNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletCoOptionStandardNextUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletCoOptionTuxedoNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletCoOptionTuxedoUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletCoOptionWashableNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletCoOptionWashableUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletOptionCoStandardPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletOptionCoTuxedoPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletOptionCoWashablePriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletOptionStandardCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletOptionStandardColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletOptionTuxedoCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletOptionTuxedoColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletOptionWashableCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.gilet.GiletOptionWashableColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketCoOptionDetailStandardNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketCoOptionDetailTuxedoNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketCoOptionDetailWashableNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketCoOptionStandardNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketCoOptionStandardUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketCoOptionTuxedoNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketCoOptionTuxedoUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketCoOptionWashableNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketCoOptionWashableUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketOptionCoStandardPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketOptionCoTuxedoPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketOptionCoWashablePriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketOptionStandardCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketOptionStandardColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketOptionTuxedoCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketOptionTuxedoColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketOptionWashableCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.jacket.JacketOptionWashableColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2CoOptionStandardNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2CoOptionStandardPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2CoOptionStandardUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2CoOptionTuxedoNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2CoOptionTuxedoPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2CoOptionTuxedoUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2CoOptionWashableNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2CoOptionWashablePriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2CoOptionWashableUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2OptionStandardCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2OptionStandardColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2OptionTuxedoCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.Pants2OptionWashableCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsCoOptionStandardNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsCoOptionStandardPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsCoOptionStandardUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsCoOptionTuxedoNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsCoOptionTuxedoPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsCoOptionTuxedoUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsCoOptionWashableNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsCoOptionWashablePriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsCoOptionWashableUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsOptionStandardCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsOptionStandardColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsOptionTuxedoCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsOptionTuxedoColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsOptionWashableCodeEnum;
import co.jp.aoyama.macchinetta.app.order.enums.pants.PantsOptionWashableColorEnum;
import co.jp.aoyama.macchinetta.app.order.enums.shirt.ShirtCoOptionStandardNextGenerationPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.shirt.ShirtCoOptionStandardPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.shirt.ShirtCoOptionStandardUpperPriceEnum;
import co.jp.aoyama.macchinetta.app.order.enums.shirt.ShirtOptionStandardCodeEnum;
import co.jp.aoyama.macchinetta.app.session.SessionContent;
import co.jp.aoyama.macchinetta.domain.model.Adjust;
import co.jp.aoyama.macchinetta.domain.model.Item;
import co.jp.aoyama.macchinetta.domain.model.Measuring;
import co.jp.aoyama.macchinetta.domain.model.Model;
import co.jp.aoyama.macchinetta.domain.model.NextGenerationPrice;
import co.jp.aoyama.macchinetta.domain.model.OptionBranch;
import co.jp.aoyama.macchinetta.domain.model.OptionBranchDetail;
import co.jp.aoyama.macchinetta.domain.model.Order;
import co.jp.aoyama.macchinetta.domain.model.OrderFindFabric;
import co.jp.aoyama.macchinetta.domain.model.OrderPrice;
import co.jp.aoyama.macchinetta.domain.model.TypeSize;
import co.jp.aoyama.macchinetta.domain.model.Yield;
import co.jp.aoyama.macchinetta.domain.service.order.ModelService;
import co.jp.aoyama.macchinetta.domain.service.order.OrderService;
import co.jp.aoyama.macchinetta.domain.service.orderlist.OrderListService;

public class OrderCoHelper {
	
	@Inject
	OrderListService orderListService;
	
	@Inject
	ModelService modelService;
	
	@Inject
	OrderService orderService;

	// 在庫チェックなし
	private static final String IS_NOT_THEORETICAL_STOCKCECK = "0";

	// 工場ステータス 生産開始前
	private static final String FACTORY_STATUSF0 = "F0";

	// 取り消しフラグ 取り消しではない
	private static final String IS_NOT_CANCELLED = "0";

	// 工場自動連携ステータス 送信前
	private static final String SEND2FACTORY_STATUS0 = "0";

	private static final Logger logger = LoggerFactory.getLogger(OrderCoHelper.class);

	/**
	 * クラスと列挙の方法名によって、方法を取得
	 * 
	 * @param clazz
	 * @param methodName
	 * @return
	 */
	private Method getMethod(Class<?> clazz, String methodName) {
		Method[] methods = clazz.getMethods();
		Method result = null;
		for (Method method : methods) {

			if (method.getName().equals(methodName)) {
				result = method;
				break;
			}
		}
		return result;
	}

	/**
	 * 空とnullの変換
	 * 
	 * @param measuring
	 * @return
	 */
	public BigDecimal convertBigDecimal(String measuring) {
		BigDecimal result = new BigDecimal(0.0);
		if ("".equals(measuring) || measuring == null) {
			return result;
		}
		return new BigDecimal(measuring);
	}

	/**
	 * オーダーのitemCodeとsubItemCode
	 * 
	 * @param order
	 * @param jkSubItemCode
	 * @param gtSubItemCode
	 * @param ptSubItemCode
	 * @param pt2SubItemCode
	 * @param shirtSubItemCode
	 * @param coatSubItemCode
	 * @return
	 */
	public Map<String, String> subItemCoCodeValue(Order order, String jkSubItemCode, String gtSubItemCode,
			String ptSubItemCode, String pt2SubItemCode, String shirtSubItemCode, String coatSubItemCode) {
		String itemCode = order.getProductItem();
		String productIs3Piece = order.getProductIs3piece();
		String productSparePantsClass = order.getProductSparePantsClass();
		Map<String, String> valueSubItemCodeMap = new HashMap<String, String>();
		// ３Pieceまたはスペアパンツは有り
		String productYes = "0009902";
		// ３Pieceまたはスペアパンツは無し
		String productNo = "0009901";
		// 01:SUIT
		String suitCode = "01";
		// 02:JACKET
		String jacketCode = "02";
		// 03:PANTS
		String pantsCode = "03";
		// 04:GILET
		String giletCode = "04";
		// 05:SHIRT
		String shirtCode = "05";
		// 06:COAT
		String coatCode = "06";
		// 07:PANTS2
		String pants2Code = "07";
		if (itemCode.equals(suitCode)) {
			if (productIs3Piece.equals(productYes) && productSparePantsClass.equals(productYes)) {
				jkSubItemCode = jacketCode;
				gtSubItemCode = giletCode;
				ptSubItemCode = pantsCode;
				pt2SubItemCode = pants2Code;
				shirtSubItemCode = null;
				coatSubItemCode = null;
			} else if (productIs3Piece.equals(productYes) && productSparePantsClass.equals(productNo)) {
				jkSubItemCode = jacketCode;
				gtSubItemCode = giletCode;
				ptSubItemCode = pantsCode;
				pt2SubItemCode = null;
				shirtSubItemCode = null;
				coatSubItemCode = null;
			} else if (productIs3Piece.equals(productNo) && productSparePantsClass.equals(productYes)) {
				jkSubItemCode = jacketCode;
				gtSubItemCode = null;
				ptSubItemCode = pantsCode;
				pt2SubItemCode = pants2Code;
				shirtSubItemCode = null;
				coatSubItemCode = null;
			} else if (productIs3Piece.equals(productNo) && productSparePantsClass.equals(productNo)) {
				jkSubItemCode = jacketCode;
				gtSubItemCode = null;
				ptSubItemCode = pantsCode;
				pt2SubItemCode = null;
				shirtSubItemCode = null;
				coatSubItemCode = null;
			}
		} else if (itemCode.equals(jacketCode)) {
			jkSubItemCode = jacketCode;
			gtSubItemCode = null;
			ptSubItemCode = null;
			pt2SubItemCode = null;
			shirtSubItemCode = null;
			coatSubItemCode = null;
		} else if (itemCode.equals(pantsCode)) {
			jkSubItemCode = null;
			gtSubItemCode = null;
			ptSubItemCode = pantsCode;
			pt2SubItemCode = null;
			shirtSubItemCode = null;
			coatSubItemCode = null;
		} else if (itemCode.equals(giletCode)) {
			jkSubItemCode = null;
			gtSubItemCode = giletCode;
			ptSubItemCode = null;
			pt2SubItemCode = null;
			shirtSubItemCode = null;
			coatSubItemCode = null;
		} else if (itemCode.equals(shirtCode)) {
			jkSubItemCode = null;
			gtSubItemCode = null;
			ptSubItemCode = null;
			pt2SubItemCode = null;
			shirtSubItemCode = shirtCode;
			coatSubItemCode = null;
		} else if (itemCode.equals(coatCode)) {
			jkSubItemCode = null;
			gtSubItemCode = null;
			ptSubItemCode = null;
			pt2SubItemCode = null;
			shirtSubItemCode = null;
			coatSubItemCode = coatCode;
		}
		valueSubItemCodeMap.put("jkSubItemCode", jkSubItemCode);
		valueSubItemCodeMap.put("gtSubItemCode", gtSubItemCode);
		valueSubItemCodeMap.put("ptSubItemCode", ptSubItemCode);
		valueSubItemCodeMap.put("pt2SubItemCode", pt2SubItemCode);
		valueSubItemCodeMap.put("shirtSubItemCode", shirtSubItemCode);
		valueSubItemCodeMap.put("coatSubItemCode", coatSubItemCode);
		return valueSubItemCodeMap;
	}

	/**
	 * 基本工賃価格の取得
	 * 
	 * @param itemCode
	 * @param subItemCode
	 * @param basicNextGenerationPriceList
	 * @return
	 */
	public BigDecimal getWage(String itemCode, List<NextGenerationPrice> basicNextGenerationPriceList) {
		String keyItemCode = itemCode;
		BigDecimal mbwWage = null;
		for (NextGenerationPrice basicNextGenerationPrice : basicNextGenerationPriceList) {
			if (keyItemCode.equals(basicNextGenerationPrice.getKeyItemCode().substring(0, 2))) {
				mbwWage = basicNextGenerationPrice.getMbwWage();
				break;
			} else {
				mbwWage = new BigDecimal(0.0);
			}
		}
		return mbwWage;
	}

	/**
	 * ダブルブレスト工賃価格の取得
	 * 
	 * @param itemCode
	 * @param subItemCode
	 * @param basicNextGenerationPriceList
	 * @return
	 */
	public BigDecimal getDoubleWage(String itemCode, String subItemCode,
			List<NextGenerationPrice> basicNextGenerationPriceList) {
		String keyItemCode = itemCode + subItemCode;
		BigDecimal mdbwWage = null;
		for (NextGenerationPrice basicNextGenerationPrice : basicNextGenerationPriceList) {
			if (keyItemCode.equals(basicNextGenerationPrice.getKeyItemCode())) {
				mdbwWage = basicNextGenerationPrice.getMdbwWage();
				break;
			} else {
				mdbwWage = new BigDecimal(0.0);
			}
		}
		return mdbwWage;
	}

	/**
	 * 基本付属価格の取得
	 * 
	 * @param itemCode
	 * @param subItemCode
	 * @param basicNextGenerationPriceList
	 * @return
	 */
	public Integer getPrice(String itemCode, List<NextGenerationPrice> basicNextGenerationPriceList) {
		String keyItemCode = itemCode;
		Integer mnapPrice = null;
		for (NextGenerationPrice basicNextGenerationPrice : basicNextGenerationPriceList) {
			if (keyItemCode.equals(basicNextGenerationPrice.getKeyItemCode().substring(0, 2))) {
				mnapPrice = basicNextGenerationPrice.getMnapPrice();
				break;
			} else {
				mnapPrice = 0;
			}
		}
		return mnapPrice;
	}

	/**
	 * ダブルブレスト付属価格
	 * 
	 * @param itemCode
	 * @param subItemCode
	 * @param basicNextGenerationPriceList
	 * @return
	 */
	public Integer getDoublePrice(String itemCode, String subItemCode,
			List<NextGenerationPrice> basicNextGenerationPriceList) {
		String keyItemCode = itemCode + subItemCode;
		Integer mdbapPrice = null;
		for (NextGenerationPrice basicNextGenerationPrice : basicNextGenerationPriceList) {
			if (keyItemCode.equals(basicNextGenerationPrice.getKeyItemCode())) {
				mdbapPrice = basicNextGenerationPrice.getMdbapPrice();
				break;
			} else {
				mdbapPrice = 0;
			}
		}
		return mdbapPrice;
	}

	/**
	 * Integerの変換
	 * 
	 * @param result
	 * @return
	 */
	public Integer commonTransfer(Object result) {
		Integer resultReturn = 0;
		if (result == null || "".equals(result)) {
			return resultReturn;
		}
		resultReturn = Integer.parseInt(result.toString());
		return resultReturn;
	}

	/**
	 * BigDecimalの変換
	 * 
	 * @param result
	 * @return
	 */
	public BigDecimal BigDecimalCommonTransfer(Object result) {
		BigDecimal resultReturn = new BigDecimal(0.0);
		if (result == null || "".equals(result)) {
			return resultReturn;
		}
		resultReturn = new BigDecimal(result.toString());
		return resultReturn;
	}

	/**
	 * JACKET_下代工賃合計
	 * 
	 * @param order
	 * @return
	 */
	public BigDecimal jkNextGenerationWageTotal(Order order) {

		JacketCoOptionStandardNextGenerationPriceEnum[] priceEnumStandard;
		JacketCoOptionTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		JacketCoOptionWashableNextGenerationPriceEnum[] priceEnumWashable;
		BigDecimal jkWageTotal = new BigDecimal(0.0);
		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {
			priceEnumStandard = JacketCoOptionStandardNextGenerationPriceEnum.values();

			for (JacketCoOptionStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					jkWageTotal = result.add(jkWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}

			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = JacketCoOptionWashableNextGenerationPriceEnum.values();

			for (JacketCoOptionWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					jkWageTotal = result.add(jkWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = JacketCoOptionTuxedoNextGenerationPriceEnum.values();

			for (JacketCoOptionTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					jkWageTotal = result.add(jkWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		return jkWageTotal;
	}

	/**
	 * JACKET_下代付属合計
	 * 
	 * @param order
	 * @return
	 */
	public Integer jkNextGenerationPriceTotal(Order order) {

		Integer jkPriceTotal = 0;
		JacketCoOptionStandardNextGenerationPriceEnum[] priceEnumStandard;
		JacketCoOptionTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		JacketCoOptionWashableNextGenerationPriceEnum[] priceEnumWashable;

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {
			priceEnumStandard = JacketCoOptionStandardNextGenerationPriceEnum.values();
			for (JacketCoOptionStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] argsTwo = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, argsTwo);
					}

					Integer result = commonTransfer(resultFive);
					jkPriceTotal = result + jkPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = JacketCoOptionWashableNextGenerationPriceEnum.values();
			for (JacketCoOptionWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] argsTwo = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, argsTwo);
					}

					Integer result = commonTransfer(resultFive);
					jkPriceTotal = result + jkPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = JacketCoOptionTuxedoNextGenerationPriceEnum.values();
			for (JacketCoOptionTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] argsTwo = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, argsTwo);
					}

					Integer result = commonTransfer(resultFive);
					jkPriceTotal = result + jkPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		return jkPriceTotal;
	}

	/**
	 * JACKET_下代工賃合計 (オプション付属詳細価格を含む)
	 * 
	 * @param order
	 * @return
	 */
	public BigDecimal jkNextGenerationDetailWageTotal(Order order) {

		JacketCoOptionDetailStandardNextGenerationPriceEnum[] priceEnumStandard;
		JacketCoOptionDetailTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		JacketCoOptionDetailWashableNextGenerationPriceEnum[] priceEnumWashable;

		BigDecimal jkDetailWageTotal = new BigDecimal(0.0);

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {
			priceEnumStandard = JacketCoOptionDetailStandardNextGenerationPriceEnum.values();
			for (JacketCoOptionDetailStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFive);
					jkDetailWageTotal = result.add(jkDetailWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = JacketCoOptionDetailWashableNextGenerationPriceEnum.values();
			for (JacketCoOptionDetailWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFive);
					jkDetailWageTotal = result.add(jkDetailWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = JacketCoOptionDetailTuxedoNextGenerationPriceEnum.values();
			for (JacketCoOptionDetailTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFive);
					jkDetailWageTotal = result.add(jkDetailWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		return jkDetailWageTotal;
	}

	/**
	 * JACKET_下代付属合計 (オプション付属詳細価格を含む)
	 * 
	 * @param order
	 * @return
	 */
	public Integer jkNextGenerationDetailPriceTotal(Order order) {

		Integer jkDetailPriceTotal = 0;
		JacketCoOptionDetailStandardNextGenerationPriceEnum[] priceEnumStandard;
		JacketCoOptionDetailTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		JacketCoOptionDetailWashableNextGenerationPriceEnum[] priceEnumWashable;

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {
			priceEnumStandard = JacketCoOptionDetailStandardNextGenerationPriceEnum.values();
			for (JacketCoOptionDetailStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueSix = price.getValueSix();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodSix = getMethod(cls, valueSix);
					Object[] args = {};
					Object resultSix = null;

					if (myMethodSix != null) {
						resultSix = ReflectionUtils.invoke(myMethodSix, order, args);
					}

					Integer result = commonTransfer(resultSix);
					jkDetailPriceTotal = result + jkDetailPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = JacketCoOptionDetailWashableNextGenerationPriceEnum.values();
			for (JacketCoOptionDetailWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueSix = price.getValueSix();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodSix = getMethod(cls, valueSix);
					Object[] args = {};
					Object resultSix = null;

					if (myMethodSix != null) {
						resultSix = ReflectionUtils.invoke(myMethodSix, order, args);
					}

					Integer result = commonTransfer(resultSix);
					jkDetailPriceTotal = result + jkDetailPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = JacketCoOptionDetailTuxedoNextGenerationPriceEnum.values();
			for (JacketCoOptionDetailTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueSix = price.getValueSix();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodSix = getMethod(cls, valueSix);
					Object[] args = {};
					Object resultSix = null;

					if (myMethodSix != null) {
						resultSix = ReflectionUtils.invoke(myMethodSix, order, args);
					}

					Integer result = commonTransfer(resultSix);
					jkDetailPriceTotal = result + jkDetailPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		return jkDetailPriceTotal;
	}

	/**
	 * PANTS_下代工賃合計
	 * 
	 * @param order
	 * @return
	 */
	public BigDecimal ptNextGenerationWageTotal(Order order) {

		PantsCoOptionStandardNextGenerationPriceEnum[] priceEnumStandard;
		PantsCoOptionTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		PantsCoOptionWashableNextGenerationPriceEnum[] priceEnumWashable;

		BigDecimal ptWageTotal = new BigDecimal(0.0);

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {

			priceEnumStandard = PantsCoOptionStandardNextGenerationPriceEnum.values();
			for (PantsCoOptionStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					ptWageTotal = result.add(ptWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = PantsCoOptionWashableNextGenerationPriceEnum.values();
			for (PantsCoOptionWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					ptWageTotal = result.add(ptWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = PantsCoOptionTuxedoNextGenerationPriceEnum.values();
			for (PantsCoOptionTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					ptWageTotal = result.add(ptWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		BigDecimal ptBtnMaterialWsWage;
		if (order.getPtBtnMaterialWsWage() == null) {
			ptBtnMaterialWsWage = new BigDecimal(0.0);
			ptWageTotal = ptBtnMaterialWsWage.add(ptWageTotal);
		} else {
			ptBtnMaterialWsWage = order.getPtBtnMaterialWsWage();
			ptWageTotal = ptBtnMaterialWsWage.add(ptWageTotal);
		}

		return ptWageTotal;
	}

	/**
	 * PANTS_下代付属合計
	 * 
	 * @param order
	 * @return
	 */
	public Integer ptNextGenerationPriceTotal(Order order) {

		Integer ptPriceTotal = 0;
		PantsCoOptionStandardNextGenerationPriceEnum[] priceEnumStandard;
		PantsCoOptionTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		PantsCoOptionWashableNextGenerationPriceEnum[] priceEnumWashable;

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {

			priceEnumStandard = PantsCoOptionStandardNextGenerationPriceEnum.values();
			for (PantsCoOptionStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					Integer result = commonTransfer(resultFive);
					ptPriceTotal = result + ptPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = PantsCoOptionWashableNextGenerationPriceEnum.values();
			for (PantsCoOptionWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					Integer result = commonTransfer(resultFive);
					ptPriceTotal = result + ptPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = PantsCoOptionTuxedoNextGenerationPriceEnum.values();
			for (PantsCoOptionTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					Integer result = commonTransfer(resultFive);
					ptPriceTotal = result + ptPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}

		}

		Integer ptBtnMaterialWsPrice;
		if (order.getPtBtnMaterialWsPrice() == null) {
			ptBtnMaterialWsPrice = 0;
			ptPriceTotal = ptBtnMaterialWsPrice + ptPriceTotal;
		} else {
			ptBtnMaterialWsPrice = order.getPtBtnMaterialWsPrice();
			ptPriceTotal = ptBtnMaterialWsPrice + ptPriceTotal;
		}

		return ptPriceTotal;
	}

	/**
	 * GILET_下代工賃合計
	 * 
	 * @param order
	 * @return
	 */
	public BigDecimal glNextGenerationWageTotal(Order order) {

		GiletCoOptionStandardNextGenerationPriceEnum[] priceEnumStandard;
		GiletCoOptionTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		GiletCoOptionWashableNextGenerationPriceEnum[] priceEnumWashable;
		BigDecimal glWageTotal = new BigDecimal(0.0);

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {

			priceEnumStandard = GiletCoOptionStandardNextGenerationPriceEnum.values();
			for (GiletCoOptionStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					glWageTotal = result.add(glWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = GiletCoOptionWashableNextGenerationPriceEnum.values();
			for (GiletCoOptionWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					glWageTotal = result.add(glWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {

			priceEnumTuxedo = GiletCoOptionTuxedoNextGenerationPriceEnum.values();
			for (GiletCoOptionTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					glWageTotal = result.add(glWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		return glWageTotal;
	}

	/**
	 * GILET_下代付属合計
	 * 
	 * @param order
	 * @return
	 */
	public Integer glNextGenerationPriceTotal(Order order) {

		Integer glPriceTotal = 0;
		GiletCoOptionStandardNextGenerationPriceEnum[] priceEnumStandard;
		GiletCoOptionTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		GiletCoOptionWashableNextGenerationPriceEnum[] priceEnumWashable;

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {
			priceEnumStandard = GiletCoOptionStandardNextGenerationPriceEnum.values();
			for (GiletCoOptionStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					Integer result = commonTransfer(resultFive);
					glPriceTotal = result + glPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = GiletCoOptionWashableNextGenerationPriceEnum.values();
			for (GiletCoOptionWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					Integer result = commonTransfer(resultFive);
					glPriceTotal = result + glPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = GiletCoOptionTuxedoNextGenerationPriceEnum.values();
			for (GiletCoOptionTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					Integer result = commonTransfer(resultFive);
					glPriceTotal = result + glPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		return glPriceTotal;
	}

	/**
	 * GILET_下代工賃合計 (オプション付属詳細価格を含む)
	 * 
	 * @param order
	 * @return
	 */
	public BigDecimal glNextGenerationDetailWageTotal(Order order) {

		GiletCoOptionDetailStandardNextGenerationPriceEnum[] priceEnumStandard;
		GiletCoOptionDetailTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		GiletCoOptionDetailWashableNextGenerationPriceEnum[] priceEnumWashable;

		BigDecimal glDetailWageTotal = new BigDecimal(0.0);

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {

			priceEnumStandard = GiletCoOptionDetailStandardNextGenerationPriceEnum.values();
			for (GiletCoOptionDetailStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFive);
					glDetailWageTotal = result.add(glDetailWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = GiletCoOptionDetailWashableNextGenerationPriceEnum.values();
			for (GiletCoOptionDetailWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFive);
					glDetailWageTotal = result.add(glDetailWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = GiletCoOptionDetailTuxedoNextGenerationPriceEnum.values();
			for (GiletCoOptionDetailTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFive);
					glDetailWageTotal = result.add(glDetailWageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		return glDetailWageTotal;
	}

	/**
	 * GILET_下代付属合計 (オプション付属詳細価格を含む)
	 * 
	 * @param order
	 * @return
	 */
	public Integer glNextGenerationDetailPriceTotal(Order order) {

		Integer glDetailPriceTotal = 0;
		GiletCoOptionDetailStandardNextGenerationPriceEnum[] priceEnumStandard;
		GiletCoOptionDetailTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		GiletCoOptionDetailWashableNextGenerationPriceEnum[] priceEnumWashable;

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {
			priceEnumStandard = GiletCoOptionDetailStandardNextGenerationPriceEnum.values();
			for (GiletCoOptionDetailStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueSix = price.getValueSix();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodSix = getMethod(cls, valueSix);
					Object[] args = {};
					Object resultSix = null;

					if (myMethodSix != null) {
						resultSix = ReflectionUtils.invoke(myMethodSix, order, args);
					}

					Integer result = commonTransfer(resultSix);
					glDetailPriceTotal = result + glDetailPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = GiletCoOptionDetailWashableNextGenerationPriceEnum.values();
			for (GiletCoOptionDetailWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueSix = price.getValueSix();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodSix = getMethod(cls, valueSix);
					Object[] args = {};
					Object resultSix = null;

					if (myMethodSix != null) {
						resultSix = ReflectionUtils.invoke(myMethodSix, order, args);
					}

					Integer result = commonTransfer(resultSix);
					glDetailPriceTotal = result + glDetailPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = GiletCoOptionDetailTuxedoNextGenerationPriceEnum.values();
			for (GiletCoOptionDetailTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueSix = price.getValueSix();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodSix = getMethod(cls, valueSix);
					Object[] args = {};
					Object resultSix = null;

					if (myMethodSix != null) {
						resultSix = ReflectionUtils.invoke(myMethodSix, order, args);
					}

					Integer result = commonTransfer(resultSix);
					glDetailPriceTotal = result + glDetailPriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		return glDetailPriceTotal;
	}

	/**
	 * COAT_下代付属合計 (オプション付属詳細価格を含む)
	 * 
	 * @param order
	 * @return
	 */
	public Integer coatNextGenerationDetailPriceTotal(Order order) {

		Integer coatDetailPriceTotal = 0;
		CoatCoOptionDetailStandardNextGenerationPriceEnum[] priceEnum = CoatCoOptionDetailStandardNextGenerationPriceEnum
				.values();
		for (CoatCoOptionDetailStandardNextGenerationPriceEnum price : priceEnum) {

			String valueSix = price.getValueSix();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodSix = getMethod(cls, valueSix);
				Object[] args = {};
				Object resultSix = null;

				if (myMethodSix != null) {
					resultSix = ReflectionUtils.invoke(myMethodSix, order, args);
				}

				Integer result = commonTransfer(resultSix);
				coatDetailPriceTotal = result + coatDetailPriceTotal;

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
		return coatDetailPriceTotal;
	}

	/**
	 * COAT_下代工賃合計 (オプション付属詳細価格を含む)
	 * 
	 * @param order
	 * @return
	 */
	public BigDecimal coatNextGenerationDetailWageTotal(Order order) {

		BigDecimal coatDetailWageTotal = new BigDecimal(0.0);

		CoatCoOptionDetailStandardNextGenerationPriceEnum[] priceEnum = CoatCoOptionDetailStandardNextGenerationPriceEnum
				.values();
		for (CoatCoOptionDetailStandardNextGenerationPriceEnum price : priceEnum) {

			String valueFive = price.getValueFive();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodFive = getMethod(cls, valueFive);
				Object[] args = {};
				Object resultFive = null;

				if (myMethodFive != null) {
					resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
				}

				BigDecimal result = BigDecimalCommonTransfer(resultFive);
				coatDetailWageTotal = result.add(coatDetailWageTotal);

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}

		return coatDetailWageTotal;
	}

	/**
	 * PANTS2_下代工賃合計
	 * 
	 * @param order
	 * @return
	 */
	public BigDecimal pt2NextGenerationWageTotal(Order order) {

		Pants2CoOptionStandardNextGenerationPriceEnum[] priceEnumStandard;
		Pants2CoOptionTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		Pants2CoOptionWashableNextGenerationPriceEnum[] priceEnumWashable;

		BigDecimal pt2WageTotal = new BigDecimal(0.0);

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {

			priceEnumStandard = Pants2CoOptionStandardNextGenerationPriceEnum.values();
			for (Pants2CoOptionStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					pt2WageTotal = result.add(pt2WageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {

			priceEnumWashable = Pants2CoOptionWashableNextGenerationPriceEnum.values();
			for (Pants2CoOptionWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					pt2WageTotal = result.add(pt2WageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {

			priceEnumTuxedo = Pants2CoOptionTuxedoNextGenerationPriceEnum.values();
			for (Pants2CoOptionTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFour = price.getValueFour();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFour = getMethod(cls, valueFour);
					Object[] args = {};
					Object resultFour = null;

					if (myMethodFour != null) {
						resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
					}

					BigDecimal result = BigDecimalCommonTransfer(resultFour);
					pt2WageTotal = result.add(pt2WageTotal);

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		BigDecimal pt2BtnMaterialWsWage;
		if (order.getPt2BtnMaterialWsWage() == null) {
			pt2BtnMaterialWsWage = new BigDecimal(0.0);
			pt2WageTotal = pt2BtnMaterialWsWage.add(pt2WageTotal);
		} else {
			pt2BtnMaterialWsWage = order.getPt2BtnMaterialWsWage();
			pt2WageTotal = pt2BtnMaterialWsWage.add(pt2WageTotal);
		}

		return pt2WageTotal;
	}

	/**
	 * SHIRT_下代工賃合計
	 * 
	 * @param order
	 * @return
	 */
	public BigDecimal shirtNextGenerationWageTotal(Order order) {

		BigDecimal shirtWageTotal = new BigDecimal(0.0);

		ShirtCoOptionStandardNextGenerationPriceEnum[] priceEnum = ShirtCoOptionStandardNextGenerationPriceEnum
				.values();
		for (ShirtCoOptionStandardNextGenerationPriceEnum price : priceEnum) {

			String valueFour = price.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodFour = getMethod(cls, valueFour);
				Object[] args = {};
				Object resultFour = null;

				if (myMethodFour != null) {
					resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
				}

				BigDecimal result = BigDecimalCommonTransfer(resultFour);
				shirtWageTotal = result.add(shirtWageTotal);

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}

		return shirtWageTotal;
	}

	/**
	 * COAT_下代工賃合計
	 * 
	 * @param order
	 * @return
	 */
	public BigDecimal coatNextGenerationWageTotal(Order order) {

		BigDecimal coatWageTotal = new BigDecimal(0.0);

		CoatCoOptionStandardNextGenerationPriceEnum[] priceEnum = CoatCoOptionStandardNextGenerationPriceEnum.values();
		for (CoatCoOptionStandardNextGenerationPriceEnum price : priceEnum) {

			String valueFour = price.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodFour = getMethod(cls, valueFour);
				Object[] args = {};
				Object resultFour = null;

				if (myMethodFour != null) {
					resultFour = ReflectionUtils.invoke(myMethodFour, order, args);
				}

				BigDecimal result = BigDecimalCommonTransfer(resultFour);
				coatWageTotal = result.add(coatWageTotal);

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}

		return coatWageTotal;
	}

	/**
	 * PANTS2_下代付属合計
	 * 
	 * @param order
	 * @return
	 */
	public Integer pt2NextGenerationPriceTotal(Order order) {

		Integer pt2PriceTotal = 0;
		Pants2CoOptionStandardNextGenerationPriceEnum[] priceEnumStandard;
		Pants2CoOptionTuxedoNextGenerationPriceEnum[] priceEnumTuxedo;
		Pants2CoOptionWashableNextGenerationPriceEnum[] priceEnumWashable;

		// 0：標準
		if ("9000101".equals(order.getProductCategory())) {
			priceEnumStandard = Pants2CoOptionStandardNextGenerationPriceEnum.values();
			for (Pants2CoOptionStandardNextGenerationPriceEnum price : priceEnumStandard) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					Integer result = commonTransfer(resultFive);
					pt2PriceTotal = result + pt2PriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 1：ウォッシャブル
		} else if ("9000103".equals(order.getProductCategory())) {
			priceEnumWashable = Pants2CoOptionWashableNextGenerationPriceEnum.values();
			for (Pants2CoOptionWashableNextGenerationPriceEnum price : priceEnumWashable) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					Integer result = commonTransfer(resultFive);
					pt2PriceTotal = result + pt2PriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
			// 2：タキシード
		} else if ("9000102".equals(order.getProductCategory())) {
			priceEnumTuxedo = Pants2CoOptionTuxedoNextGenerationPriceEnum.values();
			for (Pants2CoOptionTuxedoNextGenerationPriceEnum price : priceEnumTuxedo) {

				String valueFive = price.getValueFive();

				Class<?> cls;
				try {
					cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
					Method myMethodFive = getMethod(cls, valueFive);
					Object[] args = {};
					Object resultFive = null;

					if (myMethodFive != null) {
						resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
					}

					Integer result = commonTransfer(resultFive);
					pt2PriceTotal = result + pt2PriceTotal;

				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error(e.toString());
				}
			}
		}

		Integer pt2BtnMaterialWsPrice;
		if (order.getPt2BtnMaterialWsPrice() == null) {
			pt2BtnMaterialWsPrice = 0;
			pt2PriceTotal = pt2BtnMaterialWsPrice + pt2PriceTotal;
		} else {
			pt2BtnMaterialWsPrice = order.getPt2BtnMaterialWsPrice();
			pt2PriceTotal = pt2BtnMaterialWsPrice + pt2PriceTotal;
		}
		return pt2PriceTotal;
	}

	/**
	 * SHIRT_下代付属合計
	 * 
	 * @param order
	 * @return
	 */
	public Integer shirtNextGenerationPriceTotal(Order order) {

		Integer shirtPriceTotal = 0;
		ShirtCoOptionStandardNextGenerationPriceEnum[] priceEnum = ShirtCoOptionStandardNextGenerationPriceEnum
				.values();
		for (ShirtCoOptionStandardNextGenerationPriceEnum price : priceEnum) {

			String valueFive = price.getValueFive();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodFive = getMethod(cls, valueFive);
				Object[] args = {};
				Object resultFive = null;

				if (myMethodFive != null) {
					resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
				}

				Integer result = commonTransfer(resultFive);
				shirtPriceTotal = result + shirtPriceTotal;

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
		return shirtPriceTotal;
	}

	/**
	 * COAT_下代付属合計
	 * 
	 * @param order
	 * @return
	 */
	public Integer coatNextGenerationPriceTotal(Order order) {

		Integer coatPriceTotal = 0;
		CoatCoOptionStandardNextGenerationPriceEnum[] priceEnum = CoatCoOptionStandardNextGenerationPriceEnum.values();
		for (CoatCoOptionStandardNextGenerationPriceEnum price : priceEnum) {

			String valueFive = price.getValueFive();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodFive = getMethod(cls, valueFive);
				Object[] args = {};
				Object resultFive = null;

				if (myMethodFive != null) {
					resultFive = ReflectionUtils.invoke(myMethodFive, order, args);
				}

				Integer result = commonTransfer(resultFive);
				coatPriceTotal = result + coatPriceTotal;

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
		return coatPriceTotal;
	}

	/**
	 * JACKET要尺の取得
	 * 
	 * @param orderCoForm
	 * @param yieldList
	 * @return
	 */
	public Integer getJacketYield(Order order, List<NextGenerationPrice> yieldList) {

		Integer jkYield = 0;
		String jkSubItemCode = CoItemClassStandardEnum.ITEM_CODE_JACKET.getKey();
		String ojFrontBtnCnt = "0000105";
		for (NextGenerationPrice yield : yieldList) {
			if (jkSubItemCode.equals(yield.getSubItemCode())) {
				// フロント釦数はダブル6つボタンの場合、該当itemはダブル
				if (ojFrontBtnCnt.equals(order.getJkFrtBtnCd())) {
					jkYield = yield.getDoubleBreastedFabricAmount();
					return jkYield;
				} else {
					jkYield = yield.getNomalFabricAmount();
					return jkYield;
				}
			}
		}
		return jkYield;
	}

	/**
	 * GILET要尺の取得
	 * 
	 * @param yieldList
	 * @return
	 */
	public Integer getGiletYield(List<NextGenerationPrice> yieldList) {

		Integer jkYield = 0;
		String glSubItemCode = CoItemClassStandardEnum.ITEM_CODE_GILET.getKey();
		for (NextGenerationPrice yield : yieldList) {
			if (glSubItemCode.equals(yield.getSubItemCode())) {
				jkYield = yield.getNomalFabricAmount();
				return jkYield;
			}
		}
		return jkYield;
	}

	/**
	 * PANTS要尺の取得
	 * 
	 * @param yieldList
	 * @return
	 */
	public Integer getPantsYield(List<NextGenerationPrice> yieldList) {

		Integer jkYield = 0;
		String ptSubItemCode = CoItemClassStandardEnum.ITEM_CODE_PANTS.getKey();
		for (NextGenerationPrice yield : yieldList) {
			if (ptSubItemCode.equals(yield.getSubItemCode())) {
				jkYield = yield.getNomalFabricAmount();
				return jkYield;
			}
		}
		return jkYield;
	}

	/**
	 * PANTS2要尺の取得
	 * 
	 * @param yieldList
	 * @return
	 */
	public Integer getPants2Yield(List<NextGenerationPrice> yieldList) {

		Integer jkYield = 0;
		String pt2SubItemCode = CoItemClassStandardEnum.ITEM_CODE_PANTS2.getKey();
		for (NextGenerationPrice yield : yieldList) {
			if (pt2SubItemCode.equals(yield.getSubItemCode())) {
				jkYield = yield.getNomalFabricAmount();
				return jkYield;
			}
		}
		return jkYield;
	}

	/**
	 * SHIRT要尺の取得
	 * 
	 * @param yieldList
	 * @return
	 */
	public Integer getShirtYield(List<NextGenerationPrice> yieldList) {

		Integer jkYield = 0;
		String shirtSubItemCode = CoItemClassStandardEnum.ITEM_CODE_SHIRTS.getKey();
		for (NextGenerationPrice yield : yieldList) {
			if (shirtSubItemCode.equals(yield.getSubItemCode())) {
				jkYield = yield.getNomalFabricAmount();
				return jkYield;
			}
		}
		return jkYield;
	}

	/**
	 * COAT要尺の取得
	 * 
	 * @param yieldList
	 * @return
	 */
	public Integer getCoatYield(List<NextGenerationPrice> yieldList) {

		Integer jkYield = 0;
		String coatSubItemCode = CoItemClassStandardEnum.ITEM_CODE_COAT.getKey();
		for (NextGenerationPrice yield : yieldList) {
			if (coatSubItemCode.equals(yield.getSubItemCode())) {
				jkYield = yield.getNomalFabricAmount();
				return jkYield;
			}
		}
		return jkYield;
	}

	/**
	 * ドル為替の取得
	 * 
	 * @param wholesalePieceList
	 * @return
	 */
	public BigDecimal getDollarExchange(Order order, List<NextGenerationPrice> wholesalePieceList,
			NextGenerationPrice priceCode) {

		String mfaFactoryCode = priceCode.getMfaFactoryCode();
		String productItem = order.getProductItem();
		String wholesaleKeyCode = mfaFactoryCode + productItem;
		BigDecimal productDollarExchange = new BigDecimal(0.0);

		for (NextGenerationPrice wholesalePiece : wholesalePieceList) {
			if (wholesaleKeyCode.equals(wholesalePiece.getWholesaleKeyCode())) {
				productDollarExchange = wholesalePiece.getDollarExchange();
				return productDollarExchange;
			} else {
				productDollarExchange = new BigDecimal(100.0);
			}
		}
		return productDollarExchange;
	}

	/**
	 * 製品関税の取得
	 * 
	 * @param orderCoForm
	 * @param wholesalePieceList
	 * @param factoryCode
	 * @return
	 */
	public Double getProductTariff(Order order, List<NextGenerationPrice> wholesalePieceList,
			NextGenerationPrice priceCode) {

		String mfaFactoryCode = priceCode.getMfaFactoryCode();
		String productItem = order.getProductItem();
		String wholesaleKeyCode = mfaFactoryCode + productItem;
		Double productTariff = 0.0;

		for (NextGenerationPrice wholesalePiece : wholesalePieceList) {
			if (wholesaleKeyCode.equals(wholesalePiece.getWholesaleKeyCode())) {
				productTariff = wholesalePiece.getProductTariff();
				return productTariff;
			} else {
				productTariff = 100.0;
			}
		}
		return productTariff;
	}

	/**
	 * 製品運賃の取得
	 * 
	 * @param orderCoForm
	 * @param wholesalePieceList
	 * @param factoryCode
	 * @return
	 */
	public Integer getProductShipping(Order order, List<NextGenerationPrice> wholesalePieceList,
			NextGenerationPrice priceCode) {

		String mfaFactoryCode = priceCode.getMfaFactoryCode();
		String productItem = order.getProductItem();
		String wholesaleKeyCode = mfaFactoryCode + productItem;
		Integer productShipping = 0;

		for (NextGenerationPrice wholesalePiece : wholesalePieceList) {
			if (wholesaleKeyCode.equals(wholesalePiece.getWholesaleKeyCode())) {
				productShipping = wholesalePiece.getProductShipping();
				return productShipping;
			}
		}
		return productShipping;
	}

	/**
	 * 運賃誤差の取得
	 * 
	 * @param orderCoForm
	 * @param wholesalePieceList
	 * @param factoryCode
	 * @return
	 */
	public Integer getShippingError(Order order, List<NextGenerationPrice> wholesalePieceList,
			NextGenerationPrice priceCode) {

		String mfaFactoryCode = priceCode.getMfaFactoryCode();
		String productItem = order.getProductItem();
		String wholesaleKeyCode = mfaFactoryCode + productItem;
		Integer shippingError = 0;

		for (NextGenerationPrice wholesalePiece : wholesalePieceList) {
			if (wholesaleKeyCode.equals(wholesalePiece.getWholesaleKeyCode())) {
				shippingError = wholesalePiece.getShippingError();
				return shippingError;
			}
		}
		return shippingError;
	}

	/**
	 * 基本工賃合計
	 * 
	 * @param orderCoForm
	 * @param basicNextGenerationPriceList
	 * @return
	 */
	public BigDecimal baseWageCount(Order order, List<NextGenerationPrice> basicNextGenerationPriceList) {
		String itemCode = order.getProductItem();
		String jkSubItemCode = "02";
		String glSubItemCode = "04";
		String ctSubItemCode = "06";
		BigDecimal baseWageTotal = new BigDecimal(0.0);

		if ("01".equals(itemCode)) {
			if (("0000105".equals(order.getJkFrtBtnCd()) || "0000106".equals(order.getJkFrtBtnCd())) && ("ET15-D".equals(order.getGlModelCd()) || "BS01-D".equals(order.getGlModelCd()))) {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				BigDecimal jkMdbwWage = this.getDoubleWage(itemCode, jkSubItemCode, basicNextGenerationPriceList);
				BigDecimal glMdbwWage = this.getDoubleWage(itemCode, glSubItemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage).add(jkMdbwWage).add(glMdbwWage);
			}
			else if (("0000105".equals(order.getJkFrtBtnCd()) || "0000106".equals(order.getJkFrtBtnCd())) && !"ET15-D".equals(order.getGlModelCd()) && !"BS01-D".equals(order.getGlModelCd())) {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				BigDecimal jkMdbwWage = this.getDoubleWage(itemCode, jkSubItemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage).add(jkMdbwWage);
			}
			else if (!"0000105".equals(order.getJkFrtBtnCd()) && !"0000106".equals(order.getJkFrtBtnCd()) && ("ET15-D".equals(order.getGlModelCd()) || "BS01-D".equals(order.getGlModelCd()))) {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				BigDecimal glMdbwWage = this.getDoubleWage(itemCode, glSubItemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage).add(glMdbwWage);
			}
			else {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage);
			}
		} else if ("02".equals(itemCode)) {
			if ("0000105".equals(order.getJkFrtBtnCd())) {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				BigDecimal mdbwWage = this.getDoubleWage(itemCode, jkSubItemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage).add(mdbwWage);
			} else {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage);
			}

		} 
		else if ("03".equals(itemCode)) {
			BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
			baseWageTotal = baseWageTotal.add(mbwWage);
		} 
		else if ("04".equals(itemCode)) {
			if("ET15-D".equals(order.getGlModelCd()) || "BS01-D".equals(order.getGlModelCd())) {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				BigDecimal glMdbwWage = this.getDoubleWage(itemCode, glSubItemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage).add(glMdbwWage);
			}
			else {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage);
			}
		}
		else if("05".equals(itemCode)) {
			BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
			baseWageTotal = baseWageTotal.add(mbwWage);
		}
		else if("06".equals(itemCode)) {
			if("DoubleChester".equals(order.getCtModelCd()) || "DoublePolo".equals(order.getCtModelCd())) {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				BigDecimal ctMdbwWage = this.getDoubleWage(itemCode, ctSubItemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage).add(ctMdbwWage);
			}
			else {
				BigDecimal mbwWage = this.getWage(itemCode, basicNextGenerationPriceList);
				baseWageTotal = baseWageTotal.add(mbwWage);
			}
		}
		return baseWageTotal;
	}

	/**
	 * 基本付属合計
	 * 
	 * @param orderCoForm
	 * @param basicNextGenerationPriceList
	 * @return
	 */
	public Integer basePriceCount(Order order, List<NextGenerationPrice> basicNextGenerationPriceList) {
		String itemCode = order.getProductItem();
		String jkSubItemCode = "02";
		String glSubItemCode = "04";
		String ctSubItemCode = "06";
		Integer basePriceTotal = 0;

		if ("01".equals(itemCode)) {
			if (("0000105".equals(order.getJkFrtBtnCd()) || "0000106".equals(order.getJkFrtBtnCd())) && ("ET15-D".equals(order.getGlModelCd()) || "BS01-D".equals(order.getGlModelCd()))) {
				Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
				Integer jkMdbapPrice = this.getDoublePrice(itemCode, jkSubItemCode, basicNextGenerationPriceList);
				Integer glMdbapPrice = this.getDoublePrice(itemCode, glSubItemCode, basicNextGenerationPriceList);
				basePriceTotal = basePriceTotal + mnapPrice + jkMdbapPrice + glMdbapPrice;
			}
			else if(("0000105".equals(order.getJkFrtBtnCd()) || "0000106".equals(order.getJkFrtBtnCd())) && !"ET15-D".equals(order.getGlModelCd()) && !"BS01-D".equals(order.getGlModelCd())) {
				Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
				Integer jkMdbapPrice = this.getDoublePrice(itemCode, jkSubItemCode, basicNextGenerationPriceList);
				basePriceTotal = basePriceTotal + mnapPrice + jkMdbapPrice;
			}
			else if(!"0000105".equals(order.getJkFrtBtnCd()) && !"0000106".equals(order.getJkFrtBtnCd()) && ("ET15-D".equals(order.getGlModelCd()) || "BS01-D".equals(order.getGlModelCd()))) {
				Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
				Integer glMdbapPrice = this.getDoublePrice(itemCode, glSubItemCode, basicNextGenerationPriceList);
				basePriceTotal = basePriceTotal + mnapPrice + glMdbapPrice;
			}
			else {
				Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
				basePriceTotal = basePriceTotal + mnapPrice;
			}
		} else if ("02".equals(itemCode)) {
			if ("0000105".equals(order.getJkFrtBtnCd())) {
				Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
				Integer mdbapPrice = this.getDoublePrice(itemCode, jkSubItemCode, basicNextGenerationPriceList);
				basePriceTotal = basePriceTotal + mnapPrice + mdbapPrice;
			} else {
				Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
				basePriceTotal = basePriceTotal + mnapPrice;
			}

		} 
		else if ("03".equals(itemCode)) {
			Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
			basePriceTotal = basePriceTotal + mnapPrice;
		} 
		else if ("04".equals(itemCode)) {
			if("ET15-D".equals(order.getGlModelCd()) || "BS01-D".equals(order.getGlModelCd())) {
				Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
				Integer mdbapPrice = this.getDoublePrice(itemCode, glSubItemCode, basicNextGenerationPriceList);
				basePriceTotal = basePriceTotal + mnapPrice + mdbapPrice;
			}
			Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
			basePriceTotal = basePriceTotal + mnapPrice;
		}
		else if ("05".equals(itemCode)) {
			Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
			basePriceTotal = basePriceTotal + mnapPrice;
		}
		else if ("06".equals(itemCode)) {
			if("DoubleChester".equals(order.getCtModelCd()) || "DoublePolo".equals(order.getCtModelCd())) {
				Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
				Integer mdbapPrice = this.getDoublePrice(itemCode, ctSubItemCode, basicNextGenerationPriceList);
				basePriceTotal = basePriceTotal + mnapPrice + mdbapPrice;
			}
			else {
				Integer mnapPrice = this.getPrice(itemCode, basicNextGenerationPriceList);
				basePriceTotal = basePriceTotal + mnapPrice;
			}
			
		}
		return basePriceTotal;
	}

	/**
	 * 下代関連計算方法
	 * 
	 * @param order
	 * @param yieldList
	 * @param wholesalePieceList
	 * @param priceCode
	 * @param marginRate
	 * @return
	 */
	public Integer nextGenerationRelationCount(Order order, List<NextGenerationPrice> yieldList,
			List<NextGenerationPrice> wholesalePieceList, List<NextGenerationPrice> basicNextGenerationPriceList,
			NextGenerationPrice priceCode, NextGenerationPrice marginRate) {

		// 下代関連計算方法の オプション工賃
		BigDecimal jkNextGenerationWageTotal = this.jkNextGenerationWageTotal(order);
		BigDecimal jkNextGenerationDetailWageTotal = this.jkNextGenerationDetailWageTotal(order);
		BigDecimal glNextGenerationWageTotal = this.glNextGenerationWageTotal(order);
		BigDecimal glNextGenerationDetailWageTotal = this.glNextGenerationDetailWageTotal(order);
		BigDecimal ptNextGenerationWageTotal = this.ptNextGenerationWageTotal(order);
		BigDecimal pt2NextGenerationWageTotal = this.pt2NextGenerationWageTotal(order);
		BigDecimal shirtNextGenerationWageTotal = this.shirtNextGenerationWageTotal(order);
		BigDecimal coatNextGenerationWageTotal = this.coatNextGenerationWageTotal(order);
		BigDecimal coatNextGenerationDetailWageTotal = this.coatNextGenerationDetailWageTotal(order);

		// 基本工賃
		BigDecimal baseWageCount = this.baseWageCount(order, basicNextGenerationPriceList);
		// 商品情報_３Piece下代工賃
		BigDecimal productIs3pieceWsWage = order.getProductIs3pieceWsWage();
		// 商品情報_スペアパンツ下代工賃
		BigDecimal productSparePantsWsWage = order.getProductSparePantsWsWage();
		// お客様情報_納期短縮_下代工賃
		BigDecimal custIsDeliverShortningWsWage = order.getCustIsDeliverShortningWsWage();
		// 商品情報_LCR縫製下代工賃
		BigDecimal productLcrSewingWsWage = order.getProductLcrSewingWsWage();
		// 商品情報_ガゼット刺繍_下代工賃
		BigDecimal productEmbroideryGazetteWsWage = order.getProductEmbroideryGazetteWsWage();
		// 商品情報_刺繍箇所_下代工賃
		BigDecimal productEmbroideryNmPosWsWage = order.getProductEmbroideryNmPosWsWage();
		
		BigDecimal productEmbroideryGazetteWsWageValue = new BigDecimal(0);
		BigDecimal productEmbroideryNmPosWsWageValue = new BigDecimal(0);
		
		if(productEmbroideryGazetteWsWage != null) {
			productEmbroideryGazetteWsWageValue = productEmbroideryGazetteWsWage;
		}
		if(productEmbroideryNmPosWsWage != null) {
			productEmbroideryNmPosWsWageValue = productEmbroideryNmPosWsWage;
		}
				
		// 基本工賃 + オプション工賃合計
		BigDecimal NextGenerationWageTotal = baseWageCount.add(jkNextGenerationWageTotal)
				.add(jkNextGenerationDetailWageTotal).add(glNextGenerationWageTotal)
				.add(glNextGenerationDetailWageTotal).add(ptNextGenerationWageTotal).add(pt2NextGenerationWageTotal)
				.add(shirtNextGenerationWageTotal).add(coatNextGenerationWageTotal).add(coatNextGenerationDetailWageTotal)
				.add(productIs3pieceWsWage).add(productSparePantsWsWage)
				.add(custIsDeliverShortningWsWage).add(productLcrSewingWsWage)
				.add(productEmbroideryGazetteWsWageValue)	.add(productEmbroideryNmPosWsWageValue);

		// 下代関連計算方法の オプション付属
		Integer jkNextGenerationPriceTotal = this.jkNextGenerationPriceTotal(order);
		Integer jkNextGenerationDetailPriceTotal = this.jkNextGenerationDetailPriceTotal(order);
		Integer glNextGenerationPriceTotal = this.glNextGenerationPriceTotal(order);
		Integer glNextGenerationDetailPriceTotal = this.glNextGenerationDetailPriceTotal(order);
		Integer ptNextGenerationPriceTotal = this.ptNextGenerationPriceTotal(order);
		Integer pt2NextGenerationPriceTotal = this.pt2NextGenerationPriceTotal(order);
		Integer shirtNextGenerationPriceTotal = this.shirtNextGenerationPriceTotal(order);
		Integer coatNextGenerationPriceTotal = this.coatNextGenerationPriceTotal(order);
		Integer coatNextGenerationDetailPriceTotal = this.coatNextGenerationDetailPriceTotal(order);

		// 基本付属代
		Integer basePriceCount = this.basePriceCount(order, basicNextGenerationPriceList);
		// 商品情報_３Piece_下代付属
		Integer productIs3pieceWsPrice = order.getProductIs3pieceWsPrice();
		// 商品情報_スペアパンツ下代付属
		Integer productSparePantsWsPrice = order.getProductSparePantsWsPrice();
		// お客様情報_納期短縮_下代付属
		Integer custIsDeliverShortningWsPrice = order.getCustIsDeliverShortningWsPrice();
		// 商品情報_LCR縫製_下代付属
		Integer productLcrSewingWsPrice = order.getProductLcrSewingWsPrice();
		// 商品情報_ガゼット刺繍_下代付属
		Integer productEmbroideryGazetteWsPrice = order.getProductEmbroideryGazetteWsPrice();
		// 商品情報_刺繍箇所_下代付属
		Integer productEmbroideryNmPosWsPrice = order.getProductEmbroideryNmPosWsPrice();
		
		Integer productEmbroideryGazetteWsPriceValue = 0;
		Integer productEmbroideryNmPosWsPriceValue = 0;
		if(productEmbroideryGazetteWsPrice != null) {
			productEmbroideryGazetteWsPriceValue = productEmbroideryGazetteWsPrice;
		}
		if(productEmbroideryNmPosWsPrice != null) {
			productEmbroideryNmPosWsPriceValue = productEmbroideryNmPosWsPrice;
		}
				
		// オプション付属合計
		Integer NextGenerationPriceTotal = basePriceCount + jkNextGenerationPriceTotal
				+ jkNextGenerationDetailPriceTotal + glNextGenerationPriceTotal + glNextGenerationDetailPriceTotal
				+ ptNextGenerationPriceTotal + pt2NextGenerationPriceTotal + shirtNextGenerationPriceTotal
				+ coatNextGenerationPriceTotal + coatNextGenerationDetailPriceTotal + productIs3pieceWsPrice
				+ productSparePantsWsPrice + custIsDeliverShortningWsPrice + productLcrSewingWsPrice
				+ productEmbroideryGazetteWsPriceValue + productEmbroideryNmPosWsPriceValue;

		// 下代関連計算方法の要尺
		Integer jacketYield = this.getJacketYield(order, yieldList);
		Integer giletYield = this.getGiletYield(yieldList);
		Integer pants2Yield = this.getPants2Yield(yieldList);
		Integer pantsYield = this.getPantsYield(yieldList);
		Integer shirtYield = this.getShirtYield(yieldList);
		Integer coatYield = this.getCoatYield(yieldList);
		// 要尺合計
		Double yieldTotal = (double) (jacketYield + giletYield + pantsYield + pants2Yield + shirtYield + coatYield)
				/ 1000;

		// 下代関連計算方法の生地代
		Integer fabricPrice = priceCode.getFabricPrice();

		// 下代関連計算方法の下代調整金
		Integer wsPriceAdjust = priceCode.getWsPriceAdjust();

		// 下代関連計算方法の為替
		BigDecimal dollarExchange = this.getDollarExchange(order, wholesalePieceList, priceCode);

		// 下代関連計算方法の製品関税
		Double productTariff = this.getProductTariff(order, wholesalePieceList, priceCode);

		// 下代関連計算方法の製品運賃
		Integer productShipping = this.getProductShipping(order, wholesalePieceList, priceCode);

		// 下代関連計算方法の運賃誤差
		Integer shippingError = this.getShippingError(order, wholesalePieceList, priceCode);

		// 下代関連計算方法のメーカーマージン
		Double makerMarginRate = marginRate.getMarginRate();

		/*
		 * ( ( ( (生地代×要尺) + (基本工賃 + オプション工賃) * 為替 + (基本付属代 ＋ オプション付属) )*製品関税 ) ＋
		 * 製品運賃＋運賃誤差 )*メーカーマージン+ 下代調整金
		 */

		// 生地代×要尺
		BigDecimal fabricPriceYieldTotal = BigDecimalCommonTransfer((fabricPrice * yieldTotal));
		// (基本付属代 ＋ オプション付属)
		BigDecimal NextGenerationPriceTotalTransfer = BigDecimalCommonTransfer(NextGenerationPriceTotal);
		// 製品関税
		BigDecimal productTariffTransfer = BigDecimalCommonTransfer((productTariff / 100));
		// 製品運賃＋運賃誤差
		BigDecimal productShippingShippingError = BigDecimalCommonTransfer(productShipping + shippingError);
		// メーカーマージン
		BigDecimal makerMarginRateTransfer = BigDecimalCommonTransfer((makerMarginRate / 100));
		// 下代調整金
		BigDecimal wsPriceAdjustTransfer = BigDecimalCommonTransfer(wsPriceAdjust);

		BigDecimal nextGenerationRelationCount = (((fabricPriceYieldTotal
				.add(NextGenerationWageTotal.multiply(dollarExchange)).add(NextGenerationPriceTotalTransfer))
						.multiply(productTariffTransfer)).add(productShippingShippingError))
								.multiply(makerMarginRateTransfer).add(wsPriceAdjustTransfer);
		Integer convertNumber = this.convertNumber(nextGenerationRelationCount);
		return convertNumber;

	}
	
	/**
	 * 内容確認に下代関連計算方法
	 * 
	 * @param order
	 * @param yieldList
	 * @param wholesalePieceList
	 * @param priceCode
	 * @param marginRate
	 * @return
	 */
	public void nextGenerationValueRelationCount(Order order, List<NextGenerationPrice> yieldList,
			List<NextGenerationPrice> wholesalePieceList, List<NextGenerationPrice> basicNextGenerationPriceList,
			NextGenerationPrice priceCode, NextGenerationPrice marginRate) {

		// 下代関連計算方法の オプション工賃
		BigDecimal jkNextGenerationWageTotal = this.jkNextGenerationWageTotal(order);
		BigDecimal jkNextGenerationDetailWageTotal = this.jkNextGenerationDetailWageTotal(order);
		BigDecimal glNextGenerationWageTotal = this.glNextGenerationWageTotal(order);
		BigDecimal glNextGenerationDetailWageTotal = this.glNextGenerationDetailWageTotal(order);
		BigDecimal ptNextGenerationWageTotal = this.ptNextGenerationWageTotal(order);
		BigDecimal pt2NextGenerationWageTotal = this.pt2NextGenerationWageTotal(order);
		BigDecimal shirtNextGenerationWageTotal = this.shirtNextGenerationWageTotal(order);
		BigDecimal coatNextGenerationWageTotal = this.coatNextGenerationWageTotal(order);
		BigDecimal coatNextGenerationDetailWageTotal = this.coatNextGenerationDetailWageTotal(order);

		// 基本工賃
		BigDecimal baseWageCount = this.baseWageCount(order, basicNextGenerationPriceList);
		// 商品情報_３Piece下代工賃
		BigDecimal productIs3pieceWsWage = order.getProductIs3pieceWsWage();
		// 商品情報_スペアパンツ下代工賃
		BigDecimal productSparePantsWsWage = order.getProductSparePantsWsWage();
		// お客様情報_納期短縮_下代工賃
		BigDecimal custIsDeliverShortningWsWage = order.getCustIsDeliverShortningWsWage();
		// 商品情報_LCR縫製下代工賃
		BigDecimal productLcrSewingWsWage = order.getProductLcrSewingWsWage();
		// 商品情報_ガゼット刺繍_下代工賃
		BigDecimal productEmbroideryGazetteWsWage = order.getProductEmbroideryGazetteWsWage();
		// 商品情報_刺繍箇所_下代工賃
		BigDecimal productEmbroideryNmPosWsWage = order.getProductEmbroideryNmPosWsWage();
		
		BigDecimal productEmbroideryGazetteWsWageValue = new BigDecimal(0);
		BigDecimal productEmbroideryNmPosWsWageValue = new BigDecimal(0);
		
		if(productEmbroideryGazetteWsWage != null) {
			productEmbroideryGazetteWsWageValue = productEmbroideryGazetteWsWage;
		}
		if(productEmbroideryNmPosWsWage != null) {
			productEmbroideryNmPosWsWageValue = productEmbroideryNmPosWsWage;
		}
		// 基本工賃 + オプション工賃合計
		BigDecimal NextGenerationWageTotal = baseWageCount.add(jkNextGenerationWageTotal)
				.add(jkNextGenerationDetailWageTotal).add(glNextGenerationWageTotal)
				.add(glNextGenerationDetailWageTotal).add(ptNextGenerationWageTotal).add(pt2NextGenerationWageTotal)
				.add(shirtNextGenerationWageTotal).add(coatNextGenerationWageTotal)
				.add(coatNextGenerationDetailWageTotal).add(productIs3pieceWsWage).add(productSparePantsWsWage)
				.add(custIsDeliverShortningWsWage).add(productLcrSewingWsWage).add(productEmbroideryGazetteWsWageValue)
				.add(productEmbroideryNmPosWsWageValue);

		// 下代関連計算方法の オプション付属
		Integer jkNextGenerationPriceTotal = this.jkNextGenerationPriceTotal(order);
		Integer jkNextGenerationDetailPriceTotal = this.jkNextGenerationDetailPriceTotal(order);
		Integer glNextGenerationPriceTotal = this.glNextGenerationPriceTotal(order);
		Integer glNextGenerationDetailPriceTotal = this.glNextGenerationDetailPriceTotal(order);
		Integer ptNextGenerationPriceTotal = this.ptNextGenerationPriceTotal(order);
		Integer pt2NextGenerationPriceTotal = this.pt2NextGenerationPriceTotal(order);
		Integer shirtNextGenerationPriceTotal = this.shirtNextGenerationPriceTotal(order);
		Integer coatNextGenerationPriceTotal = this.coatNextGenerationPriceTotal(order);
		Integer coatNextGenerationDetailPriceTotal = this.coatNextGenerationDetailPriceTotal(order);

		// 基本付属代
		Integer basePriceCount = this.basePriceCount(order, basicNextGenerationPriceList);
		// 商品情報_３Piece_下代付属
		Integer productIs3pieceWsPrice = order.getProductIs3pieceWsPrice();
		// 商品情報_スペアパンツ下代付属
		Integer productSparePantsWsPrice = order.getProductSparePantsWsPrice();
		// お客様情報_納期短縮_下代付属
		Integer custIsDeliverShortningWsPrice = order.getCustIsDeliverShortningWsPrice();
		// 商品情報_LCR縫製_下代付属
		Integer productLcrSewingWsPrice = order.getProductLcrSewingWsPrice();
		// 商品情報_ガゼット刺繍_下代付属
		Integer productEmbroideryGazetteWsPrice = order.getProductEmbroideryGazetteWsPrice();
		// 商品情報_刺繍箇所_下代付属
		Integer productEmbroideryNmPosWsPrice = order.getProductEmbroideryNmPosWsPrice();
		
		Integer productEmbroideryGazetteWsPriceValue = 0;
		Integer productEmbroideryNmPosWsPriceValue = 0;
		if(productEmbroideryGazetteWsPrice != null) {
			productEmbroideryGazetteWsPriceValue = productEmbroideryGazetteWsPrice;
		}
		if(productEmbroideryNmPosWsPrice != null) {
			productEmbroideryNmPosWsPriceValue = productEmbroideryNmPosWsPrice;
		}
		// オプション付属合計
		Integer NextGenerationPriceTotal = basePriceCount + jkNextGenerationPriceTotal
				+ jkNextGenerationDetailPriceTotal + glNextGenerationPriceTotal + glNextGenerationDetailPriceTotal
				+ ptNextGenerationPriceTotal + pt2NextGenerationPriceTotal + shirtNextGenerationPriceTotal
				+ coatNextGenerationPriceTotal + coatNextGenerationDetailPriceTotal + productIs3pieceWsPrice
				+ productSparePantsWsPrice + custIsDeliverShortningWsPrice + productLcrSewingWsPrice
				+ productEmbroideryGazetteWsPriceValue + productEmbroideryNmPosWsPriceValue;

		// 下代関連計算方法の要尺
		Integer jacketYield = this.getJacketYield(order, yieldList);
		Integer giletYield = this.getGiletYield(yieldList);
		Integer pants2Yield = this.getPants2Yield(yieldList);
		Integer pantsYield = this.getPantsYield(yieldList);
		Integer shirtYield = this.getShirtYield(yieldList);
		Integer coatYield = this.getCoatYield(yieldList);
		// 要尺合計
		Double yieldTotal = (double) (jacketYield + giletYield + pantsYield + pants2Yield + shirtYield + coatYield)
				/ 1000;

		// 下代関連計算方法の生地代
		Integer fabricPrice = priceCode.getFabricPrice();

		// 下代関連計算方法の下代調整金
		Integer wsPriceAdjust = priceCode.getWsPriceAdjust();

		// 下代関連計算方法の為替
		BigDecimal dollarExchange = this.getDollarExchange(order, wholesalePieceList, priceCode);

		// 下代関連計算方法の製品関税
		Double productTariff = this.getProductTariff(order, wholesalePieceList, priceCode);

		// 下代関連計算方法の製品運賃
		Integer productShipping = this.getProductShipping(order, wholesalePieceList, priceCode);

		// 下代関連計算方法の運賃誤差
		Integer shippingError = this.getShippingError(order, wholesalePieceList, priceCode);

		// 下代関連計算方法のメーカーマージン
		Double makerMarginRate = marginRate.getMarginRate();

		/*
		 * ( ( ( (生地代×要尺) + (基本工賃 + オプション工賃) * 為替 + (基本付属代 ＋ オプション付属) )*製品関税 ) ＋
		 * 製品運賃＋運賃誤差 )*メーカーマージン+ 下代調整金
		 */

		// 生地代×要尺
		BigDecimal fabricPriceYieldTotal = BigDecimalCommonTransfer((fabricPrice * yieldTotal));
		// (基本付属代 ＋ オプション付属)
		BigDecimal NextGenerationPriceTotalTransfer = BigDecimalCommonTransfer(NextGenerationPriceTotal);
		// 製品関税
		BigDecimal productTariffTransfer = BigDecimalCommonTransfer((productTariff / 100));
		// 製品運賃＋運賃誤差
		BigDecimal productShippingShippingError = BigDecimalCommonTransfer(productShipping + shippingError);
		// メーカーマージン
		BigDecimal makerMarginRateTransfer = BigDecimalCommonTransfer((makerMarginRate / 100));
		// 下代調整金
		BigDecimal wsPriceAdjustTransfer = BigDecimalCommonTransfer(wsPriceAdjust);

		BigDecimal nextGenerationRelationCount = (((fabricPriceYieldTotal
				.add(NextGenerationWageTotal.multiply(dollarExchange)).add(NextGenerationPriceTotalTransfer))
						.multiply(productTariffTransfer)).add(productShippingShippingError))
								.multiply(makerMarginRateTransfer).add(wsPriceAdjustTransfer);
		Integer convertNumber = this.convertNumber(nextGenerationRelationCount);
		order.setWsPrice(convertNumber);

	}

	/**
	 * 計算結果の1円の桁は切り捨て
	 * 
	 * @return
	 */
	public Integer convertNumber(BigDecimal nextGenerationRelationCount) {
		BigDecimal nextGenerationCount = nextGenerationRelationCount.setScale(0, RoundingMode.DOWN);
		Integer nextGeneration = Integer.parseInt(nextGenerationCount.toString());
		nextGeneration = nextGeneration - (nextGeneration % 10);
		return nextGeneration;
	}

	/**
	 * 再補正値が「お渡し時再補正入力」画面からオーダー詳細画面に伝わる
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param userId
	 */
	public void dealWithCorrectAgainCo(OrderCoForm orderCoForm, Order order, String userId) {
		String suitItemCode = "01";
		String jacketItemCode = "02";
		String pantsItemCode = "03";
		String giletItemCode = "04";
		String suit2PP = "22";
		String suit3P2PP = "32";
		String suit3P = "31";
		String productItemDisplaycode = order.getProductItemDisplaycode();
		String productItem = order.getProductItem();
		if (suitItemCode.equals(productItem)) {
			// JACKET_着丈_再補正値
			String corJkBodylengthCorrectAgain = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkBodylengthCorrectAgain();
			BigDecimal corJkBodylengthCorrectA = convertBigDecimal(corJkBodylengthCorrectAgain);
			// JACKET_着丈_再補正値フラッグ
			String corJkBodylengthCorrectAgainFlag = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkBodylengthCorrectAgainFlag();
			BigDecimal corJkBodylengthCorrectAgainF = new BigDecimal(corJkBodylengthCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corJkBodylengthCorrect = corJkBodylengthCorrectA.multiply(corJkBodylengthCorrectAgainF);
			// JACKET_着丈_再補正値
			order.setCorJkBodylengthCorrectAgain(corJkBodylengthCorrect);

			// JACKET_ウエスト_再補正値
			String corJkWaistCorrectAgain = orderCoForm.getCoAdjustJacketStandardInfo().getCorJkWaistCorrectAgain();
			BigDecimal corJkWaistCorrectA = convertBigDecimal(corJkWaistCorrectAgain);
			// JACKET_ウエスト_再補正値フラッグ
			String corJkWaistCorrectAgainFlag = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkWaistCorrectAgainFlag();
			BigDecimal corJkWaistCorrectAgainF = new BigDecimal(corJkWaistCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corJkWaistCorrect = corJkWaistCorrectA.multiply(corJkWaistCorrectAgainF);
			// JACKET_ウエスト_再補正値
			order.setCorJkWaistCorrectAgain(corJkWaistCorrect);

			// JACKET_袖丈右_再補正値
			String corJkRightsleeveCorrectAgain = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkRightsleeveCorrectAgain();
			BigDecimal corJkRightsleeveCorrectA = convertBigDecimal(corJkRightsleeveCorrectAgain);
			// JACKET_袖丈右_再補正値フラッグ
			String corJkRightsleeveCorrectAgainFlag = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkRightsleeveCorrectAgainFlag();
			BigDecimal corJkRightsleeveCorrectAgainF = new BigDecimal(corJkRightsleeveCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corJkRightsleeveCorrect = corJkRightsleeveCorrectA.multiply(corJkRightsleeveCorrectAgainF);
			// JACKET_袖丈右_再補正値
			order.setCorJkRightsleeveCorrectAgain(corJkRightsleeveCorrect);

			// JACKET_袖丈左_再補正値
			String corJkLeftsleeveCorrectAgain = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkLeftsleeveCorrectAgain();
			BigDecimal corJkLeftsleeveCorrectA = convertBigDecimal(corJkLeftsleeveCorrectAgain);
			// JACKET_袖丈左_再補正値フラッグ
			String corJkLeftsleeveCorrectAgainFlag = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkLeftsleeveCorrectAgainFlag();
			BigDecimal corJkLeftsleeveCorrectAgainF = new BigDecimal(corJkLeftsleeveCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corJkLeftsleeveCorrect = corJkLeftsleeveCorrectA.multiply(corJkLeftsleeveCorrectAgainF);
			// JACKET_袖丈左_再補正値
			order.setCorJkLeftsleeveCorrectAgain(corJkLeftsleeveCorrect);

			// PANTS_ウエスト_再補正値
			String corPtWaistCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo().getCorPtWaistCorrectAgain();
			BigDecimal corPtWaistCorrectA = convertBigDecimal(corPtWaistCorrectAgain);
			// PANTS_ウエスト_再補正値フラッグ
			String corPtWaistCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtWaistCorrectAgainFlag();
			BigDecimal corPtWaistCorrectAgainF = new BigDecimal(corPtWaistCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtWaistCorrect = corPtWaistCorrectA.multiply(corPtWaistCorrectAgainF);
			// PANTS_ウエスト_再補正値
			order.setCorPtWaistCorrectAgain(corPtWaistCorrect);

			// PANTS_ヒップ_再補正値
			String corPtHipCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo().getCorPtHipCorrectAgain();
			BigDecimal corPtHipCorrectA = convertBigDecimal(corPtHipCorrectAgain);
			// PANTS_ヒップ_再補正値フラッグ
			String corPtHipCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo().getCorPtHipCorrectAgainFlag();
			BigDecimal corPtHipCorrectAgainF = new BigDecimal(corPtHipCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtHipCorrect = corPtHipCorrectA.multiply(corPtHipCorrectAgainF);
			// PANTS_ヒップ_再補正値
			order.setCorPtHipCorrectAgain(corPtHipCorrect);

			// PANTS_ワタリ_再補正値
			String corPtThighwidthCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtThighwidthCorrectAgain();
			BigDecimal corPtThighwidthCorrectA = convertBigDecimal(corPtThighwidthCorrectAgain);
			// PANTS_ワタリ_再補正値フラッグ
			String corPtThighwidthCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtThighwidthCorrectAgainFlag();
			BigDecimal corPtThighwidthCorrectAgainF = new BigDecimal(corPtThighwidthCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtThighwidthCorrect = corPtThighwidthCorrectA.multiply(corPtThighwidthCorrectAgainF);
			// PANTS_ワタリ_再補正値
			order.setCorPtThighwidthCorrectAgain(corPtThighwidthCorrect);

			// PANTS_裾幅_修正_再補正値
			String corPtHemwidthCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtHemwidthCorrectAgain();
			BigDecimal corPtHemwidthCorrectA = convertBigDecimal(corPtHemwidthCorrectAgain);
			// PANTS_裾幅_修正_再補正値フラッグ
			String corPtHemwidthCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtHemwidthCorrectAgainFlag();
			BigDecimal corPtHemwidthCorrectAgainF = new BigDecimal(corPtHemwidthCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtHemwidthCorrect = corPtHemwidthCorrectA.multiply(corPtHemwidthCorrectAgainF);
			// PANTS_裾幅_修正_再補正値
			order.setCorPtHemwidthCorrectAgain(corPtHemwidthCorrect);

			// PANTS_股下右_再補正値
			String corPtRightinseamCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtRightinseamCorrectAgain();
			BigDecimal corPtRightinseamCorrectA = convertBigDecimal(corPtRightinseamCorrectAgain);
			// PANTS_股下右_再補正値フラッグ
			String corPtRightinseamCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtRightinseamCorrectAgainFlag();
			BigDecimal corPtRightinseamCorrectAgainF = new BigDecimal(corPtRightinseamCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtRightinseamCorrect = corPtRightinseamCorrectA.multiply(corPtRightinseamCorrectAgainF);
			// PANTS_股下右_再補正値
			order.setCorPtRightinseamCorrectAgain(corPtRightinseamCorrect);

			// PANTS_股下左_再補正値
			String corPtLeftinseamCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtLeftinseamCorrectAgain();
			BigDecimal corPtLeftinseamCorrectA = convertBigDecimal(corPtLeftinseamCorrectAgain);
			// PANTS_股下左_再補正値フラッグ
			String corPtLeftinseamCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtLeftinseamCorrectAgainFlag();
			BigDecimal corPtLeftinseamCorrectAgainF = new BigDecimal(corPtLeftinseamCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtLeftinseamCorrect = corPtLeftinseamCorrectA.multiply(corPtLeftinseamCorrectAgainF);
			// PANTS_股下左_再補正値
			order.setCorPtLeftinseamCorrectAgain(corPtLeftinseamCorrect);

			if (suit2PP.equals(productItemDisplaycode) || suit3P2PP.equals(productItemDisplaycode)) {
				// ２PANTS_ウエスト_再補正値
				String corPt2WaistCorrectAgain = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2WaistCorrectAgain();
				BigDecimal corPt2WaistCorrectA = convertBigDecimal(corPt2WaistCorrectAgain);
				// ２PANTS_ウエスト_再補正値フラッグ
				String corPt2WaistCorrectAgainFlag = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2WaistCorrectAgainFlag();
				BigDecimal corPt2WaistCorrectAgainF = new BigDecimal(corPt2WaistCorrectAgainFlag);
				// 再補正値*再補正値フラッグ
				BigDecimal corPt2WaistCorrect = corPt2WaistCorrectA.multiply(corPt2WaistCorrectAgainF);
				// ２PANTS_ウエスト_再補正値
				order.setCorPt2WaistCorrectAgain(corPt2WaistCorrect);

				// ２PANTS_ヒップ_再補正値
				String corPt2HipCorrectAgain = orderCoForm.getCoAdjustPants2StandardInfo().getCorPt2HipCorrectAgain();
				BigDecimal corPt2HipCorrectA = convertBigDecimal(corPt2HipCorrectAgain);
				// ２PANTS_ヒップ_再補正値フラッグ
				String corPt2HipCorrectAgainFlag = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2HipCorrectAgainFlag();
				BigDecimal corPt2HipCorrectAgainF = new BigDecimal(corPt2HipCorrectAgainFlag);
				// 再補正値*再補正値フラッグ
				BigDecimal corPt2HipCorrect = corPt2HipCorrectA.multiply(corPt2HipCorrectAgainF);
				// ２PANTS_ヒップ_再補正値
				order.setCorPt2HipCorrectAgain(corPt2HipCorrect);

				// 2PANTS_ワタリ_再補正値
				String corPt2ThighwidthCorrectAgain = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2ThighwidthCorrectAgain();
				BigDecimal corPt2ThighwidthCorrectA = convertBigDecimal(corPt2ThighwidthCorrectAgain);
				// 2PANTS_ワタリ_再補正値フラッグ
				String corPt2ThighwidthCorrectAgainFlag = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2ThighwidthCorrectAgainFlag();
				BigDecimal corPt2ThighwidthCorrectAgainF = new BigDecimal(corPt2ThighwidthCorrectAgainFlag);
				// 再補正値*再補正値フラッグ
				BigDecimal corPt2ThighwidthCorrect = corPt2ThighwidthCorrectA.multiply(corPt2ThighwidthCorrectAgainF);
				// 2PANTS_ワタリ_再補正値
				order.setCorPt2ThighwidthCorrectAgain(corPt2ThighwidthCorrect);

				// 2PANTS_裾幅_修正_再補正値
				String corPt2HemwidthCorrectAgain = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2HemwidthCorrectAgain();
				BigDecimal corPt2HemwidthCorrectA = convertBigDecimal(corPt2HemwidthCorrectAgain);
				// 2PANTS_裾幅_修正_再補正値フラッグ
				String corPt2HemwidthCorrectAgainFlag = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2HemwidthCorrectAgainFlag();
				BigDecimal corPt2HemwidthCorrectAgainF = new BigDecimal(corPt2HemwidthCorrectAgainFlag);
				// 再補正値*再補正値フラッグ
				BigDecimal corPt2HemwidthCorrect = corPt2HemwidthCorrectA.multiply(corPt2HemwidthCorrectAgainF);
				// 2PANTS_裾幅_修正_再補正値
				order.setCorPt2HemwidthCorrectAgain(corPt2HemwidthCorrect);

				// 2PANTS_股下右_再補正値
				String corPt2RightinseamCorrectAgain = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2RightinseamCorrectAgain();
				BigDecimal corPt2RightinseamCorrectA = convertBigDecimal(corPt2RightinseamCorrectAgain);
				// 2PANTS_股下右_再補正値フラッグ
				String corPt2RightinseamCorrectAgainFlag = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2RightinseamCorrectAgainFlag();
				BigDecimal corPt2RightinseamCorrectAgainF = new BigDecimal(corPt2RightinseamCorrectAgainFlag);
				// 再補正値*再補正値フラッグ
				BigDecimal corPt2RightinseamCorrect = corPt2RightinseamCorrectA
						.multiply(corPt2RightinseamCorrectAgainF);
				// 2PANTS_股下右_再補正値
				order.setCorPt2RightinseamCorrectAgain(corPt2RightinseamCorrect);

				// 2PANTS_股下左_再補正値
				String corPt2LeftinseamCorrectAgain = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2LeftinseamCorrectAgain();
				BigDecimal corPt2LeftinseamCorrectA = convertBigDecimal(corPt2LeftinseamCorrectAgain);
				// 2PANTS_股下左_再補正値フラッグ
				String corPt2LeftinseamCorrectAgainFlag = orderCoForm.getCoAdjustPants2StandardInfo()
						.getCorPt2LeftinseamCorrectAgainFlag();
				BigDecimal corPt2LeftinseamCorrectAgainF = new BigDecimal(corPt2LeftinseamCorrectAgainFlag);
				// 再補正値*再補正値フラッグ
				BigDecimal corPt2LeftinseamCorrect = corPt2LeftinseamCorrectA.multiply(corPt2LeftinseamCorrectAgainF);
				// 2PANTS_股下左_再補正値
				order.setCorPt2LeftinseamCorrectAgain(corPt2LeftinseamCorrect);
			}

			if (suit3P.equals(productItemDisplaycode) || suit3P2PP.equals(productItemDisplaycode)) {
				// GILET_着丈_再補正値
				String corGlBodylengthCorrectAgain = orderCoForm.getCoAdjustGiletStandardInfo()
						.getCorGlBodylengthCorrectAgain();
				BigDecimal corGlBodylengthCorrectA = convertBigDecimal(corGlBodylengthCorrectAgain);
				// GILET_着丈_再補正値フラッグ
				String corGlBodylengthCorrectAgainFlag = orderCoForm.getCoAdjustGiletStandardInfo()
						.getCorGlBodylengthCorrectAgainFlag();
				BigDecimal corGlBodylengthCorrectAgainF = new BigDecimal(corGlBodylengthCorrectAgainFlag);
				// 再補正値*再補正値フラッグ
				BigDecimal corGlBodylengthCorrect = corGlBodylengthCorrectA.multiply(corGlBodylengthCorrectAgainF);
				// GILET_着丈_再補正値
				order.setCorGlBodylengthCorrectAgain(corGlBodylengthCorrect);

				// GILET_バスト_再補正値
				String corGlBustCorrectAgain = orderCoForm.getCoAdjustGiletStandardInfo().getCorGlBustCorrectAgain();
				BigDecimal corGlBustCorrectA = convertBigDecimal(corGlBustCorrectAgain);
				// GILET_バスト_再補正値フラッグ
				String corGlBustCorrectAgainFlag = orderCoForm.getCoAdjustGiletStandardInfo()
						.getCorGlBustCorrectAgainFlag();
				BigDecimal corGlBustCorrectAgainF = new BigDecimal(corGlBustCorrectAgainFlag);
				// 再補正値*再補正値フラッグ
				BigDecimal corGlBustCorrect = corGlBustCorrectA.multiply(corGlBustCorrectAgainF);
				// GILET_バスト_再補正値
				order.setCorGlBustCorrectAgain(corGlBustCorrect);

				// GILET_ウエスト_再補正値
				String corGlWaistCorrectAgain = orderCoForm.getCoAdjustGiletStandardInfo().getCorGlWaistCorrectAgain();
				BigDecimal corGlWaistCorrectA = convertBigDecimal(corGlWaistCorrectAgain);
				// GILET_ウエスト_再補正値フラッグ
				String corGlWaistCorrectAgainFlag = orderCoForm.getCoAdjustGiletStandardInfo()
						.getCorGlWaistCorrectAgainFlag();
				BigDecimal corGlWaistCorrectAgainF = new BigDecimal(corGlWaistCorrectAgainFlag);
				// 再補正値*再補正値フラッグ
				BigDecimal corGlWaistCorrect = corGlWaistCorrectA.multiply(corGlWaistCorrectAgainF);
				// GILET_ウエスト_再補正値
				order.setCorGlWaistCorrectAgain(corGlWaistCorrect);
			}

		} else if (jacketItemCode.equals(productItem)) {
			// JACKET_着丈_再補正値
			String corJkBodylengthCorrectAgain = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkBodylengthCorrectAgain();
			BigDecimal corJkBodylengthCorrectA = convertBigDecimal(corJkBodylengthCorrectAgain);
			// JACKET_着丈_再補正値フラッグ
			String corJkBodylengthCorrectAgainFlag = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkBodylengthCorrectAgainFlag();
			BigDecimal corJkBodylengthCorrectAgainF = new BigDecimal(corJkBodylengthCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corJkBodylengthCorrect = corJkBodylengthCorrectA.multiply(corJkBodylengthCorrectAgainF);
			// JACKET_着丈_再補正値
			order.setCorJkBodylengthCorrectAgain(corJkBodylengthCorrect);

			// JACKET_ウエスト_再補正値
			String corJkWaistCorrectAgain = orderCoForm.getCoAdjustJacketStandardInfo().getCorJkWaistCorrectAgain();
			BigDecimal corJkWaistCorrectA = convertBigDecimal(corJkWaistCorrectAgain);
			// JACKET_ウエスト_再補正値フラッグ
			String corJkWaistCorrectAgainFlag = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkWaistCorrectAgainFlag();
			BigDecimal corJkWaistCorrectAgainF = new BigDecimal(corJkWaistCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corJkWaistCorrect = corJkWaistCorrectA.multiply(corJkWaistCorrectAgainF);
			// JACKET_ウエスト_再補正値
			order.setCorJkWaistCorrectAgain(corJkWaistCorrect);

			// JACKET_袖丈右_再補正値
			String corJkRightsleeveCorrectAgain = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkRightsleeveCorrectAgain();
			BigDecimal corJkRightsleeveCorrectA = convertBigDecimal(corJkRightsleeveCorrectAgain);
			// JACKET_袖丈右_再補正値フラッグ
			String corJkRightsleeveCorrectAgainFlag = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkRightsleeveCorrectAgainFlag();
			BigDecimal corJkRightsleeveCorrectAgainF = new BigDecimal(corJkRightsleeveCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corJkRightsleeveCorrect = corJkRightsleeveCorrectA.multiply(corJkRightsleeveCorrectAgainF);
			// JACKET_袖丈右_再補正値
			order.setCorJkRightsleeveCorrectAgain(corJkRightsleeveCorrect);

			// JACKET_袖丈左_再補正値
			String corJkLeftsleeveCorrectAgain = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkLeftsleeveCorrectAgain();
			BigDecimal corJkLeftsleeveCorrectA = convertBigDecimal(corJkLeftsleeveCorrectAgain);
			// JACKET_袖丈左_再補正値フラッグ
			String corJkLeftsleeveCorrectAgainFlag = orderCoForm.getCoAdjustJacketStandardInfo()
					.getCorJkLeftsleeveCorrectAgainFlag();
			BigDecimal corJkLeftsleeveCorrectAgainF = new BigDecimal(corJkLeftsleeveCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corJkLeftsleeveCorrect = corJkLeftsleeveCorrectA.multiply(corJkLeftsleeveCorrectAgainF);
			// JACKET_袖丈左_再補正値
			order.setCorJkLeftsleeveCorrectAgain(corJkLeftsleeveCorrect);
		} else if (pantsItemCode.equals(productItem)) {
			// PANTS_ウエスト_再補正値
			String corPtWaistCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo().getCorPtWaistCorrectAgain();
			BigDecimal corPtWaistCorrectA = convertBigDecimal(corPtWaistCorrectAgain);
			// PANTS_ウエスト_再補正値フラッグ
			String corPtWaistCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtWaistCorrectAgainFlag();
			BigDecimal corPtWaistCorrectAgainF = new BigDecimal(corPtWaistCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtWaistCorrect = corPtWaistCorrectA.multiply(corPtWaistCorrectAgainF);
			// PANTS_ウエスト_再補正値
			order.setCorPtWaistCorrectAgain(corPtWaistCorrect);

			// PANTS_ヒップ_再補正値
			String corPtHipCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo().getCorPtHipCorrectAgain();
			BigDecimal corPtHipCorrectA = convertBigDecimal(corPtHipCorrectAgain);
			// PANTS_ヒップ_再補正値フラッグ
			String corPtHipCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo().getCorPtHipCorrectAgainFlag();
			BigDecimal corPtHipCorrectAgainF = new BigDecimal(corPtHipCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtHipCorrect = corPtHipCorrectA.multiply(corPtHipCorrectAgainF);
			// PANTS_ヒップ_再補正値
			order.setCorPtHipCorrectAgain(corPtHipCorrect);

			// PANTS_ワタリ_再補正値
			String corPtThighwidthCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtThighwidthCorrectAgain();
			BigDecimal corPtThighwidthCorrectA = convertBigDecimal(corPtThighwidthCorrectAgain);
			// PANTS_ワタリ_再補正値フラッグ
			String corPtThighwidthCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtThighwidthCorrectAgainFlag();
			BigDecimal corPtThighwidthCorrectAgainF = new BigDecimal(corPtThighwidthCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtThighwidthCorrect = corPtThighwidthCorrectA.multiply(corPtThighwidthCorrectAgainF);
			// PANTS_ワタリ_再補正値
			order.setCorPtThighwidthCorrectAgain(corPtThighwidthCorrect);

			// PANTS_裾幅_修正_再補正値
			String corPtHemwidthCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtHemwidthCorrectAgain();
			BigDecimal corPtHemwidthCorrectA = convertBigDecimal(corPtHemwidthCorrectAgain);
			// PANTS_裾幅_修正_再補正値フラッグ
			String corPtHemwidthCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtHemwidthCorrectAgainFlag();
			BigDecimal corPtHemwidthCorrectAgainF = new BigDecimal(corPtHemwidthCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtHemwidthCorrect = corPtHemwidthCorrectA.multiply(corPtHemwidthCorrectAgainF);
			// PANTS_裾幅_修正_再補正値
			order.setCorPtHemwidthCorrectAgain(corPtHemwidthCorrect);

			// PANTS_股下右_再補正値
			String corPtRightinseamCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtRightinseamCorrectAgain();
			BigDecimal corPtRightinseamCorrectA = convertBigDecimal(corPtRightinseamCorrectAgain);
			// PANTS_股下右_再補正値フラッグ
			String corPtRightinseamCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtRightinseamCorrectAgainFlag();
			BigDecimal corPtRightinseamCorrectAgainF = new BigDecimal(corPtRightinseamCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtRightinseamCorrect = corPtRightinseamCorrectA.multiply(corPtRightinseamCorrectAgainF);
			// PANTS_股下右_再補正値
			order.setCorPtRightinseamCorrectAgain(corPtRightinseamCorrect);

			// PANTS_股下左_再補正値
			String corPtLeftinseamCorrectAgain = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtLeftinseamCorrectAgain();
			BigDecimal corPtLeftinseamCorrectA = convertBigDecimal(corPtLeftinseamCorrectAgain);
			// PANTS_股下左_再補正値フラッグ
			String corPtLeftinseamCorrectAgainFlag = orderCoForm.getCoAdjustPantsStandardInfo()
					.getCorPtLeftinseamCorrectAgainFlag();
			BigDecimal corPtLeftinseamCorrectAgainF = new BigDecimal(corPtLeftinseamCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corPtLeftinseamCorrect = corPtLeftinseamCorrectA.multiply(corPtLeftinseamCorrectAgainF);
			// PANTS_股下左_再補正値
			order.setCorPtLeftinseamCorrectAgain(corPtLeftinseamCorrect);
		} else if (giletItemCode.equals(productItem)) {

			// GILET_着丈_再補正値
			String corGlBodylengthCorrectAgain = orderCoForm.getCoAdjustGiletStandardInfo()
					.getCorGlBodylengthCorrectAgain();
			BigDecimal corGlBodylengthCorrectA = convertBigDecimal(corGlBodylengthCorrectAgain);
			// GILET_着丈_再補正値フラッグ
			String corGlBodylengthCorrectAgainFlag = orderCoForm.getCoAdjustGiletStandardInfo()
					.getCorGlBodylengthCorrectAgainFlag();
			BigDecimal corGlBodylengthCorrectAgainF = new BigDecimal(corGlBodylengthCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corGlBodylengthCorrect = corGlBodylengthCorrectA.multiply(corGlBodylengthCorrectAgainF);
			// GILET_着丈_再補正値
			order.setCorGlBodylengthCorrectAgain(corGlBodylengthCorrect);

			// GILET_バスト_再補正値
			String corGlBustCorrectAgain = orderCoForm.getCoAdjustGiletStandardInfo().getCorGlBustCorrectAgain();
			BigDecimal corGlBustCorrectA = convertBigDecimal(corGlBustCorrectAgain);
			// GILET_バスト_再補正値フラッグ
			String corGlBustCorrectAgainFlag = orderCoForm.getCoAdjustGiletStandardInfo()
					.getCorGlBustCorrectAgainFlag();
			BigDecimal corGlBustCorrectAgainF = new BigDecimal(corGlBustCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corGlBustCorrect = corGlBustCorrectA.multiply(corGlBustCorrectAgainF);
			// GILET_バスト_再補正値
			order.setCorGlBustCorrectAgain(corGlBustCorrect);

			// GILET_ウエスト_再補正値
			String corGlWaistCorrectAgain = orderCoForm.getCoAdjustGiletStandardInfo().getCorGlWaistCorrectAgain();
			BigDecimal corGlWaistCorrectA = convertBigDecimal(corGlWaistCorrectAgain);
			// GILET_ウエスト_再補正値フラッグ
			String corGlWaistCorrectAgainFlag = orderCoForm.getCoAdjustGiletStandardInfo()
					.getCorGlWaistCorrectAgainFlag();
			BigDecimal corGlWaistCorrectAgainF = new BigDecimal(corGlWaistCorrectAgainFlag);
			// 再補正値*再補正値フラッグ
			BigDecimal corGlWaistCorrect = corGlWaistCorrectA.multiply(corGlWaistCorrectAgainF);
			// GILET_ウエスト_再補正値
			order.setCorGlWaistCorrectAgain(corGlWaistCorrect);

		}
		order.setUpdatedUserId(userId);
		order.setUpdatedAt(new Date());
		String corStoreCorrectionMemoAgain = orderCoForm.getCorStoreCorrectionMemoAgain().replaceAll("\\n", "");
		order.setCorStoreCorrectionMemoAgain(corStoreCorrectionMemoAgain);
	}

	/**
	 * 補正の体型と号数を取得
	 * 
	 * @param figureList
	 * @param numberList
	 * @param orderCoForm
	 */
	public void getFigureNumberMap(OrderCoForm orderCoForm) {
		LinkedHashMap<String, String> jkFigureMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> ptFigureMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> glFigureMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> pt2FigureMap = new LinkedHashMap<String, String>();

		// 体型
		// JACKET
		jkFigureMap.put("", "選択　　　");
		// PANTS
		ptFigureMap.put("", "選択　　　");
		// GILET
		glFigureMap.put("", "選択　　　");
		// 2PANTS
		pt2FigureMap.put("", "選択　　　");

		// 号数
		LinkedHashMap<String, String> jkNumberMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> ptNumberMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> glNumberMap = new LinkedHashMap<String, String>();
		LinkedHashMap<String, String> pt2NumberMap = new LinkedHashMap<String, String>();

		// JACKET
		jkNumberMap.put("", "選択　　　");
		// PANTS
		ptNumberMap.put("", "選択　　　");
		// GILET
		glNumberMap.put("", "選択　　　");
		// 2PANTS
		pt2NumberMap.put("", "選択　　　");
		CoAdjustJacketStandardInfo adjustJacketStandardInfo = new CoAdjustJacketStandardInfo();
		adjustJacketStandardInfo.setSizeFigureMap(jkFigureMap);
		adjustJacketStandardInfo.setSizeNumberMap(jkNumberMap);
		orderCoForm.setCoAdjustJacketStandardInfo(adjustJacketStandardInfo);

		CoAdjustPantsStandardInfo adjustPantsStandardInfo = new CoAdjustPantsStandardInfo();
		adjustPantsStandardInfo.setSizeFigureMap(ptFigureMap);
		adjustPantsStandardInfo.setSizeNumberMap(ptNumberMap);
		orderCoForm.setCoAdjustPantsStandardInfo(adjustPantsStandardInfo);

		CoAdjustGiletStandardInfo adjustGiletStandardInfo = new CoAdjustGiletStandardInfo();
		adjustGiletStandardInfo.setSizeFigureMap(glFigureMap);
		adjustGiletStandardInfo.setSizeNumberMap(glNumberMap);
		orderCoForm.setCoAdjustGiletStandardInfo(adjustGiletStandardInfo);

		CoAdjustPants2StandardInfo adjustPants2StandardInfo = new CoAdjustPants2StandardInfo();
		adjustPants2StandardInfo.setSizeFigureMap(pt2FigureMap);
		adjustPants2StandardInfo.setSizeNumberMap(pt2NumberMap);
		orderCoForm.setCoAdjustPants2StandardInfo(adjustPants2StandardInfo);
		
		CoAdjustShirtStandardInfo adjustShirt2StandardInfo = new CoAdjustShirtStandardInfo();
		orderCoForm.setCoAdjustShirtStandardInfo(adjustShirt2StandardInfo);
		
		CoAdjustCoatStandardInfo adjustCoatStandardInfo = new CoAdjustCoatStandardInfo();
		orderCoForm.setCoAdjustCoatStandardInfo(adjustCoatStandardInfo);
	}

	/**
	 * 標準のオプション内容処理
	 * 
	 * @param standardOptionList
	 * @param orderCoForm
	 */
	public void getOptionStandardData(List<OptionBranch> standardOptionList, OrderCoForm orderCoForm) throws Exception {
		try {

			// ITEMの値
			CoItemClassStandardEnum[] itemClassStandardEnum = CoItemClassStandardEnum.values();
			// クラス名
			String classPath = "";
			// ITEMコードの種類
			String subItemCodeType = "";
			for (CoItemClassStandardEnum one : itemClassStandardEnum) {
				// サブアイテムコード
				subItemCodeType = one.getKey();
				classPath = CoItemClassStandardEnum.getValue(one.getKey());
				if (!classPath.isEmpty()) {
					// 標準可のデーター
					optionStandardData(classPath, orderCoForm, subItemCodeType, standardOptionList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
		}
	}

	/**
	 * 列挙によって標準のオプションデーターを設定
	 * 
	 * @param classPath
	 * @param orderCoForm
	 * @param subItemCode
	 * @param standardOptionList
	 * @throws Exception
	 */
	public void optionStandardData(String classPath, OrderCoForm orderCoForm, String subItemCode,
			List<OptionBranch> standardOptionList) throws Exception {
		try {
			// getClass
			Class<?> cls = Class.forName(classPath);

			CoOptionJacketStandardInfo optionJacketStandardInfo = new CoOptionJacketStandardInfo();
			CoOptionPantsStandardInfo optionStandardPantsInfo = new CoOptionPantsStandardInfo();
			CoOptionPants2StandardInfo optionPants2StandardInfo = new CoOptionPants2StandardInfo();
			CoOptionGiletStandardInfo optionGiletStandardInfo = new CoOptionGiletStandardInfo();
			CoOptionShirtStandardInfo optionShirtStandardInfo = new CoOptionShirtStandardInfo();
			CoOptionCoatStandardInfo optionCoatStandardInfo = new CoOptionCoatStandardInfo();

			List<OptionBranch> ptStandardList = new ArrayList<OptionBranch>();
			List<OptionBranch> jkStandardList = new ArrayList<OptionBranch>();
			List<OptionBranch> glStandardList = new ArrayList<OptionBranch>();
			List<OptionBranch> shStandardList = new ArrayList<OptionBranch>();
			List<OptionBranch> coStandardList = new ArrayList<OptionBranch>();
			List<OptionBranch> pt2StandardList = new ArrayList<OptionBranch>();

			for (OptionBranch optionBranch : standardOptionList) {
				// SUIT
				if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_SUIT.getKey())) {

				}
				// JACKET
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_JACKET.getKey())) {
					jkStandardList.add(optionBranch);
				}
				// PANTS
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_PANTS.getKey())) {
					ptStandardList.add(optionBranch);
				}
				// GILET
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_GILET.getKey())) {
					glStandardList.add(optionBranch);
				}
				// SHIRT
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_SHIRTS.getKey())) {
					shStandardList.add(optionBranch);
				}
				// COAT
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_COAT.getKey())) {
					coStandardList.add(optionBranch);
				}
				// 2PANTS
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_PANTS2.getKey())) {
					pt2StandardList.add(optionBranch);
				}
			}

			if (subItemCode.equals(ItemTypeEnum.ITEM_CODE_SUIT.getKey())) {

			}
			// JACKET
			else if (subItemCode.equals(ItemTypeEnum.ITEM_CODE_JACKET.getKey())) {
				if (!jkStandardList.isEmpty()) {
					JacketOptionStandardCodeEnum[] jacketOptionStandardEnum = JacketOptionStandardCodeEnum.values();
					for (JacketOptionStandardCodeEnum one : jacketOptionStandardEnum) {
						String[] codeVules = one.toString().split(",");
						// オプション選択肢コード ⇒ オプション選択肢名
						optionBranchNameData(codeVules, jkStandardList, cls, optionJacketStandardInfo);
					}
					JacketOptionStandardColorEnum[] jkOptionColors = JacketOptionStandardColorEnum.values();
					for (JacketOptionStandardColorEnum one : jkOptionColors) {
						String[] codeVules = one.toString().split(",");
						// オプション選択肢色コード ⇒ オプション選択肢色名
						optionBranchColorData(codeVules, jkStandardList, cls, optionJacketStandardInfo);
					}
					orderCoForm.setCoOptionJacketStandardInfo(optionJacketStandardInfo);
				}
			}
			// PANTS
			else if (subItemCode.equals(ItemTypeEnum.ITEM_CODE_PANTS.getKey())) {
				if (!ptStandardList.isEmpty()) {
					PantsOptionStandardCodeEnum[] pantsOptionCodes = PantsOptionStandardCodeEnum.values();
					for (PantsOptionStandardCodeEnum one : pantsOptionCodes) {
						String[] codeVules = one.toString().split(",");
						// オプション選択肢コード ⇒ オプション選択肢名
						optionBranchNameData(codeVules, ptStandardList, cls, optionStandardPantsInfo);
					}
					PantsOptionStandardColorEnum[] pantsOptionColors = PantsOptionStandardColorEnum.values();
					for (PantsOptionStandardColorEnum one : pantsOptionColors) {
						String[] codeVules = one.toString().split(",");
						// オプション選択肢色コード ⇒ オプション選択肢色名
						optionBranchColorData(codeVules, ptStandardList, cls, optionStandardPantsInfo);
					}
					orderCoForm.setCoOptionPantsStandardInfo(optionStandardPantsInfo);
				}
			}
			// GILET
			else if (subItemCode.equals(ItemTypeEnum.ITEM_CODE_GILET.getKey())) {
				if (!glStandardList.isEmpty()) {
					GiletOptionStandardCodeEnum[] giletOptionCodes = GiletOptionStandardCodeEnum.values();
					for (GiletOptionStandardCodeEnum one : giletOptionCodes) {

						String[] codeVules = one.toString().split(",");
						// オプション選択肢コード ⇒ オプション選択肢名
						optionBranchNameData(codeVules, glStandardList, cls, optionGiletStandardInfo);
					}
					GiletOptionStandardColorEnum[] giletOptionColors = GiletOptionStandardColorEnum.values();
					for (GiletOptionStandardColorEnum one : giletOptionColors) {

						String[] codeVules = one.toString().split(",");
						// オプション選択肢色コード ⇒ オプション選択肢色名
						optionBranchColorData(codeVules, glStandardList, cls, optionGiletStandardInfo);
					}
					orderCoForm.setCoOptionGiletStandardInfo(optionGiletStandardInfo);
				}
			}
			// SHIRT
			else if (subItemCode.equals(ItemTypeEnum.ITEM_CODE_SHIRTS.getKey())) {
				if (!shStandardList.isEmpty()) {
					ShirtOptionStandardCodeEnum[] shirtOptionCodeEnum = ShirtOptionStandardCodeEnum.values();
					for (ShirtOptionStandardCodeEnum one : shirtOptionCodeEnum) {
						String[] codeVules = one.toString().split(",");
						// オプション選択肢コード ⇒ オプション選択肢名
						optionBranchNameData(codeVules, shStandardList, cls, optionShirtStandardInfo);
					}
					orderCoForm.setCoOptionShirtStandardInfo(optionShirtStandardInfo);
				}
			}
			// COAT
			else if (subItemCode.equals(ItemTypeEnum.ITEM_CODE_COAT.getKey())) {
				if (!coStandardList.isEmpty()) {
					CoatOptionStandardCodeEnum[] coatOptionCodeEnum = CoatOptionStandardCodeEnum.values();
					for (CoatOptionStandardCodeEnum one : coatOptionCodeEnum) {

						String[] codeVules = one.toString().split(",");
						// オプション選択肢コード ⇒ オプション選択肢名
						optionBranchNameData(codeVules, coStandardList, cls, optionCoatStandardInfo);
					}
					orderCoForm.setCoOptionCoatStandardInfo(optionCoatStandardInfo);
				}
			}
			// 2PANTS
			else if (subItemCode.equals(ItemTypeEnum.ITEM_CODE_PANTS2.getKey())) {
				if (!pt2StandardList.isEmpty()) {
					Pants2OptionStandardCodeEnum[] pants2OptionStandardCodeEnum = Pants2OptionStandardCodeEnum.values();
					for (Pants2OptionStandardCodeEnum one : pants2OptionStandardCodeEnum) {

						String[] codeVules = one.toString().split(",");
						// オプション選択肢コード ⇒ オプション選択肢名
						optionBranchNameData(codeVules, pt2StandardList, cls, optionPants2StandardInfo);
					}
					Pants2OptionStandardColorEnum[] pants2OptionColors = Pants2OptionStandardColorEnum.values();
					for (Pants2OptionStandardColorEnum one : pants2OptionColors) {
						String[] codeVules = one.toString().split(",");
						// オプション選択肢色コード ⇒ オプション選択肢色名
						optionBranchColorData(codeVules, pt2StandardList, cls, optionPants2StandardInfo);
					}
					orderCoForm.setCoOptionPants2StandardInfo(optionPants2StandardInfo);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
		}
	}

	/**
	 * オプション選択肢色コードとオプション選択肢色名を設定する
	 * 
	 * @param codeVules
	 * @param optionBranchList
	 * @param cls
	 * @param obj
	 */
	private void optionBranchColorData(String[] codeVules, List<OptionBranch> optionBranchList, Class<?> cls,
			Object obj) {
		// 選択肢名Map
		Map<String, String> optionBranchNameMap = new LinkedHashMap<String, String>();

		for (OptionBranch detail : optionBranchList) {
			if (codeVules[0].equals(detail.getOptionCode())) {
				optionBranchNameMap.put(detail.getOptionBranchCode(), detail.getOptionBranchName());
			}
		}
		// get OptionCode method
		Method myMethod = getMethod(cls, codeVules[1]);
		Object[] args = { optionBranchNameMap };
		if (myMethod != null) {
			// use OptionCode method
			ReflectionUtils.invoke(myMethod, obj, args);
		}

	}

	/**
	 * オプション選択肢コードとオプション選択肢名を設定する
	 * 
	 * @param codeVules
	 * @param optionBranchList
	 * @param cls
	 * @param obj
	 */
	private void optionBranchNameData(String[] codeVules, List<OptionBranch> optionBranchList, Class<?> cls,
			Object obj) {
		// 選択肢名Map
		Map<String, String> optionBranchNameMap = new LinkedHashMap<String, String>();

		for (OptionBranch detail : optionBranchList) {
			// 列挙のkeyがオプションコードの場合
			if (codeVules[0].equals(detail.getOptionCode())) {
				optionBranchNameMap.put(detail.getOptionBranchCode(), detail.getOptionBranchName());
			}
		}
		// オプションコード対応方法を取得
		Method myMethod = getMethod(cls, codeVules[1]);
		Object[] args = { optionBranchNameMap };
		if (myMethod != null) {
			ReflectionUtils.invoke(myMethod, obj, args);
		}

	}

	/**
	 * 「オーダー登録」画面、商品のサブアイテムコードの処理
	 * 
	 * @param itemList
	 * @param orderCoForm
	 */
	public void getItem(List<Item> itemList, OrderCoForm orderCoForm) {
		Map<String, String> itemMap = new LinkedHashMap<String, String>();
		for (Item item : itemList) {
			itemMap.put(item.getItemCode(), item.getItemName());
		}
		orderCoForm.setProductItemMap(itemMap);
	}

	/**
	 * 消費税を取得
	 * 
	 * @param taxRate
	 * @param orderCoForm
	 */
	public void getTaxRate(int taxRate, OrderCoForm orderCoForm) {
		String taxRateStr = String.valueOf(taxRate);
		orderCoForm.setTaxRate(taxRateStr);
	}

	/**
	 * 要尺を取得
	 * 
	 * @param taxRate
	 * @param orderCoForm
	 */
	public void getYield(List<Yield> yieldList, OrderCoForm orderCoForm) {
		orderCoForm.setYield(new Gson().toJson(yieldList));
	}

	/**
	 * オプション選択肢とオプション選択肢詳細の料金を取得
	 * 
	 * @param priceList
	 * @return
	 */
	public List<OrderCodePrice> optionBranchPriceData(List<OrderPrice> priceList) {
		// オプション価格List
		List<OrderCodePrice> optionCodePriceList = new ArrayList<OrderCodePrice>();

		if (priceList.size() > 0) {

			for (OrderPrice detail : priceList) {

				OrderCodePrice price = new OrderCodePrice();
				// オプション選択肢:item_code
				String branchItemCode = detail.getBranchItemCode();
				// オプション選択肢:sub_item_code
				String branchSubItemCode = detail.getBranchSubItemCode();
				// オプション選択肢:model_code
				String branchModelCode = detail.getBranchModelCode();
				// オプション選択肢:option_code
				String branchOptionCode = detail.getBranchOptionCode();
				// オプション選択肢:option_branch_code
				String optinBranchCode = detail.getOptinBranchCode();

				String key = branchItemCode.concat(branchSubItemCode).concat(branchModelCode).concat(branchOptionCode)
						.concat(optinBranchCode);
				// branchItemCode + branchSubItemCode + branchModelCode + branchOptionCode +
				// optinBranchCode;

				price.setOrderKeyCode(key);
				price.setOrderBranchPrice(detail.getOptionBranchPrice().toString());
				price.setOrderBranchDoublePrice(detail.getOptionBranchDoublePrice().toString());

				// オプション選択肢詳細:item_code
				String detailItemCode = detail.getDetailItemCode();
				// オプション選択肢詳細:sub_item_code
				String detailSubItemCode = detail.getDetailSubItemCode();
				// オプション選択肢詳細:option_code
				String detailOptionCode = detail.getDetailOptionCode();
				// オプション選択肢詳細:option_branch_code
				String detailOptionBranchCode = detail.getDetailOptionBranchCode();
				// オプション選択肢詳細:option_branch_detail_code
				String optionBranchDetailCode = detail.getOptionBranchDetailCode();

				if (detailItemCode != null && detailSubItemCode != null && detailOptionCode != null
						&& detailOptionBranchCode != null && optionBranchDetailCode != null) {

					String detailKey = detailItemCode.concat(detailSubItemCode).concat(branchModelCode)
							.concat(detailOptionCode).concat(detailOptionBranchCode).concat(optionBranchDetailCode);

//							detailItemCode + detailSubItemCode + branchModelCode + detailOptionCode + detailOptionBranchCode
//									+ optionBranchDetailCode;

					price.setOrderDetailKeyCode(detailKey);
					price.setOrderBranchDetailPrice(detail.getDetailBranchPrice().toString());
					price.setOrderBranchDetailDoublePrice(detail.getDetailBranchDoublePrice().toString());
				}

				optionCodePriceList.add(price);
			}

		}
		return optionCodePriceList;
	}

	public void customerAndProductDefaultValue(OrderCoForm orderCoForm) {
		CoCustomerMessageInfo customerMessageInfo = new CoCustomerMessageInfo();
		customerMessageInfo.setOrderId("");
		customerMessageInfo.setCustCd("");
		customerMessageInfo.setCustNm("");
		customerMessageInfo.setCustKanaNm("");
//		customerMessageInfo.setCustIsDeliverShortning("9000901");
//		customerMessageInfo.setCustIsEarlyDiscount("9001001");
		customerMessageInfo.setCustStaff("");
		customerMessageInfo.setCustType("01");
		customerMessageInfo.setCustShippingDestination("01");
		customerMessageInfo.setCustRemark("");
		
		orderCoForm.setCustIsDeliverShortning("9000901");
		
		orderCoForm.setCustIsEarlyDiscount("9001001");
		
		orderCoForm.setCoCustomerMessageInfo(customerMessageInfo);

		orderCoForm.setProductItem("01");

		orderCoForm.setProductIs3Piece("0009901");

		orderCoForm.setProductSparePantsClass("0009901");

		orderCoForm.setProductFabricNo("");

		orderCoForm.setProductCategory("9000101");

		orderCoForm.setProductLcrSewing("9000201");

		orderCoForm.setProductBrandNm("");

		orderCoForm.setProductFabricNmNecessity("9000401");

		orderCoForm.setProductEmbroideryNecessity("9000501");
		
		orderCoForm.setProductEmbroideryNm("");
		orderCoForm.setProductEmbroideryFont("");
		orderCoForm.setJkProductEmbroideryThreadColor("110");
		orderCoForm.setStProductEmbroideryThreadColor("402");
		orderCoForm.setProductEmbroideryNmPos("0002201");
		orderCoForm.setProductEmbroideryGazette("0002301");
		orderCoForm.setProductRemainingClothType("9000801");
	}

	public void jacketDefaultValue(OrderCoForm orderCoForm) {
		// 標準
		CoOptionJacketStandardInfo optionJacketStandardInfo = orderCoForm.getCoOptionJacketStandardInfo();
		optionJacketStandardInfo.setOjJacketModel("");
		optionJacketStandardInfo.setOjFrontBtnCnt(OptionCodeKeys.JK_0000101);
		optionJacketStandardInfo.setOjLapelDesign(OptionCodeKeys.JK_0000201);
		optionJacketStandardInfo.setOjGrade(OptionCodeKeys.JK_0000301);
		optionJacketStandardInfo.setOjGackSpec(OptionCodeKeys.JK_0000401);
		optionJacketStandardInfo.setOjFort(OptionCodeKeys.JK_0000501);
		optionJacketStandardInfo.setOjBackCollar(OptionCodeKeys.JK_0000701);
		optionJacketStandardInfo.setOjChainHange(OptionCodeKeys.JK_0000801);
		optionJacketStandardInfo.setOjLapelWidth(OptionCodeKeys.JK_0000901);
		optionJacketStandardInfo.setOjFlowerHole(OptionCodeKeys.JK_0001001);
		optionJacketStandardInfo.setOjBreastPkt(OptionCodeKeys.JK_0001101);
		optionJacketStandardInfo.setOjWaistPkt(OptionCodeKeys.JK_0001201);
		optionJacketStandardInfo.setOjChangePkt(OptionCodeKeys.JK_0001301);
		optionJacketStandardInfo.setOjSlantedPkt(OptionCodeKeys.JK_0001401);
		optionJacketStandardInfo.setOjCoinPkt(OptionCodeKeys.JK_0001501);
		optionJacketStandardInfo.setOjSleeveSpec(OptionCodeKeys.JK_0001601);
		optionJacketStandardInfo.setOjManica(OptionCodeKeys.JK_0001701);
		optionJacketStandardInfo.setOjSleeveBtnType(OptionCodeKeys.JK_0001801);
		optionJacketStandardInfo.setOjSleeveBtnCnt(OptionCodeKeys.JK_SLEEVE_BTN_CNT4);
		optionJacketStandardInfo.setOjCuffSpec(OptionCodeKeys.JK_0001901);
		optionJacketStandardInfo.setOjInsidePktChange(OptionCodeKeys.JK_0002001);
		optionJacketStandardInfo.setOjInsidePktPlace(null);
		optionJacketStandardInfo.setOjBreastInnerPkt(OptionCodeKeys.JK_0002201);
		optionJacketStandardInfo.setOjStitch(OptionCodeKeys.JK_0002301);
		optionJacketStandardInfo.setOjStitchModify(OptionCodeKeys.JK_0002401);
		optionJacketStandardInfo.setOjStitchModifyPlace(null);
		optionJacketStandardInfo.setOjDStitchModify(OptionCodeKeys.JK_0002601);
		optionJacketStandardInfo.setOjDStitchModifyPlace(null);
		optionJacketStandardInfo.setOjAmfColor(OptionCodeKeys.JK_0002801);
		optionJacketStandardInfo.setOjAmfColorPlace(null);
		optionJacketStandardInfo.setOjAmfAllColor(null);
		optionJacketStandardInfo.setOjBhColor(OptionCodeKeys.JK_0003101);
		optionJacketStandardInfo.setOjBhColorPlace(null);
		optionJacketStandardInfo.setOjBhAllColor(null);
		optionJacketStandardInfo.setOjByColor(OptionCodeKeys.JK_0003401);
		optionJacketStandardInfo.setOjByColorPlace(null);
		optionJacketStandardInfo.setOjByAllColor(null);
		optionJacketStandardInfo.setOjVentSpec(OptionCodeKeys.JK_0003701);
		optionJacketStandardInfo.setOjBodyBackMate(OptionCodeKeys.JK_1000100);
		optionJacketStandardInfo.setOjBodyBackMateStkNo(null);
		optionJacketStandardInfo.setOjCuffBackMate(OptionCodeKeys.JK_2000100);
		optionJacketStandardInfo.setOjCuffBackMateStkNo(null);
		optionJacketStandardInfo.setOjBtnMate(OptionCodeKeys.JK_3000800);
		optionJacketStandardInfo.setOjBtnMateStkNo(null);
		optionJacketStandardInfo.setOjShapeMemory(OptionCodeKeys.JK_0004401);

		// タキシード
		CoOptionJacketTuxedoInfo optionJacketTuxedoInfo = orderCoForm.getCoOptionJacketTuxedoInfo();
		optionJacketTuxedoInfo.setTjJacketModel("");
		optionJacketTuxedoInfo.setTjFrontBtnCnt(OptionCodeKeys.JK_0000101);
		optionJacketTuxedoInfo.setTjLapelDesign(OptionCodeKeys.JK_0000201);
		optionJacketTuxedoInfo.setTjGrade(OptionCodeKeys.JK_0000301);
		optionJacketTuxedoInfo.setTjBackSpec(OptionCodeKeys.JK_0000401);
		optionJacketTuxedoInfo.setTjFort(OptionCodeKeys.JK_0000502);
		optionJacketTuxedoInfo.setTjGlossFablic(OptionCodeKeys.JK_0000601);
		optionJacketTuxedoInfo.setTjBackCollar(OptionCodeKeys.JK_0000701);
		optionJacketTuxedoInfo.setTjChainHange(OptionCodeKeys.JK_0000801);
		optionJacketTuxedoInfo.setTjLapelWidth(OptionCodeKeys.JK_0000901);
		optionJacketTuxedoInfo.setTjFlowerHole(OptionCodeKeys.JK_0001001);
		optionJacketTuxedoInfo.setTjBreastPkt(OptionCodeKeys.JK_0001101);
		optionJacketTuxedoInfo.setTjWaistPkt(OptionCodeKeys.JK_0001205);
		optionJacketTuxedoInfo.setTjChangePkt(OptionCodeKeys.JK_0001301);
		optionJacketTuxedoInfo.setTjSlantedPkt(OptionCodeKeys.JK_0001401);
		optionJacketTuxedoInfo.setTjCoinPkt(OptionCodeKeys.JK_0001501);
		optionJacketTuxedoInfo.setTjSleeveSpec(OptionCodeKeys.JK_0001601);
		optionJacketTuxedoInfo.setTjManica(OptionCodeKeys.JK_0001701);
		optionJacketTuxedoInfo.setTjSleeveBtnType(OptionCodeKeys.JK_0001801);
		optionJacketTuxedoInfo.setTjSleeveBtnCnt(OptionCodeKeys.JK_SLEEVE_BTN_CNT4);
		optionJacketTuxedoInfo.setTjCuffSpec(OptionCodeKeys.JK_0001901);
		optionJacketTuxedoInfo.setTjInsidePktChange(OptionCodeKeys.JK_0002001);
		optionJacketTuxedoInfo.setTjBreastInnerPkt(OptionCodeKeys.JK_0002201);
		optionJacketTuxedoInfo.setTjStitch(OptionCodeKeys.JK_0002302);
		optionJacketTuxedoInfo.setTjBhColor(OptionCodeKeys.JK_0003101);
		optionJacketTuxedoInfo.setTjBhColorPlace(null);
		optionJacketTuxedoInfo.setTjAllBhColor(null);
		optionJacketTuxedoInfo.setTjByColor(OptionCodeKeys.JK_0003401);
		optionJacketTuxedoInfo.setTjByColorPlace(null);
		optionJacketTuxedoInfo.setTjAllByColor(null);
		optionJacketTuxedoInfo.setTjVentSpec(OptionCodeKeys.JK_0003701);
		optionJacketTuxedoInfo.setTjBodyBackMate(OptionCodeKeys.JK_1000100);
		optionJacketTuxedoInfo.setTjBodyBackMateStkNo(null);
		optionJacketTuxedoInfo.setTjCuffBackMate(OptionCodeKeys.JK_2000100);
		optionJacketTuxedoInfo.setTjCuffBackMateStkNo(null);
		optionJacketTuxedoInfo.setTjBtnMate(OptionCodeKeys.JK_3000800);
		optionJacketTuxedoInfo.setTjBtnMateStkNo(null);
		optionJacketTuxedoInfo.setTjShapeMemory(OptionCodeKeys.JK_0004401);

		// ウォッシャブル
		CoOptionJacketWashableInfo optionJacketWashableInfo = orderCoForm.getCoOptionJacketWashableInfo();
		optionJacketWashableInfo.setWjJacketModel("");
		optionJacketWashableInfo.setWjFrontBtnCnt(OptionCodeKeys.JK_0000101);
		optionJacketWashableInfo.setWjLapelDesign(OptionCodeKeys.JK_0000201);
		optionJacketWashableInfo.setWjGrade(OptionCodeKeys.JK_0000304);
		optionJacketWashableInfo.setWjBackSpec(OptionCodeKeys.JK_0000405);
		optionJacketWashableInfo.setWjFort(OptionCodeKeys.JK_0000503);
		optionJacketWashableInfo.setWjBackCollar(OptionCodeKeys.JK_0000701);
		optionJacketWashableInfo.setWjChainHange(OptionCodeKeys.JK_0000801);
		optionJacketWashableInfo.setWjLapelWidth(OptionCodeKeys.JK_0000901);
		optionJacketWashableInfo.setWjFlowerHole(OptionCodeKeys.JK_0001001);
		optionJacketWashableInfo.setWjBreastPkt(OptionCodeKeys.JK_0001101);
		optionJacketWashableInfo.setWjWaistPkt(OptionCodeKeys.JK_0001201);
		optionJacketWashableInfo.setWjChangePkt(OptionCodeKeys.JK_0001301);
		optionJacketWashableInfo.setWjSlantedPkt(OptionCodeKeys.JK_0001401);
		optionJacketWashableInfo.setWjCoinPkt(OptionCodeKeys.JK_0001501);
		optionJacketWashableInfo.setWjSleeveSpec(OptionCodeKeys.JK_0001601);
		optionJacketWashableInfo.setWjManica(OptionCodeKeys.JK_0001701);
		optionJacketWashableInfo.setWjSleeveBtnType(OptionCodeKeys.JK_0001801);
		optionJacketWashableInfo.setWjSleeveBtnCnt(OptionCodeKeys.JK_SLEEVE_BTN_CNT4);
		optionJacketWashableInfo.setWjCuffSpec(OptionCodeKeys.JK_0001901);
		optionJacketWashableInfo.setWjInsidePktChange(OptionCodeKeys.JK_0002001);
		optionJacketWashableInfo.setWjBreastInnerPkt(OptionCodeKeys.JK_0002201);
		optionJacketWashableInfo.setWjStitch(OptionCodeKeys.JK_0002304);
		optionJacketWashableInfo.setWjStitchModify(OptionCodeKeys.JK_0002401);
		optionJacketWashableInfo.setWjStitchModifyPlace(null);
		optionJacketWashableInfo.setWjDStitchModify(OptionCodeKeys.JK_0002601);
		optionJacketWashableInfo.setWjDStitchModifyPlace(null);
		optionJacketWashableInfo.setWjAmfColor(OptionCodeKeys.JK_0002801);
		optionJacketWashableInfo.setWjAmfColorPlace(null);
		optionJacketWashableInfo.setWjAllAmfColor(null);
		optionJacketWashableInfo.setWjBhColor(OptionCodeKeys.JK_0003101);
		optionJacketWashableInfo.setWjBhColorPlace(null);
		optionJacketWashableInfo.setWjAllBhColor(null);
		optionJacketWashableInfo.setWjByColor(OptionCodeKeys.JK_0003401);
		optionJacketWashableInfo.setWjByColorPlace(null);
		optionJacketWashableInfo.setWjAllByColor(null);
		optionJacketWashableInfo.setWjVentSpec(OptionCodeKeys.JK_0003701);
		optionJacketWashableInfo.setWjBodyBackMate(OptionCodeKeys.JK_1000100);
		optionJacketWashableInfo.setWjBodyBackMateStkNo(null);
		optionJacketWashableInfo.setWjCuffBackMate(OptionCodeKeys.JK_2000100);
		optionJacketWashableInfo.setWjCuffBackMateStkNo(null);
		optionJacketWashableInfo.setWjBtnMate(OptionCodeKeys.JK_3000800);
		optionJacketWashableInfo.setWjBtnMateStkNo(null);
		optionJacketWashableInfo.setWjShapeMemory(OptionCodeKeys.JK_0004401);
	}

	public void giletDefaultValue(OrderCoForm orderCoForm) {
		// 標準
		CoOptionGiletStandardInfo optionGiletStandardInfo = orderCoForm.getCoOptionGiletStandardInfo();
		String ogGiletModel = optionGiletStandardInfo.getOgGiletModel();

		if ("TR02".equals(ogGiletModel) || "ET15-D".equals(ogGiletModel)) {
			optionGiletStandardInfo.setOgBreastPkt(OptionCodeKeys.GL_0000101);
		} else if ("NR04".equals(ogGiletModel) || "BS01".equals(ogGiletModel) || "BS03".equals(ogGiletModel)) {
			optionGiletStandardInfo.setOgBreastPkt(OptionCodeKeys.GL_0000102);
		} else if ("CH14".equals(ogGiletModel) || "BS01-D".equals(ogGiletModel)) {
			optionGiletStandardInfo.setOgBreastPkt(OptionCodeKeys.GL_0000103);
		}

		if (!("".equals(ogGiletModel))) {
			optionGiletStandardInfo.setOgWaistPkt(OptionCodeKeys.GL_0000201);
		}

		if ("TR02".equals(ogGiletModel) || "NR04".equals(ogGiletModel) || "CH14".equals(ogGiletModel)
				|| "ET15-D".equals(ogGiletModel) || "ET15-D".equals(ogGiletModel)) {
			optionGiletStandardInfo.setOgWaistPktSpec(OptionCodeKeys.GL_0000301);
		} else if ("BS01".equals(ogGiletModel) || "BS03".equals(ogGiletModel)) {
			optionGiletStandardInfo.setOgWaistPktSpec(OptionCodeKeys.GL_0000303);
		}
		optionGiletStandardInfo.setOgStitch(OptionCodeKeys.GL_0000504);
		optionGiletStandardInfo.setOgStitchModify(OptionCodeKeys.GL_0000601);
		optionGiletStandardInfo.setOgDStitchModify(OptionCodeKeys.GL_0002601);
		optionGiletStandardInfo.setOgAmfColor(OptionCodeKeys.GL_0000801);
		optionGiletStandardInfo.setOgBhColor(OptionCodeKeys.GL_0001101);
		optionGiletStandardInfo.setOgByColor(OptionCodeKeys.GL_0001401);
		optionGiletStandardInfo.setOgBackLiningMate(OptionCodeKeys.GL_1000100);
		optionGiletStandardInfo.setOgBackLiningMateStkNo(null);
		optionGiletStandardInfo.setOgInsideLiningMate(OptionCodeKeys.GL_1000100);
		optionGiletStandardInfo.setOgInsideLiningMateStkNo(null);
		optionGiletStandardInfo.setOgFrontBtnMate(OptionCodeKeys.GL_3000800);
		optionGiletStandardInfo.setOgFrontBtnMateStkNo(null);
		if ("CH14".equals(ogGiletModel) || "BS01".equals(ogGiletModel) || "BS03".equals(ogGiletModel)
				|| "BS01-D".equals(ogGiletModel)) {
			optionGiletStandardInfo.setOgBackBelt(OptionCodeKeys.GL_0002301);
		} else if ("TR02".equals(ogGiletModel) || "NR04".equals(ogGiletModel) || "ET15-D".equals(ogGiletModel)) {
			optionGiletStandardInfo.setOgBackBelt(OptionCodeKeys.GL_0002302);
		}
		optionGiletStandardInfo.setOgWatchChain(OptionCodeKeys.GL_0002401);

		// タキシード
		CoOptionGiletTuxedoInfo optionGiletTuxedoInfo = orderCoForm.getCoOptionGiletTuxedoInfo();
		String tgGiletModel = optionGiletTuxedoInfo.getTgGiletModel();

		if ("TR02".equals(tgGiletModel) || "ET15-D".equals(tgGiletModel)) {
			optionGiletTuxedoInfo.setTgBreastPkt(OptionCodeKeys.GL_0000101);
		} else if ("NR04".equals(tgGiletModel) || "BS01".equals(tgGiletModel) || "BS03".equals(tgGiletModel)) {
			optionGiletTuxedoInfo.setTgBreastPkt(OptionCodeKeys.GL_0000102);
		} else if ("CH14".equals(tgGiletModel) || "BS01-D".equals(tgGiletModel)) {
			optionGiletTuxedoInfo.setTgBreastPkt(OptionCodeKeys.GL_0000103);
		}

		if (!("".equals(tgGiletModel))) {
			optionGiletTuxedoInfo.setTgWaistPkt(OptionCodeKeys.GL_0000201);
		}

		if ("TR02".equals(tgGiletModel) || "NR04".equals(tgGiletModel) || "CH14".equals(tgGiletModel)
				|| "ET15-D".equals(tgGiletModel) || "ET15-D".equals(tgGiletModel)) {
			optionGiletTuxedoInfo.setTgWaistPktSpec(OptionCodeKeys.GL_0000301);
		} else if ("BS01".equals(tgGiletModel) || "BS03".equals(tgGiletModel)) {
			optionGiletTuxedoInfo.setTgWaistPktSpec(OptionCodeKeys.GL_0000303);
		}
		optionGiletTuxedoInfo.setTgWaistPktMate(OptionCodeKeys.GL_0000401);
		optionGiletTuxedoInfo.setTgStitch(OptionCodeKeys.GL_0000503);
		optionGiletTuxedoInfo.setTgBhColor(OptionCodeKeys.GL_0001101);
		optionGiletTuxedoInfo.setTgByColor(OptionCodeKeys.GL_0001401);
		optionGiletTuxedoInfo.setTgBackLiningMate(OptionCodeKeys.GL_1000100);
		optionGiletTuxedoInfo.setTgBackLiningMateStkNo(null);
		optionGiletTuxedoInfo.setTgInsideLiningMate(OptionCodeKeys.GL_1000100);
		optionGiletTuxedoInfo.setTgInsideLiningMateStkNo(null);
		optionGiletTuxedoInfo.setTgFrontBtnMate(OptionCodeKeys.GL_3000800);
		optionGiletTuxedoInfo.setTgFrontBtnMateStkNo(null);
		if ("CH14".equals(tgGiletModel) || "BS01".equals(tgGiletModel) || "BS03".equals(tgGiletModel)
				|| "BS01-D".equals(tgGiletModel)) {
			optionGiletTuxedoInfo.setTgBackBelt(OptionCodeKeys.GL_0002301);
		} else if ("TR02".equals(tgGiletModel) || "NR04".equals(tgGiletModel) || "ET15-D".equals(tgGiletModel)) {
			optionGiletTuxedoInfo.setTgBackBelt(OptionCodeKeys.GL_0002302);
		}
		optionGiletTuxedoInfo.setTgWatchChain(OptionCodeKeys.GL_0002401);

		// ウォッシャブル
		CoOptionGiletWashableInfo optionGiletWashableInfo = orderCoForm.getCoOptionGiletWashableInfo();
		String wgGiletModel = optionGiletWashableInfo.getWgGiletModel();

		if ("TR02".equals(wgGiletModel) || "ET15-D".equals(wgGiletModel)) {
			optionGiletWashableInfo.setWgBreastPkt(OptionCodeKeys.GL_0000101);
		} else if ("NR04".equals(wgGiletModel) || "BS01".equals(wgGiletModel) || "BS03".equals(wgGiletModel)) {
			optionGiletWashableInfo.setWgBreastPkt(OptionCodeKeys.GL_0000102);
		} else if ("CH14".equals(wgGiletModel) || "BS01-D".equals(wgGiletModel)) {
			optionGiletWashableInfo.setWgBreastPkt(OptionCodeKeys.GL_0000103);
		}

		if (!("".equals(wgGiletModel))) {
			optionGiletWashableInfo.setWgWaistPkt(OptionCodeKeys.GL_0000201);
		}

		if ("TR02".equals(wgGiletModel) || "NR04".equals(wgGiletModel) || "CH14".equals(wgGiletModel)
				|| "ET15-D".equals(wgGiletModel) || "ET15-D".equals(wgGiletModel)) {
			optionGiletWashableInfo.setWgWaistPktSpec(OptionCodeKeys.GL_0000301);
		} else if ("BS01".equals(wgGiletModel) || "BS03".equals(wgGiletModel)) {
			optionGiletWashableInfo.setWgWaistPktSpec(OptionCodeKeys.GL_0000303);
		}
		optionGiletWashableInfo.setWgStitch(OptionCodeKeys.GL_0000504);
		optionGiletWashableInfo.setWgStitchModify(OptionCodeKeys.GL_0000601);
		optionGiletWashableInfo.setWgDStitchModify(OptionCodeKeys.GL_0002601);
		optionGiletWashableInfo.setWgAmfColor(OptionCodeKeys.GL_0000801);
		optionGiletWashableInfo.setWgBhColor(OptionCodeKeys.GL_0001101);
		optionGiletWashableInfo.setWgByColor(OptionCodeKeys.GL_0001401);
		optionGiletWashableInfo.setWgBackLiningMate(OptionCodeKeys.GL_1000100);
		optionGiletWashableInfo.setWgBackLiningMateStkNo(null);
		optionGiletWashableInfo.setWgInsideLiningMate(OptionCodeKeys.GL_1000100);
		optionGiletWashableInfo.setWgInsideLiningMateStkNo(null);
		optionGiletWashableInfo.setWgFrontBtnMate(OptionCodeKeys.GL_3000800);
		optionGiletWashableInfo.setWgFrontBtnMateStkNo(null);
		if ("CH14".equals(wgGiletModel) || "BS01".equals(wgGiletModel) || "BS03".equals(wgGiletModel)
				|| "BS01-D".equals(wgGiletModel)) {
			optionGiletWashableInfo.setWgBackBelt(OptionCodeKeys.GL_0002301);
		} else if ("TR02".equals(wgGiletModel) || "NR04".equals(wgGiletModel) || "ET15-D".equals(wgGiletModel)) {
			optionGiletWashableInfo.setWgBackBelt(OptionCodeKeys.GL_0002302);
		}
		optionGiletWashableInfo.setWgWatchChain(OptionCodeKeys.GL_0002401);
	}

	public void coatDefaultValue(OrderCoForm orderCoForm) {
		CoOptionCoatStandardInfo optionCoatStandardInfo = orderCoForm.getCoOptionCoatStandardInfo();
		optionCoatStandardInfo.setCoatModel("");
		optionCoatStandardInfo.setOcLapelDesign(OptionCodeKeys.CT_0000101);
		optionCoatStandardInfo.setOcWaistPkt(OptionCodeKeys.CT_0000201);
		optionCoatStandardInfo.setOcChangePkt(OptionCodeKeys.CT_0000301);
		optionCoatStandardInfo.setOcSlantedPkt(OptionCodeKeys.CT_0000401);
		optionCoatStandardInfo.setOcVentSpec(OptionCodeKeys.CT_0000501);
		optionCoatStandardInfo.setOcFrontBtnCnt(OptionCodeKeys.CT_0000601);
		optionCoatStandardInfo.setOcCuffSpec(OptionCodeKeys.CT_0000701);
		optionCoatStandardInfo.setOcSleeveBtnType(OptionCodeKeys.CT_0000801);
		optionCoatStandardInfo.setOcBackBelt(OptionCodeKeys.CT_0000901);
		optionCoatStandardInfo.setOcChainHange(OptionCodeKeys.CT_0001001);
		optionCoatStandardInfo.setOcBodyBackMate(OptionCodeKeys.CT_4000100);
		optionCoatStandardInfo.setOcBodyBackMateStkNo(null);
		optionCoatStandardInfo.setOcCuffBackMate(OptionCodeKeys.CT_5000100);
		optionCoatStandardInfo.setOcCuffBackMateStkNo(null);
		optionCoatStandardInfo.setOcFrontBtnMate(OptionCodeKeys.CT_6000100);
		optionCoatStandardInfo.setOcFrontBtnMateStkNo(null);
		optionCoatStandardInfo.setOcSleeveSpec(OptionCodeKeys.CT_0001401);
	}

	public void setCustomerMessageAndProductOrderLink(Order order, OrderCoForm orderCoForm) {
		CoCustomerMessageInfo customerMessageInfo = new CoCustomerMessageInfo();
		customerMessageInfo.setOrderId(order.getOrderId());
		customerMessageInfo.setCustCd(order.getCustCd());

//		customerMessageInfo.setCustIsDeliverShortning(order.getCustIsDeliverShortning());
//
//		customerMessageInfo.setCustIsEarlyDiscount(order.getCustIsEarlyDiscount());
		
		customerMessageInfo.setCustStaff(order.getCustStaff());

		customerMessageInfo.setCustType(order.getCustType());

		customerMessageInfo.setCustShippingDestination(order.getCustShippingDestination());

		customerMessageInfo.setCustShippingDestnationOtherstore(order.getCustShippingDestnationOtherstore());

		customerMessageInfo.setCustRemark(order.getCustRemark());

		orderCoForm.setCoCustomerMessageInfo(customerMessageInfo);

		String productItem = order.getProductItem();
		orderCoForm.setProductItem(productItem);
		
		orderCoForm.setCustIsDeliverShortning(order.getCustIsDeliverShortning());
		
		orderCoForm.setCustIsEarlyDiscount(order.getCustIsEarlyDiscount());

		orderCoForm.setProductIs3Piece(order.getProductIs3piece());

		orderCoForm.setProductSparePantsClass(order.getProductSparePantsClass());
		
		orderCoForm.setProductServiceNm(order.getProductServiceNm());

		orderCoForm.setProductFabricNo(order.getProductFabricNo());

		orderCoForm.setProductCategory(order.getProductCategory());

		orderCoForm.setProductLcrSewing(order.getProductLcrSewingCd());

		orderCoForm.setProductBrandNm(order.getProductBrandNm());

		orderCoForm.setProductFabricNmNecessity(order.getProductFabricNmNecessity());
		
		orderCoForm.setProductRemainingClothType(order.getProductRemainingClothType());

		String productEmbroideryNecessity = order.getProductEmbroideryNecessity();
		orderCoForm.setProductEmbroideryNecessity(productEmbroideryNecessity);

		if (productEmbroideryNecessity != null && !"".equals(productEmbroideryNecessity)) {
			orderCoForm.setProductEmbroideryNm(order.getProductEmbroideryNm());
			orderCoForm.setProductEmbroideryFont(order.getProductEmbroideryFontCd());
			if ("05".equals(productItem)) {
				orderCoForm.setProductEmbroideryNmPos(order.getProductEmbroideryNmPosCd());
				orderCoForm.setProductEmbroideryGazette(order.getProductEmbroideryGazetteCd());
				orderCoForm.setStProductEmbroideryThreadColor(order.getProductEmbroideryThreadColorCd());
				orderCoForm.setJkProductEmbroideryThreadColor("110");
			} else {
				orderCoForm.setJkProductEmbroideryThreadColor("42");
				orderCoForm.setJkProductEmbroideryThreadColor(order.getProductEmbroideryThreadColorCd());
				orderCoForm.setProductRemainingClothType(order.getProductRemainingClothType());
				orderCoForm.setProductEmbroideryNmPos("0002201");
				orderCoForm.setProductEmbroideryGazette("0002301");
			}
		}
	}
	
	public void setCustomerMessageAndProductOrderDivert(Order order, OrderCoForm orderCoForm) {
		CoCustomerMessageInfo customerMessageInfo = new CoCustomerMessageInfo();
		customerMessageInfo.setCustCd(order.getCustCd());

//		customerMessageInfo.setCustIsDeliverShortning(order.getCustIsDeliverShortning());
//
//		customerMessageInfo.setCustIsEarlyDiscount(order.getCustIsEarlyDiscount());
		
		orderCoForm.setCustIsDeliverShortning(order.getCustIsDeliverShortning());
		
		orderCoForm.setCustIsEarlyDiscount(order.getCustIsEarlyDiscount());

		customerMessageInfo.setCustStaff(order.getCustStaff());

		customerMessageInfo.setCustType(order.getCustType());

		customerMessageInfo.setCustShippingDestination(order.getCustShippingDestination());

		customerMessageInfo.setCustShippingDestnationOtherstore(order.getCustShippingDestnationOtherstore());

		customerMessageInfo.setCustRemark(order.getCustRemark());

		orderCoForm.setCoCustomerMessageInfo(customerMessageInfo);

		String productItem = order.getProductItem();
		orderCoForm.setProductItem(productItem);

		orderCoForm.setProductIs3Piece(order.getProductIs3piece());

		orderCoForm.setProductSparePantsClass(order.getProductSparePantsClass());

		orderCoForm.setProductCategory(order.getProductCategory());

		orderCoForm.setProductLcrSewing(order.getProductLcrSewingCd());

		orderCoForm.setProductBrandNm(order.getProductBrandNm());

		orderCoForm.setProductFabricNmNecessity(order.getProductFabricNmNecessity());
		
		orderCoForm.setProductRemainingClothType(order.getProductRemainingClothType());

		String productEmbroideryNecessity = order.getProductEmbroideryNecessity();
		orderCoForm.setProductEmbroideryNecessity(productEmbroideryNecessity);

		if (productEmbroideryNecessity != null && !"".equals(productEmbroideryNecessity)) {
			orderCoForm.setProductEmbroideryNm(order.getProductEmbroideryNm());
			orderCoForm.setProductEmbroideryFont(order.getProductEmbroideryFontCd());
			if ("05".equals(productItem)) {
				orderCoForm.setProductEmbroideryNmPos(order.getProductEmbroideryNmPosCd());
				orderCoForm.setProductEmbroideryGazette(order.getProductEmbroideryGazetteCd());
				orderCoForm.setStProductEmbroideryThreadColor(order.getProductEmbroideryThreadColorCd());
				orderCoForm.setJkProductEmbroideryThreadColor("110");
			} else {
				orderCoForm.setProductRemainingClothType(order.getProductRemainingClothType());
				orderCoForm.setJkProductEmbroideryThreadColor("42");
				orderCoForm.setJkProductEmbroideryThreadColor(order.getProductEmbroideryThreadColorCd());
				orderCoForm.setProductEmbroideryNmPos("0002201");
				orderCoForm.setProductEmbroideryGazette("0002301");
			}
		}
	}

	public void getOptionTuxedoData(List<OptionBranch> tuxedoOptionList, OrderCoForm orderCoForm) {
		try {

			// ITEMの値
			CoItemClassTuxedoEnum[] itemClassTuxedoEnum = CoItemClassTuxedoEnum.values();
			// クラス名
			String classPath = "";
			// ITEMコードの種類
			String subItemCodeType = "";
			for (CoItemClassTuxedoEnum one : itemClassTuxedoEnum) {

				subItemCodeType = one.getKey();
				classPath = CoItemClassTuxedoEnum.getValue(one.getKey());
				if (!classPath.isEmpty()) {
					// タキシード可のデーター
					optionDataTuxedo(classPath, subItemCodeType, orderCoForm, tuxedoOptionList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
		}
	}

	private void optionDataTuxedo(String classPath, String itemCodeType, OrderCoForm orderCoForm,
			List<OptionBranch> tuxedoOptionList) {
		try {

			Class<?> cls = Class.forName(classPath);

			CoOptionPantsTuxedoInfo optionPantsTuxedoInfo = new CoOptionPantsTuxedoInfo();
			CoOptionJacketTuxedoInfo optionJacketTuxedoInfo = new CoOptionJacketTuxedoInfo();
			CoOptionGiletTuxedoInfo optionGiletTuxedoInfo = new CoOptionGiletTuxedoInfo();
			CoOptionPants2TuxedoInfo optionPants2TuxedoInfo = new CoOptionPants2TuxedoInfo();

			List<OptionBranch> pantsTuxedoList = new ArrayList<OptionBranch>();
			List<OptionBranch> jkTuxedoList = new ArrayList<OptionBranch>();
			List<OptionBranch> giletTuxedoList = new ArrayList<OptionBranch>();
			List<OptionBranch> pants2TuxedoList = new ArrayList<OptionBranch>();

			for (OptionBranch optionBranch : tuxedoOptionList) {
				// JACKET
				if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_JACKET.getKey())) {
					jkTuxedoList.add(optionBranch);
				}
				// PANTS
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_PANTS.getKey())) {
					pantsTuxedoList.add(optionBranch);
				}
				// GILET
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_GILET.getKey())) {
					giletTuxedoList.add(optionBranch);
				}
				// 2PANTS
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_PANTS2.getKey())) {
					pants2TuxedoList.add(optionBranch);
				}
			}

			// JACKET
			if (itemCodeType.equals(ItemTypeEnum.ITEM_CODE_JACKET.getKey())) {
				JacketOptionTuxedoCodeEnum[] jacketOptionTuxedoEnum = JacketOptionTuxedoCodeEnum.values();
				for (JacketOptionTuxedoCodeEnum one : jacketOptionTuxedoEnum) {

					String[] codeVules = one.toString().split(",");
					// オプション選択肢コード ⇒ オプション選択肢名
					optionBranchNameData(codeVules, jkTuxedoList, cls, optionJacketTuxedoInfo);
				}
				JacketOptionTuxedoColorEnum[] jacketOptionTuxdoColors = JacketOptionTuxedoColorEnum.values();
				for (JacketOptionTuxedoColorEnum one : jacketOptionTuxdoColors) {
					String[] codeVules = one.toString().split(",");
					// オプション選択肢色コード ⇒ オプション選択肢色名
					optionBranchColorData(codeVules, jkTuxedoList, cls, optionJacketTuxedoInfo);
				}
				orderCoForm.setCoOptionJacketTuxedoInfo(optionJacketTuxedoInfo);
			}
			// PANTS
			else if (itemCodeType.equals(ItemTypeEnum.ITEM_CODE_PANTS.getKey())) {
				PantsOptionTuxedoCodeEnum[] pantsOptionTuxedoEnum = PantsOptionTuxedoCodeEnum.values();
				for (PantsOptionTuxedoCodeEnum one : pantsOptionTuxedoEnum) {

					String[] codeVules = one.toString().split(",");
					// オプション選択肢コード ⇒ オプション選択肢名
					optionBranchNameData(codeVules, pantsTuxedoList, cls, optionPantsTuxedoInfo);
				}
				PantsOptionTuxedoColorEnum[] pantsOptionTuxdoColors = PantsOptionTuxedoColorEnum.values();
				for (PantsOptionTuxedoColorEnum one : pantsOptionTuxdoColors) {
					String[] codeVules = one.toString().split(",");
					// オプション選択肢色コード ⇒ オプション選択肢色名
					optionBranchColorData(codeVules, pantsTuxedoList, cls, optionPantsTuxedoInfo);
				}
				orderCoForm.setCoOptionPantsTuxedoInfo(optionPantsTuxedoInfo);
			}
			// GILET
			else if (itemCodeType.equals(ItemTypeEnum.ITEM_CODE_GILET.getKey())) {
				GiletOptionTuxedoCodeEnum[] giletOptionTuxedoCodeEnum = GiletOptionTuxedoCodeEnum.values();
				for (GiletOptionTuxedoCodeEnum one : giletOptionTuxedoCodeEnum) {
					String[] codeVules = one.toString().split(",");
					// オプション選択肢コード ⇒ オプション選択肢名
					optionBranchNameData(codeVules, giletTuxedoList, cls, optionGiletTuxedoInfo);
				}
				GiletOptionTuxedoColorEnum[] giletOptionTuxedoColorEnum = GiletOptionTuxedoColorEnum.values();
				for (GiletOptionTuxedoColorEnum one : giletOptionTuxedoColorEnum) {
					String[] codeVules = one.toString().split(",");
					// オプション選択肢色コード ⇒ オプション選択肢色名
					optionBranchColorData(codeVules, giletTuxedoList, cls, optionGiletTuxedoInfo);
				}
				orderCoForm.setCoOptionGiletTuxedoInfo(optionGiletTuxedoInfo);
			}
			// 2PANTS
			else if (itemCodeType.equals(ItemTypeEnum.ITEM_CODE_PANTS2.getKey())) {
				Pants2OptionTuxedoCodeEnum[] pants2OptionTuxedoCodeEnum = Pants2OptionTuxedoCodeEnum.values();
				for (Pants2OptionTuxedoCodeEnum one : pants2OptionTuxedoCodeEnum) {
					String[] codeVules = one.toString().split(",");
					// オプション選択肢コード ⇒ オプション選択肢名
					optionBranchNameData(codeVules, pants2TuxedoList, cls, optionPants2TuxedoInfo);
				}
				orderCoForm.setCoOptionPants2TuxedoInfo(optionPants2TuxedoInfo);
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
		}

	}

	public void getOptionWashableData(List<OptionBranch> washableOptionList, OrderCoForm orderCoForm) {
		try {

			// ITEMの値
			CoItemClassWashableEnum[] itemClassWashableEnum = CoItemClassWashableEnum.values();
			// クラス名
			String classPath = "";
			// ITEMコードの種類
			String itemCodeType = "";
			for (CoItemClassWashableEnum one : itemClassWashableEnum) {

				itemCodeType = one.getKey();
				classPath = CoItemClassWashableEnum.getValue(one.getKey());
				if (!classPath.isEmpty()) {
					// ウォッシャブル可のデーター
					optionDataWashable(classPath, itemCodeType, orderCoForm, washableOptionList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
		}
	}

	private void optionDataWashable(String classPath, String itemCodeType, OrderCoForm orderCoForm,
			List<OptionBranch> washableOptionList) {
		try {

			Class<?> cls = Class.forName(classPath);

			CoOptionPantsWashableInfo optionPantsWashableInfo = new CoOptionPantsWashableInfo();
			CoOptionJacketWashableInfo optionJacketWashableInfo = new CoOptionJacketWashableInfo();
			CoOptionGiletWashableInfo optionGiletWashableInfo = new CoOptionGiletWashableInfo();
			CoOptionPants2WashableInfo optionPants2WashableInfo = new CoOptionPants2WashableInfo();

			List<OptionBranch> jkWashableList = new ArrayList<OptionBranch>();
			List<OptionBranch> ptWashableList = new ArrayList<OptionBranch>();
			List<OptionBranch> glWashableList = new ArrayList<OptionBranch>();
			List<OptionBranch> pt2WashableList = new ArrayList<OptionBranch>();

			for (OptionBranch optionBranch : washableOptionList) {
				// JACKET
				if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_JACKET.getKey())) {
					jkWashableList.add(optionBranch);
				}
				// PANTS
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_PANTS.getKey())) {
					ptWashableList.add(optionBranch);
				}
				// GILET
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_GILET.getKey())) {
					glWashableList.add(optionBranch);
				}
				// 2PANTS
				else if (optionBranch.getSubItemCode().equals(ItemTypeEnum.ITEM_CODE_PANTS2.getKey())) {
					pt2WashableList.add(optionBranch);
				}
			}

			// JACKET
			if (itemCodeType.equals(ItemTypeEnum.ITEM_CODE_JACKET.getKey())) {
				JacketOptionWashableCodeEnum[] jkOptionCodes = JacketOptionWashableCodeEnum.values();
				for (JacketOptionWashableCodeEnum one : jkOptionCodes) {

					String[] codeVules = one.toString().split(",");
					// オプション選択肢コード ⇒ オプション選択肢名
					optionBranchNameData(codeVules, jkWashableList, cls, optionJacketWashableInfo);
				}
				JacketOptionWashableColorEnum[] jkOptionWashabiColors = JacketOptionWashableColorEnum.values();
				for (JacketOptionWashableColorEnum one : jkOptionWashabiColors) {

					String[] codeVules = one.toString().split(",");
					// オプション選択肢色コード ⇒ オプション選択肢色名
					optionBranchColorData(codeVules, jkWashableList, cls, optionJacketWashableInfo);
				}
				orderCoForm.setCoOptionJacketWashableInfo(optionJacketWashableInfo);
			}
			// PANTS
			else if (itemCodeType.equals(ItemTypeEnum.ITEM_CODE_PANTS.getKey())) {
				PantsOptionWashableCodeEnum[] pantsOptionCodes = PantsOptionWashableCodeEnum.values();
				for (PantsOptionWashableCodeEnum one : pantsOptionCodes) {

					String[] codeVules = one.toString().split(",");
					// オプション選択肢コード ⇒ オプション選択肢名
					optionBranchNameData(codeVules, ptWashableList, cls, optionPantsWashableInfo);
				}
				PantsOptionWashableColorEnum[] pantsOptionWashabiColors = PantsOptionWashableColorEnum.values();
				for (PantsOptionWashableColorEnum one : pantsOptionWashabiColors) {

					String[] codeVules = one.toString().split(",");
					// オプション選択肢色コード ⇒ オプション選択肢色名
					optionBranchColorData(codeVules, ptWashableList, cls, optionPantsWashableInfo);
				}
				orderCoForm.setCoOptionPantsWashableInfo(optionPantsWashableInfo);
			}
			// GILET
			else if (itemCodeType.equals(ItemTypeEnum.ITEM_CODE_GILET.getKey())) {
				GiletOptionWashableCodeEnum[] giletOptionWashabiCodeEnum = GiletOptionWashableCodeEnum.values();
				for (GiletOptionWashableCodeEnum one : giletOptionWashabiCodeEnum) {

					String[] codeVules = one.toString().split(",");
					// オプション選択肢コード ⇒ オプション選択肢名
					optionBranchNameData(codeVules, glWashableList, cls, optionGiletWashableInfo);
				}
				GiletOptionWashableColorEnum[] giletOptionWashabiColorEnum = GiletOptionWashableColorEnum.values();
				for (GiletOptionWashableColorEnum one : giletOptionWashabiColorEnum) {

					String[] codeVules = one.toString().split(",");
					// オプション選択肢色コード ⇒ オプション選択肢色名
					optionBranchColorData(codeVules, glWashableList, cls, optionGiletWashableInfo);
				}
				orderCoForm.setCoOptionGiletWashableInfo(optionGiletWashableInfo);
			}
			// 2PANTS
			else if (itemCodeType.equals(ItemTypeEnum.ITEM_CODE_PANTS2.getKey())) {
				Pants2OptionWashableCodeEnum[] pants2OptionWashableCodeEnum = Pants2OptionWashableCodeEnum.values();
				for (Pants2OptionWashableCodeEnum one : pants2OptionWashableCodeEnum) {
					String[] codeVules = one.toString().split(",");
					// オプション選択肢コード ⇒ オプション選択肢名
					optionBranchNameData(codeVules, pt2WashableList, cls, optionPants2WashableInfo);
				}
				orderCoForm.setCoOptionPants2WashableInfo(optionPants2WashableInfo);
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
		}

	}

	public LinkedHashMap<String, String> getButtons(List<OptionBranchDetail> mateList) {
		LinkedHashMap<String, String> buttonsMap = new LinkedHashMap<String, String>();
		for (OptionBranchDetail optionBranchDetail : mateList) {
			buttonsMap.put(optionBranchDetail.getOptionBranchDetailCode(),
					optionBranchDetail.getOptionBranchDetailName());
		}
		return buttonsMap;
	}

	public void getJacketModelMap(OrderCoForm orderCoForm, List<Model> modelList) {
		LinkedHashMap<String, String> modelMap = new LinkedHashMap<String, String>();
		for (Model model : modelList) {
			modelMap.put("", "モデル選択");
			modelMap.put(model.getModelCode(), model.getModelName());
		}
		orderCoForm.getCoOptionJacketStandardInfo().setOjJacketModelMap(modelMap);
		orderCoForm.getCoOptionJacketTuxedoInfo().setTjJacketModelMap(modelMap);
		orderCoForm.getCoOptionJacketWashableInfo().setWjJacketModelMap(modelMap);
	}

	public void getPantsModelMap(OrderCoForm orderCoForm, List<Model> modelList) {
		LinkedHashMap<String, String> modelMap = new LinkedHashMap<String, String>();
		for (Model model : modelList) {
			modelMap.put("", "モデル選択");
			modelMap.put(model.getModelCode(), model.getModelName());
		}
		orderCoForm.getCoOptionPantsStandardInfo().setOpPantsModelMap(modelMap);
		orderCoForm.getCoOptionPantsTuxedoInfo().setTpPantsModelMap(modelMap);
		orderCoForm.getCoOptionPantsWashableInfo().setWpPantsModelMap(modelMap);

	}

	public void getPants2ModelMap(OrderCoForm orderCoForm, List<Model> modelList) {
		LinkedHashMap<String, String> modelMap = new LinkedHashMap<String, String>();
		for (Model model : modelList) {
			modelMap.put("", "モデル選択");
			modelMap.put(model.getModelCode(), model.getModelName());
		}
		orderCoForm.getCoOptionPants2StandardInfo().setOp2PantsModelMap(modelMap);
		orderCoForm.getCoOptionPants2TuxedoInfo().setTp2PantsModelMap(modelMap);
		orderCoForm.getCoOptionPants2WashableInfo().setWp2PantsModelMap(modelMap);

	}

	public void getGiletModelMap(OrderCoForm orderCoForm, List<Model> modelList) {
		LinkedHashMap<String, String> modelMap = new LinkedHashMap<String, String>();
		for (Model model : modelList) {
			modelMap.put("", "モデル選択");
			modelMap.put(model.getModelCode(), model.getModelName());
		}
		orderCoForm.getCoOptionGiletStandardInfo().setOgGiletModelMap(modelMap);
		orderCoForm.getCoOptionGiletTuxedoInfo().setTgGiletModelMap(modelMap);
		orderCoForm.getCoOptionGiletWashableInfo().setWgGiletModelMap(modelMap);

	}

	public void getShirtModelMap(OrderCoForm orderCoForm, List<Model> modelList) {
		LinkedHashMap<String, String> modelMap = new LinkedHashMap<String, String>();
		for (Model model : modelList) {
			modelMap.put("", "モデル選択");
			modelMap.put(model.getModelCode(), model.getModelName());
		}
		orderCoForm.getCoOptionShirtStandardInfo().setOsShirtModelMap(modelMap);

	}

	public void getCoatModelMap(OrderCoForm orderCoForm, List<Model> modelList) {
		LinkedHashMap<String, String> modelMap = new LinkedHashMap<String, String>();
		for (Model model : modelList) {
			modelMap.put("", "モデル選択");
			modelMap.put(model.getModelCode(), model.getModelName());
		}
		orderCoForm.getCoOptionCoatStandardInfo().setCoatModelMap(modelMap);
	}

	public void jacketDefaultValueFromDb(OrderCoForm orderCoForm, Order orderJK) {
		String productCategory = orderCoForm.getProductCategory();
		if("9000101".equals(productCategory)) {
			// 標準
			CoOptionJacketStandardInfo optionJacketStandardInfo = orderCoForm.getCoOptionJacketStandardInfo();
			optionJacketStandardInfo.setOjJacketModel(orderJK.getJkModelCd());
			optionJacketStandardInfo.setOjFrontBtnCnt(orderJK.getJkFrtBtnCd());
			optionJacketStandardInfo.setOjLapelDesign(orderJK.getJkLapelDesignCd());
			optionJacketStandardInfo.setOjGrade(orderJK.getJkGradeCd());
			optionJacketStandardInfo.setOjGackSpec(orderJK.getJkInnerClothCd());
			optionJacketStandardInfo.setOjFort(orderJK.getJkDaibaCd());
			optionJacketStandardInfo.setOjBackCollar(orderJK.getJkCollarInnerCd());
			optionJacketStandardInfo.setOjChainHange(orderJK.getJkCollarHangCd());
			optionJacketStandardInfo.setOjLapelWidth(orderJK.getJkLapelWidthCd());
			optionJacketStandardInfo.setOjFlowerHole(orderJK.getJkFlowerHoleCd());
			optionJacketStandardInfo.setOjBreastPkt(orderJK.getJkBreastPktCd());
			optionJacketStandardInfo.setOjWaistPkt(orderJK.getJkWaistPktCd());
			optionJacketStandardInfo.setOjChangePkt(orderJK.getJkChgPktCd());
			optionJacketStandardInfo.setOjSlantedPkt(orderJK.getJkSlantedPktCd());
			optionJacketStandardInfo.setOjCoinPkt(orderJK.getJkShinobiPktCd());
			optionJacketStandardInfo.setOjSleeveSpec(orderJK.getJkSleeveTypeCd());
			optionJacketStandardInfo.setOjManica(orderJK.getJkManicaCd());
			optionJacketStandardInfo.setOjSleeveBtnType(orderJK.getJkSleeveBtnCd());
			optionJacketStandardInfo.setOjSleeveBtnCnt(String.valueOf(orderJK.getJkSleeveBtnNumber()));
			optionJacketStandardInfo.setOjCuffSpec(orderJK.getJkCuffCd());
			optionJacketStandardInfo.setOjInsidePktChange(orderJK.getJkInnerPktType());
			optionJacketStandardInfo.setOjInsidePktPlace(orderJK.getJkInnerPktCd());
			optionJacketStandardInfo.setOjBreastInnerPkt(orderJK.getJkRightInnerPktTypeCd());
			optionJacketStandardInfo.setOjStitch(orderJK.getJkStitchTypeCd());
			optionJacketStandardInfo.setOjStitchModify(orderJK.getJkStitchPlcType());
			optionJacketStandardInfo.setOjStitchModifyPlace(orderJK.getJkStitchPlcCd());
			optionJacketStandardInfo.setOjDStitchModify(orderJK.getJkDblstitchPlcType());
			optionJacketStandardInfo.setOjDStitchModifyPlace(orderJK.getJkDblstitchPlcCd());
			optionJacketStandardInfo.setOjAmfColor(orderJK.getJkAmfColorType());
			optionJacketStandardInfo.setOjAmfColorPlace(orderJK.getJkAmfColorPlcCd());
			optionJacketStandardInfo.setOjAmfAllColor(orderJK.getJkAmfColorCd());
			optionJacketStandardInfo.setOjBhColor(orderJK.getJkBtnholeColorType());
			optionJacketStandardInfo.setOjBhColorPlace(orderJK.getJkBtnholeColorPlcCd());
			optionJacketStandardInfo.setOjBhAllColor(orderJK.getJkBtnholeColorCd());
			optionJacketStandardInfo.setOjByColor(orderJK.getJkBtnthreadColorType());
			optionJacketStandardInfo.setOjByColorPlace(orderJK.getJkBtnthreadColorPlcCd());
			optionJacketStandardInfo.setOjByAllColor(orderJK.getJkBtnthreadColorCd());
			optionJacketStandardInfo.setOjVentSpec(orderJK.getJkVentCd());
			optionJacketStandardInfo.setOjBodyBackMate(orderJK.getJkInnerBodyClothType());
			optionJacketStandardInfo.setOjBodyBackMateStkNo(orderJK.getJkInnerBodyClothCd());
			optionJacketStandardInfo.setOjCuffBackMate(orderJK.getJkInnerSleeveClothType());
			optionJacketStandardInfo.setOjCuffBackMateStkNo(orderJK.getJkInnerSleeveClothCd());
			optionJacketStandardInfo.setOjBtnMate(orderJK.getJkBtnMaterialType());
			optionJacketStandardInfo.setOjBtnMateStkNo(orderJK.getJkBtnMaterialCd());
			optionJacketStandardInfo.setOjShapeMemory(orderJK.getJkShapeMemoryCd());
			
			pluralJkStandardOptionItem(optionJacketStandardInfo,orderJK);
			
		}else if("9000102".equals(productCategory)) {
			// タキシード
			CoOptionJacketTuxedoInfo optionJacketTuxedoInfo = orderCoForm.getCoOptionJacketTuxedoInfo();
			optionJacketTuxedoInfo.setTjJacketModel(orderJK.getJkModelCd());
			optionJacketTuxedoInfo.setTjFrontBtnCnt(orderJK.getJkFrtBtnCd());
			optionJacketTuxedoInfo.setTjLapelDesign(orderJK.getJkLapelDesignCd());
			optionJacketTuxedoInfo.setTjGrade(orderJK.getJkGradeCd());
			optionJacketTuxedoInfo.setTjBackSpec(orderJK.getJkInnerClothCd());
			optionJacketTuxedoInfo.setTjFort(orderJK.getJkDaibaCd());
			optionJacketTuxedoInfo.setTjGlossFablic(orderJK.getJkLookClothCd());
			optionJacketTuxedoInfo.setTjBackCollar(orderJK.getJkCollarInnerCd());
			optionJacketTuxedoInfo.setTjChainHange(orderJK.getJkCollarHangCd());
			optionJacketTuxedoInfo.setTjLapelWidth(orderJK.getJkLapelWidthCd());
			optionJacketTuxedoInfo.setTjFlowerHole(orderJK.getJkFlowerHoleCd());
			optionJacketTuxedoInfo.setTjBreastPkt(orderJK.getJkBreastPktCd());
			optionJacketTuxedoInfo.setTjWaistPkt(orderJK.getJkWaistPktCd());
			optionJacketTuxedoInfo.setTjChangePkt(orderJK.getJkChgPktCd());
			optionJacketTuxedoInfo.setTjSlantedPkt(orderJK.getJkSlantedPktCd());
			optionJacketTuxedoInfo.setTjCoinPkt(orderJK.getJkShinobiPktCd());
			optionJacketTuxedoInfo.setTjSleeveSpec(orderJK.getJkSleeveTypeCd());
			optionJacketTuxedoInfo.setTjManica(orderJK.getJkManicaCd());
			optionJacketTuxedoInfo.setTjSleeveBtnType(orderJK.getJkSleeveBtnType());
			optionJacketTuxedoInfo.setTjSleeveBtnCnt(String.valueOf(orderJK.getJkSleeveBtnNumber()));
			optionJacketTuxedoInfo.setTjCuffSpec(orderJK.getJkCuffCd());
			optionJacketTuxedoInfo.setTjInsidePktChange(orderJK.getJkInnerPktType());
			optionJacketTuxedoInfo.setTjBreastInnerPkt(orderJK.getJkRightInnerPktTypeCd());
			optionJacketTuxedoInfo.setTjStitch(orderJK.getJkStitchTypeCd());
			optionJacketTuxedoInfo.setTjBhColor(orderJK.getJkBtnholeColorType());
			optionJacketTuxedoInfo.setTjBhColorPlace(orderJK.getJkBtnholeColorPlcCd());
			optionJacketTuxedoInfo.setTjAllBhColor(orderJK.getJkBtnholeColorCd());
			optionJacketTuxedoInfo.setTjByColor(orderJK.getJkBtnthreadColorType());
			optionJacketTuxedoInfo.setTjByColorPlace(orderJK.getJkBtnthreadColorPlcCd());
			optionJacketTuxedoInfo.setTjAllByColor(orderJK.getJkBtnthreadColorCd());
			optionJacketTuxedoInfo.setTjVentSpec(orderJK.getJkVentCd());
			optionJacketTuxedoInfo.setTjBodyBackMate(orderJK.getJkInnerBodyClothType());
			optionJacketTuxedoInfo.setTjCuffBackMate(orderJK.getJkInnerSleeveClothType());
			optionJacketTuxedoInfo.setTjBtnMate(orderJK.getJkBtnMaterialType());
			optionJacketTuxedoInfo.setTjBodyBackMateStkNo(orderJK.getJkInnerBodyClothCd());
			optionJacketTuxedoInfo.setTjCuffBackMateStkNo(orderJK.getJkInnerSleeveClothCd());
			optionJacketTuxedoInfo.setTjBtnMateStkNo(orderJK.getJkBtnMaterialCd());
			optionJacketTuxedoInfo.setTjShapeMemory(orderJK.getJkShapeMemoryCd());
			
			pluralJkTuxedoOptionItem(optionJacketTuxedoInfo,orderJK);
		}else if("9000103".equals(productCategory)) {
			// ウォッシャブル
			CoOptionJacketWashableInfo optionJacketWashableInfo = orderCoForm.getCoOptionJacketWashableInfo();
			optionJacketWashableInfo.setWjJacketModel(orderJK.getJkModelCd());
			optionJacketWashableInfo.setWjFrontBtnCnt(orderJK.getJkFrtBtnCd());
			optionJacketWashableInfo.setWjLapelDesign(orderJK.getJkLapelDesignCd());
			optionJacketWashableInfo.setWjGrade(orderJK.getJkGradeCd());
			optionJacketWashableInfo.setWjBackSpec(orderJK.getJkInnerClothCd());
			optionJacketWashableInfo.setWjFort(orderJK.getJkDaibaCd());
			optionJacketWashableInfo.setWjBackCollar(orderJK.getJkCollarInnerCd());
			optionJacketWashableInfo.setWjChainHange(orderJK.getJkCollarHangCd());
			optionJacketWashableInfo.setWjLapelWidth(orderJK.getJkLapelWidthCd());
			optionJacketWashableInfo.setWjFlowerHole(orderJK.getJkFlowerHoleCd());
			optionJacketWashableInfo.setWjBreastPkt(orderJK.getJkBreastPktCd());
			optionJacketWashableInfo.setWjWaistPkt(orderJK.getJkWaistPktCd());
			optionJacketWashableInfo.setWjChangePkt(orderJK.getJkChgPktCd());
			optionJacketWashableInfo.setWjSlantedPkt(orderJK.getJkSlantedPktCd());
			optionJacketWashableInfo.setWjCoinPkt(orderJK.getJkShinobiPktCd());
			optionJacketWashableInfo.setWjSleeveSpec(orderJK.getJkSleeveTypeCd());
			optionJacketWashableInfo.setWjManica(orderJK.getJkManicaCd());
			optionJacketWashableInfo.setWjSleeveBtnType(orderJK.getJkSleeveBtnType());
			optionJacketWashableInfo.setWjSleeveBtnCnt(String.valueOf(orderJK.getJkSleeveBtnNumber()));
			optionJacketWashableInfo.setWjCuffSpec(orderJK.getJkCuffCd());
			optionJacketWashableInfo.setWjInsidePktChange(orderJK.getJkInnerPktType());
			optionJacketWashableInfo.setWjBreastInnerPkt(orderJK.getJkRightInnerPktTypeCd());
			optionJacketWashableInfo.setWjStitch(orderJK.getJkStitchTypeCd());
			optionJacketWashableInfo.setWjStitchModify(orderJK.getJkStitchPlcType());
			optionJacketWashableInfo.setWjStitchModifyPlace(orderJK.getJkStitchPlcCd());
			optionJacketWashableInfo.setWjDStitchModify(orderJK.getJkDblstitchPlcType());
			optionJacketWashableInfo.setWjDStitchModifyPlace(orderJK.getJkDblstitchPlcCd());
			optionJacketWashableInfo.setWjAmfColor(orderJK.getJkAmfColorType());
			optionJacketWashableInfo.setWjAmfColorPlace(orderJK.getJkAmfColorPlcCd());
			optionJacketWashableInfo.setWjAllAmfColor(orderJK.getJkAmfColorCd());
			optionJacketWashableInfo.setWjBhColor(orderJK.getJkBtnholeColorType());
			optionJacketWashableInfo.setWjBhColorPlace(orderJK.getJkBtnholeColorPlcCd());
			optionJacketWashableInfo.setWjAllBhColor(orderJK.getJkBtnholeColorCd());
			optionJacketWashableInfo.setWjByColor(orderJK.getJkBtnthreadColorType());
			optionJacketWashableInfo.setWjByColorPlace(orderJK.getJkBtnthreadColorPlcCd());
			optionJacketWashableInfo.setWjAllByColor(orderJK.getJkBtnthreadColorCd());
			optionJacketWashableInfo.setWjVentSpec(orderJK.getJkVentCd());
			optionJacketWashableInfo.setWjBodyBackMate(orderJK.getJkInnerBodyClothType());
			optionJacketWashableInfo.setWjCuffBackMate(orderJK.getJkInnerSleeveClothType());
			optionJacketWashableInfo.setWjBtnMate(orderJK.getJkBtnMaterialType());
			optionJacketWashableInfo.setWjBtnMate(orderJK.getJkBtnMaterialType());
			optionJacketWashableInfo.setWjBodyBackMateStkNo(orderJK.getJkInnerBodyClothCd());
			optionJacketWashableInfo.setWjCuffBackMateStkNo(orderJK.getJkInnerSleeveClothCd());
			optionJacketWashableInfo.setWjShapeMemory(orderJK.getJkShapeMemoryCd());
			
			pluralJkWashableOptionItem(optionJacketWashableInfo,orderJK);
		}
		
	}

	private void pluralJkWashableOptionItem(CoOptionJacketWashableInfo optionJacketWashableInfo, Order orderJK) {
		String regex = ",";
		
		//ステッチ箇所変更
		String jkStitchPlcCd = orderJK.getJkStitchPlcCd();
		if(jkStitchPlcCd != null && !"".equals(jkStitchPlcCd)) {
			String[] jkStitchPlcSplit = jkStitchPlcCd.split(regex);
			for (String stitchPlcCode : jkStitchPlcSplit) {
				if("0002501".equals(stitchPlcCode)) {
					optionJacketWashableInfo.setWjStitchModifyPlace1(stitchPlcCode);
				}else if("0002502".equals(stitchPlcCode)) {
					optionJacketWashableInfo.setWjStitchModifyPlace2(stitchPlcCode);
				}else if("0002503".equals(stitchPlcCode)) {
					optionJacketWashableInfo.setWjStitchModifyPlace3(stitchPlcCode);
				}else if("0002504".equals(stitchPlcCode)) {
					optionJacketWashableInfo.setWjStitchModifyPlace4(stitchPlcCode);
				}else if("0002505".equals(stitchPlcCode)) {
					optionJacketWashableInfo.setWjStitchModifyPlace5(stitchPlcCode);
				}else if("0002507".equals(stitchPlcCode)) {
					optionJacketWashableInfo.setWjStitchModifyPlace6(stitchPlcCode);
				}else if("0002508".equals(stitchPlcCode)) {
					optionJacketWashableInfo.setWjStitchModifyPlace7(stitchPlcCode);
				}else if("0002509".equals(stitchPlcCode)) {
					optionJacketWashableInfo.setWjStitchModifyPlace8(stitchPlcCode);
				}else if("0002510".equals(stitchPlcCode)) {
					optionJacketWashableInfo.setWjStitchModifyPlace9(stitchPlcCode);
				}
			}
		}
		
		//ダブルステッチ変更
		String jkDblstitchPlcCd = orderJK.getJkDblstitchPlcCd();
		if(jkDblstitchPlcCd != null && !"".equals(jkDblstitchPlcCd)) {
			String[] jkDblstitchPlcSplit = jkDblstitchPlcCd.split(regex);
			for (String dblstitchPlcCode : jkDblstitchPlcSplit) {
				if("0002701".equals(dblstitchPlcCode)) {
					optionJacketWashableInfo.setWjDStitchModifyPlace1(dblstitchPlcCode);
				}else if("0002702".equals(dblstitchPlcCode)) {
					optionJacketWashableInfo.setWjDStitchModifyPlace2(dblstitchPlcCode);
				}else if("0002703".equals(dblstitchPlcCode)) {
					optionJacketWashableInfo.setWjDStitchModifyPlace3(dblstitchPlcCode);
				}else if("0002705".equals(dblstitchPlcCode)) {
					optionJacketWashableInfo.setWjDStitchModifyPlace4(dblstitchPlcCode);
				}else if("0002707".equals(dblstitchPlcCode)) {
					optionJacketWashableInfo.setWjDStitchModifyPlace5(dblstitchPlcCode);
				}else if("0002708".equals(dblstitchPlcCode)) {
					optionJacketWashableInfo.setWjDStitchModifyPlace6(dblstitchPlcCode);
				}else if("0002709".equals(dblstitchPlcCode)) {
					optionJacketWashableInfo.setWjDStitchModifyPlace7(dblstitchPlcCode);
				}else if("0002710".equals(dblstitchPlcCode)) {
					optionJacketWashableInfo.setWjDStitchModifyPlace8(dblstitchPlcCode);
				}
			}
		}
		
		//AMF色指定
		String jkAmfColorPlcCd = orderJK.getJkAmfColorPlcCd();
		String jkAmfColorCd = orderJK.getJkAmfColorCd();
		if(jkAmfColorPlcCd!=null && !"".equals(jkAmfColorPlcCd) && jkAmfColorCd !=null && !"".equals(jkAmfColorCd)) {
			String[] jkAmfColorPlcSplit = jkAmfColorPlcCd.split(regex);
			String[] jkAmfColorSplit = jkAmfColorCd.split(regex);
			for (int i = 0;i<jkAmfColorPlcSplit.length;i++) {
				if("0002901".equals(jkAmfColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjAmfColorPlace1(jkAmfColorPlcSplit[i]);
					optionJacketWashableInfo.setWjAmfColor1(jkAmfColorSplit[i]);
				}else if("0002902".equals(jkAmfColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjAmfColorPlace2(jkAmfColorPlcSplit[i]);
					optionJacketWashableInfo.setWjAmfColor2(jkAmfColorSplit[i]);
				}else if("0002903".equals(jkAmfColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjAmfColorPlace3(jkAmfColorPlcSplit[i]);
					optionJacketWashableInfo.setWjAmfColor3(jkAmfColorSplit[i]);
				}else if("0002904".equals(jkAmfColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjAmfColorPlace4(jkAmfColorPlcSplit[i]);
					optionJacketWashableInfo.setWjAmfColor4(jkAmfColorSplit[i]);
				}else if("0002905".equals(jkAmfColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjAmfColorPlace5(jkAmfColorPlcSplit[i]);
					optionJacketWashableInfo.setWjAmfColor5(jkAmfColorSplit[i]);
				}else if("0002907".equals(jkAmfColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjAmfColorPlace6(jkAmfColorPlcSplit[i]);
					optionJacketWashableInfo.setWjAmfColor6(jkAmfColorSplit[i]);
				}else if("0002908".equals(jkAmfColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjAmfColorPlace7(jkAmfColorPlcSplit[i]);
					optionJacketWashableInfo.setWjAmfColor7(jkAmfColorSplit[i]);
				}else if("0002909".equals(jkAmfColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjAmfColorPlace8(jkAmfColorPlcSplit[i]);
					optionJacketWashableInfo.setWjAmfColor8(jkAmfColorSplit[i]);
				}else if("0002910".equals(jkAmfColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjAmfColorPlace9(jkAmfColorPlcSplit[i]);
					optionJacketWashableInfo.setWjAmfColor9(jkAmfColorSplit[i]);
				}
			}
		}
		
		//ボタンホール色指定
		String jkBtnholeColorPlcCd = orderJK.getJkBtnholeColorPlcCd();
		String jkBtnholeColorCd = orderJK.getJkBtnholeColorCd();
		if(!"".equals(jkBtnholeColorPlcCd)&&jkBtnholeColorPlcCd!=null&&!"".equals(jkBtnholeColorCd)&&jkBtnholeColorCd!=null) {
			String[] jkBtnholeColorPlcSplit = jkBtnholeColorPlcCd.split(regex);
			String[] jkBtnholeColorSplit = jkBtnholeColorCd.split(regex);
			for (int i = 0; i < jkBtnholeColorPlcSplit.length; i++) {
				if("0003201".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace1(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor1(jkBtnholeColorSplit[i]);
				}else if("0003202".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace2(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor2(jkBtnholeColorSplit[i]);
				}else if("0003203".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace3(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor3(jkBtnholeColorSplit[i]);
				}else if("0003204".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace4(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor4(jkBtnholeColorSplit[i]);
				}else if("0003205".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace5(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor5(jkBtnholeColorSplit[i]);
				}else if("0003206".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace6(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor6(jkBtnholeColorSplit[i]);
				}else if("0003207".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace7(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor7(jkBtnholeColorSplit[i]);
				}else if("0003208".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace8(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor8(jkBtnholeColorSplit[i]);
				}else if("0003209".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace9(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor9(jkBtnholeColorSplit[i]);
				}else if("0003210".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace10(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor10(jkBtnholeColorSplit[i]);
				}else if("0003211".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace11(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor11(jkBtnholeColorSplit[i]);
				}else if("0003212".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace12(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor12(jkBtnholeColorSplit[i]);
				}else if("0003213".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace13(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor13(jkBtnholeColorSplit[i]);
				}else if("0003214".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace14(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor14(jkBtnholeColorSplit[i]);
				}else if("0003215".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace15(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor15(jkBtnholeColorSplit[i]);
				}else if("0003216".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace16(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor16(jkBtnholeColorSplit[i]);
				}else if("0003217".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjBhColorPlace17(jkBtnholeColorPlcSplit[i]);
					optionJacketWashableInfo.setWjBhColor17(jkBtnholeColorSplit[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String jkBtnthreadColorPlcCd = orderJK.getJkBtnthreadColorPlcCd();
		String jkBtnthreadColorCd = orderJK.getJkBtnthreadColorCd();
		if(!"".equals(jkBtnthreadColorPlcCd)&&jkBtnthreadColorPlcCd!=null&&!"".equals(jkBtnthreadColorCd)&&jkBtnthreadColorCd!=null) {
			String[] jkBtnthreadColorPlcSplit = jkBtnthreadColorPlcCd.split(regex);
			String[] jkBtnthreadColorSplit = jkBtnthreadColorCd.split(regex);
			for (int i = 0; i < jkBtnthreadColorPlcSplit.length; i++) {
				if("0003501".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace1(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor1(jkBtnthreadColorSplit[i]);
				}else if("0003502".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace2(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor2(jkBtnthreadColorSplit[i]);
				}else if("0003503".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace3(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor3(jkBtnthreadColorSplit[i]);
				}else if("0003504".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace4(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor4(jkBtnthreadColorSplit[i]);
				}else if("0003505".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace5(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor5(jkBtnthreadColorSplit[i]);
				}else if("0003506".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace6(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor6(jkBtnthreadColorSplit[i]);
				}else if("0003507".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace7(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor7(jkBtnthreadColorSplit[i]);
				}else if("0003508".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace8(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor8(jkBtnthreadColorSplit[i]);
				}else if("0003509".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace9(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor9(jkBtnthreadColorSplit[i]);
				}else if("0003510".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace10(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor10(jkBtnthreadColorSplit[i]);
				}else if("0003511".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace11(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor11(jkBtnthreadColorSplit[i]);
				}else if("0003512".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace12(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor12(jkBtnthreadColorSplit[i]);
				}else if("0003513".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace13(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor13(jkBtnthreadColorSplit[i]);
				}else if("0003514".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace14(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor14(jkBtnthreadColorSplit[i]);
				}else if("0003515".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace15(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor15(jkBtnthreadColorSplit[i]);
				}else if("0003516".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketWashableInfo.setWjByColorPlace16(jkBtnthreadColorPlcSplit[i]);
					optionJacketWashableInfo.setWjByColor16(jkBtnthreadColorSplit[i]);
				}
			}
		}
	}

	private void pluralJkTuxedoOptionItem(CoOptionJacketTuxedoInfo optionJacketTuxedoInfo, Order orderJK) {
		String regex = ",";
		// ボタンホール色指定
		String jkBtnholeColorPlcCd = orderJK.getJkBtnholeColorPlcCd();
		String jkBtnholeColorCd = orderJK.getJkBtnholeColorCd();
		if (!"".equals(jkBtnholeColorPlcCd) && jkBtnholeColorPlcCd != null && !"".equals(jkBtnholeColorCd)
				&& jkBtnholeColorCd != null) {
			String[] jkBtnholeColorPlcSplit = jkBtnholeColorPlcCd.split(regex);
			String[] jkBtnholeColorSplit = jkBtnholeColorCd.split(regex);
			for (int i = 0; i < jkBtnholeColorPlcSplit.length; i++) {
				if ("0003201".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace1(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor1(jkBtnholeColorSplit[i]);
				} else if ("0003202".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace2(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor2(jkBtnholeColorSplit[i]);
				} else if ("0003203".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace3(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor3(jkBtnholeColorSplit[i]);
				} else if ("0003204".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace4(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor4(jkBtnholeColorSplit[i]);
				} else if ("0003205".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace5(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor5(jkBtnholeColorSplit[i]);
				} else if ("0003206".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace6(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor6(jkBtnholeColorSplit[i]);
				} else if ("0003207".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace7(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor7(jkBtnholeColorSplit[i]);
				} else if ("0003208".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace8(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor8(jkBtnholeColorSplit[i]);
				} else if ("0003209".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace9(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor9(jkBtnholeColorSplit[i]);
				} else if ("0003210".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace10(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor10(jkBtnholeColorSplit[i]);
				} else if ("0003211".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace11(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor11(jkBtnholeColorSplit[i]);
				} else if ("0003212".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace12(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor12(jkBtnholeColorSplit[i]);
				} else if ("0003213".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace13(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor13(jkBtnholeColorSplit[i]);
				} else if ("0003214".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace14(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor14(jkBtnholeColorSplit[i]);
				} else if ("0003215".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace15(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor15(jkBtnholeColorSplit[i]);
				} else if ("0003216".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace16(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor16(jkBtnholeColorSplit[i]);
				} else if ("0003217".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjBhColorPlace17(jkBtnholeColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjBhColor17(jkBtnholeColorSplit[i]);
				}
			}
		}

		// ボタン付け糸指定
		String jkBtnthreadColorPlcCd = orderJK.getJkBtnthreadColorPlcCd();
		String jkBtnthreadColorCd = orderJK.getJkBtnthreadColorCd();
		if (!"".equals(jkBtnthreadColorPlcCd) && jkBtnthreadColorPlcCd != null && !"".equals(jkBtnthreadColorCd)
				&& jkBtnthreadColorCd != null) {
			String[] jkBtnthreadColorPlcSplit = jkBtnthreadColorPlcCd.split(regex);
			String[] jkBtnthreadColorSplit = jkBtnthreadColorCd.split(regex);
			for (int i = 0; i < jkBtnthreadColorPlcSplit.length; i++) {
				if ("0003501".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace1(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor1(jkBtnthreadColorSplit[i]);
				} else if ("0003502".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace2(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor2(jkBtnthreadColorSplit[i]);
				} else if ("0003503".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace3(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor3(jkBtnthreadColorSplit[i]);
				} else if ("0003504".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace4(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor4(jkBtnthreadColorSplit[i]);
				} else if ("0003505".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace5(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor5(jkBtnthreadColorSplit[i]);
				} else if ("0003506".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace6(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor6(jkBtnthreadColorSplit[i]);
				} else if ("0003507".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace7(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor7(jkBtnthreadColorSplit[i]);
				} else if ("0003508".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace8(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor8(jkBtnthreadColorSplit[i]);
				} else if ("0003509".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace9(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor9(jkBtnthreadColorSplit[i]);
				} else if ("0003510".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace10(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor10(jkBtnthreadColorSplit[i]);
				} else if ("0003511".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace11(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor11(jkBtnthreadColorSplit[i]);
				} else if ("0003512".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace12(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor12(jkBtnthreadColorSplit[i]);
				} else if ("0003513".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace13(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor13(jkBtnthreadColorSplit[i]);
				} else if ("0003514".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace14(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor14(jkBtnthreadColorSplit[i]);
				} else if ("0003515".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace15(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor15(jkBtnthreadColorSplit[i]);
				} else if ("0003516".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketTuxedoInfo.setTjByColorPlace16(jkBtnthreadColorPlcSplit[i]);
					optionJacketTuxedoInfo.setTjByColor16(jkBtnthreadColorSplit[i]);
				}
			}
		}
	}

	private void pluralJkStandardOptionItem(CoOptionJacketStandardInfo optionJacketStandardInfo, Order orderJK) {
		String regex = ",";
		//内ポケット変更
		String jkInnerPktCd = orderJK.getJkInnerPktCd();
		if(jkInnerPktCd != null && !"".equals(jkInnerPktCd)) {
			String[] jkInnerPktSplit = jkInnerPktCd.split(regex);
			for (String innerPktCode : jkInnerPktSplit) {
				if("0002101".equals(innerPktCode)) {
					optionJacketStandardInfo.setOjInsidePktPlace1(innerPktCode);
				}else if("0002102".equals(innerPktCode)) {
					optionJacketStandardInfo.setOjInsidePktPlace2(innerPktCode);
				}else if("0002103".equals(innerPktCode)) {
					optionJacketStandardInfo.setOjInsidePktPlace3(innerPktCode);
				}else if("0002104".equals(innerPktCode)) {
					optionJacketStandardInfo.setOjInsidePktPlace4(innerPktCode);
				}
			}
		}
		
		//ステッチ箇所変更
		String jkStitchPlcCd = orderJK.getJkStitchPlcCd();
		if(jkStitchPlcCd != null && !"".equals(jkStitchPlcCd)) {
			String[] jkStitchPlcSplit = jkStitchPlcCd.split(regex);
			for (String stitchPlcCode : jkStitchPlcSplit) {
				if("0002501".equals(stitchPlcCode)) {
					optionJacketStandardInfo.setOjStitchModifyPlace1(stitchPlcCode);
				}else if("0002502".equals(stitchPlcCode)) {
					optionJacketStandardInfo.setOjStitchModifyPlace2(stitchPlcCode);
				}else if("0002503".equals(stitchPlcCode)) {
					optionJacketStandardInfo.setOjStitchModifyPlace3(stitchPlcCode);
				}else if("0002504".equals(stitchPlcCode)) {
					optionJacketStandardInfo.setOjStitchModifyPlace4(stitchPlcCode);
				}else if("0002505".equals(stitchPlcCode)) {
					optionJacketStandardInfo.setOjStitchModifyPlace5(stitchPlcCode);
				}else if("0002507".equals(stitchPlcCode)) {
					optionJacketStandardInfo.setOjStitchModifyPlace6(stitchPlcCode);
				}else if("0002508".equals(stitchPlcCode)) {
					optionJacketStandardInfo.setOjStitchModifyPlace7(stitchPlcCode);
				}else if("0002509".equals(stitchPlcCode)) {
					optionJacketStandardInfo.setOjStitchModifyPlace8(stitchPlcCode);
				}else if("0002510".equals(stitchPlcCode)) {
					optionJacketStandardInfo.setOjStitchModifyPlace9(stitchPlcCode);
				}
			}
		}
		
		//ダブルステッチ変更
		String jkDblstitchPlcCd = orderJK.getJkDblstitchPlcCd();
		if(jkDblstitchPlcCd != null && !"".equals(jkDblstitchPlcCd)) {
			String[] jkDblstitchPlcSplit = jkDblstitchPlcCd.split(regex);
			for (String dblstitchPlcCode : jkDblstitchPlcSplit) {
				if("0002701".equals(dblstitchPlcCode)) {
					optionJacketStandardInfo.setOjDStitchModifyPlace1(dblstitchPlcCode);
				}else if("0002702".equals(dblstitchPlcCode)) {
					optionJacketStandardInfo.setOjDStitchModifyPlace2(dblstitchPlcCode);
				}else if("0002703".equals(dblstitchPlcCode)) {
					optionJacketStandardInfo.setOjDStitchModifyPlace3(dblstitchPlcCode);
				}else if("0002705".equals(dblstitchPlcCode)) {
					optionJacketStandardInfo.setOjDStitchModifyPlace4(dblstitchPlcCode);
				}else if("0002707".equals(dblstitchPlcCode)) {
					optionJacketStandardInfo.setOjDStitchModifyPlace5(dblstitchPlcCode);
				}else if("0002708".equals(dblstitchPlcCode)) {
					optionJacketStandardInfo.setOjDStitchModifyPlace6(dblstitchPlcCode);
				}else if("0002709".equals(dblstitchPlcCode)) {
					optionJacketStandardInfo.setOjDStitchModifyPlace7(dblstitchPlcCode);
				}else if("0002710".equals(dblstitchPlcCode)) {
					optionJacketStandardInfo.setOjDStitchModifyPlace8(dblstitchPlcCode);
				}
			}
		}
		
		//AMF色指定
		String jkAmfColorPlcCd = orderJK.getJkAmfColorPlcCd();
		String jkAmfColorCd = orderJK.getJkAmfColorCd();
		if(jkAmfColorPlcCd!=null && !"".equals(jkAmfColorPlcCd) && jkAmfColorCd !=null && !"".equals(jkAmfColorCd)) {
			String[] jkAmfColorPlcSplit = jkAmfColorPlcCd.split(regex);
			String[] jkAmfColorSplit = jkAmfColorCd.split(regex);
			for (int i = 0;i<jkAmfColorPlcSplit.length;i++) {
				if("0002901".equals(jkAmfColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjAmfColorPlace1(jkAmfColorPlcSplit[i]);
					optionJacketStandardInfo.setOjAmfColor1(jkAmfColorSplit[i]);
				}else if("0002902".equals(jkAmfColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjAmfColorPlace2(jkAmfColorPlcSplit[i]);
					optionJacketStandardInfo.setOjAmfColor2(jkAmfColorSplit[i]);
				}else if("0002903".equals(jkAmfColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjAmfColorPlace3(jkAmfColorPlcSplit[i]);
					optionJacketStandardInfo.setOjAmfColor3(jkAmfColorSplit[i]);
				}else if("0002904".equals(jkAmfColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjAmfColorPlace4(jkAmfColorPlcSplit[i]);
					optionJacketStandardInfo.setOjAmfColor4(jkAmfColorSplit[i]);
				}else if("0002905".equals(jkAmfColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjAmfColorPlace5(jkAmfColorPlcSplit[i]);
					optionJacketStandardInfo.setOjAmfColor5(jkAmfColorSplit[i]);
				}else if("0002907".equals(jkAmfColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjAmfColorPlace6(jkAmfColorPlcSplit[i]);
					optionJacketStandardInfo.setOjAmfColor6(jkAmfColorSplit[i]);
				}else if("0002908".equals(jkAmfColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjAmfColorPlace7(jkAmfColorPlcSplit[i]);
					optionJacketStandardInfo.setOjAmfColor7(jkAmfColorSplit[i]);
				}else if("0002909".equals(jkAmfColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjAmfColorPlace8(jkAmfColorPlcSplit[i]);
					optionJacketStandardInfo.setOjAmfColor8(jkAmfColorSplit[i]);
				}else if("0002910".equals(jkAmfColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjAmfColorPlace9(jkAmfColorPlcSplit[i]);
					optionJacketStandardInfo.setOjAmfColor9(jkAmfColorSplit[i]);
				}
			}
		}
		
		//ボタンホール色指定
		String jkBtnholeColorPlcCd = orderJK.getJkBtnholeColorPlcCd();
		String jkBtnholeColorCd = orderJK.getJkBtnholeColorCd();
		if(!"".equals(jkBtnholeColorPlcCd)&&jkBtnholeColorPlcCd!=null&&!"".equals(jkBtnholeColorCd)&&jkBtnholeColorCd!=null) {
			String[] jkBtnholeColorPlcSplit = jkBtnholeColorPlcCd.split(regex);
			String[] jkBtnholeColorSplit = jkBtnholeColorCd.split(regex);
			for (int i = 0; i < jkBtnholeColorPlcSplit.length; i++) {
				if("0003201".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace1(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor1(jkBtnholeColorSplit[i]);
				}else if("0003202".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace2(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor2(jkBtnholeColorSplit[i]);
				}else if("0003203".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace3(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor3(jkBtnholeColorSplit[i]);
				}else if("0003204".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace4(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor4(jkBtnholeColorSplit[i]);
				}else if("0003205".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace5(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor5(jkBtnholeColorSplit[i]);
				}else if("0003206".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace6(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor6(jkBtnholeColorSplit[i]);
				}else if("0003207".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace7(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor7(jkBtnholeColorSplit[i]);
				}else if("0003208".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace8(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor8(jkBtnholeColorSplit[i]);
				}else if("0003209".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace9(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor9(jkBtnholeColorSplit[i]);
				}else if("0003210".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace10(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor10(jkBtnholeColorSplit[i]);
				}else if("0003211".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace11(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor11(jkBtnholeColorSplit[i]);
				}else if("0003212".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace12(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor12(jkBtnholeColorSplit[i]);
				}else if("0003213".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace13(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor13(jkBtnholeColorSplit[i]);
				}else if("0003214".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace14(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor14(jkBtnholeColorSplit[i]);
				}else if("0003215".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace15(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor15(jkBtnholeColorSplit[i]);
				}else if("0003216".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace16(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor16(jkBtnholeColorSplit[i]);
				}else if("0003217".equals(jkBtnholeColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjBhColorPlace17(jkBtnholeColorPlcSplit[i]);
					optionJacketStandardInfo.setOjBhColor17(jkBtnholeColorSplit[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String jkBtnthreadColorPlcCd = orderJK.getJkBtnthreadColorPlcCd();
		String jkBtnthreadColorCd = orderJK.getJkBtnthreadColorCd();
		if(!"".equals(jkBtnthreadColorPlcCd)&&jkBtnthreadColorPlcCd!=null&&!"".equals(jkBtnthreadColorCd)&&jkBtnthreadColorCd!=null) {
			String[] jkBtnthreadColorPlcSplit = jkBtnthreadColorPlcCd.split(regex);
			String[] jkBtnthreadColorSplit = jkBtnthreadColorCd.split(regex);
			for (int i = 0; i < jkBtnthreadColorPlcSplit.length; i++) {
				if("0003501".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace1(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor1(jkBtnthreadColorSplit[i]);
				}else if("0003502".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace2(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor2(jkBtnthreadColorSplit[i]);
				}else if("0003503".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace3(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor3(jkBtnthreadColorSplit[i]);
				}else if("0003504".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace4(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor4(jkBtnthreadColorSplit[i]);
				}else if("0003505".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace5(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor5(jkBtnthreadColorSplit[i]);
				}else if("0003506".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace6(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor6(jkBtnthreadColorSplit[i]);
				}else if("0003507".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace7(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor7(jkBtnthreadColorSplit[i]);
				}else if("0003508".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace8(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor8(jkBtnthreadColorSplit[i]);
				}else if("0003509".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace9(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor9(jkBtnthreadColorSplit[i]);
				}else if("0003510".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace10(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor10(jkBtnthreadColorSplit[i]);
				}else if("0003511".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace11(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor11(jkBtnthreadColorSplit[i]);
				}else if("0003512".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace12(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor12(jkBtnthreadColorSplit[i]);
				}else if("0003513".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace13(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor13(jkBtnthreadColorSplit[i]);
				}else if("0003514".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace14(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor14(jkBtnthreadColorSplit[i]);
				}else if("0003515".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace15(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor15(jkBtnthreadColorSplit[i]);
				}else if("0003516".equals(jkBtnthreadColorPlcSplit[i])) {
					optionJacketStandardInfo.setOjByColorPlace16(jkBtnthreadColorPlcSplit[i]);
					optionJacketStandardInfo.setOjByColor16(jkBtnthreadColorSplit[i]);
				}
			}
		}
	}
	
	private void pluralGlStandardOptionItem(CoOptionGiletStandardInfo coOptionGiletStandardInfo, Order orderGl) {
		String regex = ",";
		//ステッチ箇所変更
		String glStitchPlcCd = orderGl.getGlStitchPlcCd();
		if(glStitchPlcCd != null && !"".equals(glStitchPlcCd)) {
			String[] glStitchPlcCdStr = glStitchPlcCd.split(regex);
			for (String glStitchPlcCdInner : glStitchPlcCdStr) {
				if("0000701".equals(glStitchPlcCdInner)) {
					coOptionGiletStandardInfo.setOgStitchModifyPlace1(glStitchPlcCdInner);
				}else if("0000704".equals(glStitchPlcCdInner)) {
					coOptionGiletStandardInfo.setOgStitchModifyPlace2(glStitchPlcCdInner);
				}else if("0000705".equals(glStitchPlcCdInner)) {
					coOptionGiletStandardInfo.setOgStitchModifyPlace3(glStitchPlcCdInner);
				}
			}
		}
		
		//ダブルステッチ
		String glDblstitchPlcCd = orderGl.getGlDblstitchPlcCd();
		if(glDblstitchPlcCd != null && !"".equals(glDblstitchPlcCd)) {
			String[] glDblstitchPlcCdStr = glDblstitchPlcCd.split(regex);
			for (String glDblstitchPlcCdInner : glDblstitchPlcCdStr) {
				if("0002701".equals(glDblstitchPlcCdInner)) {
					coOptionGiletStandardInfo.setOgDStitchModifyPlace1(glDblstitchPlcCdInner);
				}else if("0002702".equals(glDblstitchPlcCdInner)) {
					coOptionGiletStandardInfo.setOgDStitchModifyPlace2(glDblstitchPlcCdInner);
				}else if("0002703".equals(glDblstitchPlcCdInner)) {
					coOptionGiletStandardInfo.setOgDStitchModifyPlace3(glDblstitchPlcCdInner);
				}
			}
		}
		
		//AMF色指定
		String glAmfColorPlcCd = orderGl.getGlAmfColorPlcCd();
		String glAmfColorCd = orderGl.getGlAmfColorCd();
		if(glAmfColorPlcCd!=null && !"".equals(glAmfColorPlcCd) 
				&& glAmfColorCd !=null && !"".equals(glAmfColorCd)) {
			String[] glAmfColorPlcCdStr = glAmfColorPlcCd.split(regex);
			String[] glAmfColorCdStr = glAmfColorCd.split(regex);
			for (int i = 0;i<glAmfColorPlcCdStr.length;i++) {
				if("0000901".equals(glAmfColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgAmfColorPlace1(glAmfColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgAmfColor1(glAmfColorCdStr[i]);
				}else if("0000902".equals(glAmfColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgAmfColorPlace2(glAmfColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgAmfColor2(glAmfColorCdStr[i]);
				}else if("0000903".equals(glAmfColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgAmfColorPlace3(glAmfColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgAmfColor3(glAmfColorCdStr[i]);
				}
			}
		}
		
		//ボタンホール色指定
		String glBtnholeColorPlcCd = orderGl.getGlBtnholeColorPlcCd();
		String glBtnholeColorCd = orderGl.getGlBtnholeColorCd();
		if(!"".equals(glBtnholeColorPlcCd) && glBtnholeColorPlcCd!=null 
				&& !"".equals(glBtnholeColorCd) && glBtnholeColorCd!=null) {
			String[] glBtnholeColorPlcCdStr = glBtnholeColorPlcCd.split(regex);
			String[] glBtnholeColorCdStr = glBtnholeColorCd.split(regex);
			for (int i = 0; i < glBtnholeColorPlcCdStr.length; i++) {
				if("0001201".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgBhColorPlace1(glBtnholeColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgBhColor1(glBtnholeColorCdStr[i]);
				}else if("0001202".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgBhColorPlace2(glBtnholeColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgBhColor2(glBtnholeColorCdStr[i]);
				}else if("0001203".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgBhColorPlace3(glBtnholeColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgBhColor3(glBtnholeColorCdStr[i]);
				}else if("0001204".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgBhColorPlace4(glBtnholeColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgBhColor4(glBtnholeColorCdStr[i]);
				}else if("0001205".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgBhColorPlace5(glBtnholeColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgBhColor5(glBtnholeColorCdStr[i]);
				}else if("0001206".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgBhColorPlace6(glBtnholeColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgBhColor6(glBtnholeColorCdStr[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String glBtnthreadColorPlcCd = orderGl.getGlBtnthreadColorPlcCd();
		String glBtnthreadColorCd = orderGl.getGlBtnthreadColorCd();
		if(!"".equals(glBtnthreadColorPlcCd) && glBtnthreadColorPlcCd!=null 
				&& !"".equals(glBtnthreadColorCd) && glBtnthreadColorCd!=null) {
			String[] glBtnthreadColorPlcCdStr = glBtnthreadColorPlcCd.split(regex);
			String[] glBtnthreadColorCdStr = glBtnthreadColorCd.split(regex);
			for (int i = 0; i < glBtnthreadColorPlcCdStr.length; i++) {
				if("0001501".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace1(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor1(glBtnthreadColorCdStr[i]);
				}else if("0001502".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace2(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor2(glBtnthreadColorCdStr[i]);
				}else if("0001503".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace3(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor3(glBtnthreadColorCdStr[i]);
				}else if("0001504".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace4(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor4(glBtnthreadColorCdStr[i]);
				}else if("0001505".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace5(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor5(glBtnthreadColorCdStr[i]);
				}else if("0001506".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace6(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor6(glBtnthreadColorCdStr[i]);
				}else if("0001507".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace7(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor7(glBtnthreadColorCdStr[i]);
				}else if("0001508".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace8(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor8(glBtnthreadColorCdStr[i]);
				}else if("0001509".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace9(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor9(glBtnthreadColorCdStr[i]);
				}else if("0001510".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletStandardInfo.setOgByColorPlace10(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletStandardInfo.setOgByColor10(glBtnthreadColorCdStr[i]);
				}
			}
		}
	}
	
	private void pluralGlTuxedoOptionItem(CoOptionGiletTuxedoInfo coOptionGiletTuxedoInfo, Order orderGl) {
		String regex = ",";
		//ボタンホール色指定
		String glBtnholeColorPlcCd = orderGl.getGlBtnholeColorPlcCd();
		String glBtnholeColorCd = orderGl.getGlBtnholeColorCd();
		if(!"".equals(glBtnholeColorPlcCd) && glBtnholeColorPlcCd!=null 
				&& !"".equals(glBtnholeColorCd) && glBtnholeColorCd!=null) {
			String[] glBtnholeColorPlcCdStr = glBtnholeColorPlcCd.split(regex);
			String[] glBtnholeColorCdStr = glBtnholeColorCd.split(regex);
			for (int i = 0; i < glBtnholeColorPlcCdStr.length; i++) {
				if("0001201".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgBhColorPlace1(glBtnholeColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgBhColor1(glBtnholeColorCdStr[i]);
				}else if("0001202".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgBhColorPlace2(glBtnholeColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgBhColor2(glBtnholeColorCdStr[i]);
				}else if("0001203".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgBhColorPlace3(glBtnholeColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgBhColor3(glBtnholeColorCdStr[i]);
				}else if("0001204".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgBhColorPlace4(glBtnholeColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgBhColor4(glBtnholeColorCdStr[i]);
				}else if("0001205".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgBhColorPlace5(glBtnholeColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgBhColor5(glBtnholeColorCdStr[i]);
				}else if("0001206".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgBhColorPlace6(glBtnholeColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgBhColor6(glBtnholeColorCdStr[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String glBtnthreadColorPlcCd = orderGl.getGlBtnthreadColorPlcCd();
		String glBtnthreadColorCd = orderGl.getGlBtnthreadColorCd();
		if(!"".equals(glBtnthreadColorPlcCd) && glBtnthreadColorPlcCd!=null 
				&& !"".equals(glBtnthreadColorCd) && glBtnthreadColorCd!=null) {
			String[] glBtnthreadColorPlcCdStr = glBtnthreadColorPlcCd.split(regex);
			String[] glBtnthreadColorCdStr = glBtnthreadColorCd.split(regex);
			for (int i = 0; i < glBtnthreadColorPlcCdStr.length; i++) {
				if("0001501".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace1(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor1(glBtnthreadColorCdStr[i]);
				}else if("0001502".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace2(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor2(glBtnthreadColorCdStr[i]);
				}else if("0001503".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace3(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor3(glBtnthreadColorCdStr[i]);
				}else if("0001504".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace4(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor4(glBtnthreadColorCdStr[i]);
				}else if("0001505".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace5(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor5(glBtnthreadColorCdStr[i]);
				}else if("0001506".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace6(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor6(glBtnthreadColorCdStr[i]);
				}else if("0001507".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace7(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor7(glBtnthreadColorCdStr[i]);
				}else if("0001508".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace8(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor8(glBtnthreadColorCdStr[i]);
				}else if("0001509".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace9(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor9(glBtnthreadColorCdStr[i]);
				}else if("0001510".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletTuxedoInfo.setTgByColorPlace10(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletTuxedoInfo.setTgByColor10(glBtnthreadColorCdStr[i]);
				}
			}
		}
	}
	
	private void pluralGlWashableOptionItem(CoOptionGiletWashableInfo coOptionGiletWashableInfo, Order orderGl) {
		String regex = ",";
		//ステッチ箇所変更
		String glStitchPlcCd = orderGl.getGlStitchPlcCd();
		if(glStitchPlcCd != null && !"".equals(glStitchPlcCd)) {
			String[] glStitchPlcCdStr = glStitchPlcCd.split(regex);
			for (String glStitchPlcCdInner : glStitchPlcCdStr) {
				if("0000701".equals(glStitchPlcCdInner)) {
					coOptionGiletWashableInfo.setWgStitchModifyPlace1(glStitchPlcCdInner);
				}else if("0000704".equals(glStitchPlcCdInner)) {
					coOptionGiletWashableInfo.setWgStitchModifyPlace2(glStitchPlcCdInner);
				}else if("0000705".equals(glStitchPlcCdInner)) {
					coOptionGiletWashableInfo.setWgStitchModifyPlace3(glStitchPlcCdInner);
				}
			}
		}
		
		//ダブルステッチ
		String glDblstitchPlcCd = orderGl.getGlDblstitchPlcCd();
		if(glDblstitchPlcCd != null && !"".equals(glDblstitchPlcCd)) {
			String[] glDblstitchPlcCdStr = glDblstitchPlcCd.split(regex);
			for (String glDblstitchPlcCdInner : glDblstitchPlcCdStr) {
				if("0002701".equals(glDblstitchPlcCdInner)) {
					coOptionGiletWashableInfo.setWgDStitchModifyPlace1(glDblstitchPlcCdInner);
				}else if("0002702".equals(glDblstitchPlcCdInner)) {
					coOptionGiletWashableInfo.setWgDStitchModifyPlace2(glDblstitchPlcCdInner);
				}else if("0002703".equals(glDblstitchPlcCdInner)) {
					coOptionGiletWashableInfo.setWgDStitchModifyPlace3(glDblstitchPlcCdInner);
				}
			}
		}
		
		//AMF色指定
		String glAmfColorPlcCd = orderGl.getGlAmfColorPlcCd();
		String glAmfColorCd = orderGl.getGlAmfColorCd();
		if(glAmfColorPlcCd!=null && !"".equals(glAmfColorPlcCd) 
				&& glAmfColorCd !=null && !"".equals(glAmfColorCd)) {
			String[] glAmfColorPlcCdStr = glAmfColorPlcCd.split(regex);
			String[] glAmfColorCdStr = glAmfColorCd.split(regex);
			for (int i = 0;i<glAmfColorPlcCdStr.length;i++) {
				if("0000901".equals(glAmfColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgAmfColorPlace1(glAmfColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgAmfColor1(glAmfColorCdStr[i]);
				}else if("0000902".equals(glAmfColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgAmfColorPlace2(glAmfColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgAmfColor2(glAmfColorCdStr[i]);
				}else if("0000903".equals(glAmfColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgAmfColorPlace3(glAmfColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgAmfColor3(glAmfColorCdStr[i]);
				}
			}
		}
		
		//ボタンホール色指定
		String glBtnholeColorPlcCd = orderGl.getGlBtnholeColorPlcCd();
		String glBtnholeColorCd = orderGl.getGlBtnholeColorCd();
		if(!"".equals(glBtnholeColorPlcCd) && glBtnholeColorPlcCd!=null 
				&& !"".equals(glBtnholeColorCd) && glBtnholeColorCd!=null) {
			String[] glBtnholeColorPlcCdStr = glBtnholeColorPlcCd.split(regex);
			String[] glBtnholeColorCdStr = glBtnholeColorCd.split(regex);
			for (int i = 0; i < glBtnholeColorPlcCdStr.length; i++) {
				if("0001201".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgBhColorPlace1(glBtnholeColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgBhColor1(glBtnholeColorCdStr[i]);
				}else if("0001202".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgBhColorPlace2(glBtnholeColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgBhColor2(glBtnholeColorCdStr[i]);
				}else if("0001203".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgBhColorPlace3(glBtnholeColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgBhColor3(glBtnholeColorCdStr[i]);
				}else if("0001204".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgBhColorPlace4(glBtnholeColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgBhColor4(glBtnholeColorCdStr[i]);
				}else if("0001205".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgBhColorPlace5(glBtnholeColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgBhColor5(glBtnholeColorCdStr[i]);
				}else if("0001206".equals(glBtnholeColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgBhColorPlace6(glBtnholeColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgBhColor6(glBtnholeColorCdStr[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String glBtnthreadColorPlcCd = orderGl.getGlBtnthreadColorPlcCd();
		String glBtnthreadColorCd = orderGl.getGlBtnthreadColorCd();
		if(!"".equals(glBtnthreadColorPlcCd) && glBtnthreadColorPlcCd!=null 
				&& !"".equals(glBtnthreadColorCd) && glBtnthreadColorCd!=null) {
			String[] glBtnthreadColorPlcCdStr = glBtnthreadColorPlcCd.split(regex);
			String[] glBtnthreadColorCdStr = glBtnthreadColorCd.split(regex);
			for (int i = 0; i < glBtnthreadColorPlcCdStr.length; i++) {
				if("0001501".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace1(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor1(glBtnthreadColorCdStr[i]);
				}else if("0001502".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace2(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor2(glBtnthreadColorCdStr[i]);
				}else if("0001503".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace3(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor3(glBtnthreadColorCdStr[i]);
				}else if("0001504".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace4(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor4(glBtnthreadColorCdStr[i]);
				}else if("0001505".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace5(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor5(glBtnthreadColorCdStr[i]);
				}else if("0001506".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace6(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor6(glBtnthreadColorCdStr[i]);
				}else if("0001507".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace7(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor7(glBtnthreadColorCdStr[i]);
				}else if("0001508".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace8(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor8(glBtnthreadColorCdStr[i]);
				}else if("0001509".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace9(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor9(glBtnthreadColorCdStr[i]);
				}else if("0001510".equals(glBtnthreadColorPlcCdStr[i])) {
					coOptionGiletWashableInfo.setWgByColorPlace10(glBtnthreadColorPlcCdStr[i]);
					coOptionGiletWashableInfo.setWgByColor10(glBtnthreadColorCdStr[i]);
				}
			}
		}
	}

	public void jacketAdjustFromDb(OrderCoForm orderCoForm, Order order) {

		if("9000101".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionJacketStandardInfo().setOjJacketModel(order.getJkModelCd());
		}else if("9000102".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionJacketTuxedoInfo().setTjJacketModel(order.getJkModelCd());
		}else if("9000103".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionJacketWashableInfo().setWjJacketModel(order.getJkModelCd());
		}
		orderCoForm.getCoAdjustJacketStandardInfo().setSizeNumber(order.getCorJkSize());
		orderCoForm.getCoAdjustJacketStandardInfo().setSizeFigure(order.getCorJkDrop());

		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkBodySize(order.getCorJkBodylengthSize().toString());
		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkBodyGross(order.getCorJkBodylengthGross().toString());
		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkBodyCorrect(order.getCorJkBodylengthCorrect().toString());

		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkWaistSize(order.getCorJkWaistSize().toString());
		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkWaistGross(order.getCorJkWaistGross().toString());
		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkWaistCorrect(order.getCorJkWaistCorrect().toString());

		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkRightsleeveSize(order.getCorJkRightsleeveSize().toString());
		orderCoForm.getCoAdjustJacketStandardInfo()
				.setCorJkRightsleeveGross(order.getCorJkRightsleeveGross().toString());
		orderCoForm.getCoAdjustJacketStandardInfo()
				.setCorJkRightsleeveCorrect(order.getCorJkRightsleeveCorrect().toString());

		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkLeftsleeveSize(order.getCorJkLeftsleeveSize().toString());
		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkLeftsleeveGross(order.getCorJkLeftsleeveGross().toString());
		orderCoForm.getCoAdjustJacketStandardInfo()
				.setCorJkLeftsleeveCorrect(order.getCorJkLeftsleeveCorrect().toString());

		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkShoulderPad(order.getCorJkShoulderpad());
		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkFigureCorrect(order.getCorJkFigureCorrect());

		orderCoForm.getCoAdjustJacketStandardInfo().setCorJkStoreCorrectionMemo(order.getCorJkStoreCorrectionMemo());

	}

	public ProductCompos getComposBodyIiner(OrderCoForm orderCoForm) {
		ProductCompos productCompos = new ProductCompos();
		String bodyLiner = null;
		String sleeveLiner = null;
		String productItem = orderCoForm.getProductItem();
		String productCategory = orderCoForm.getProductCategory();
		if ("01".equals(productItem) || "".equals(productItem) || productItem == null) {
			String productIs3Piece = orderCoForm.getProductIs3Piece();
			CoOptionJacketStandardInfo optionJacketStandardInfo = orderCoForm.getCoOptionJacketStandardInfo();
			CoOptionJacketTuxedoInfo optionJacketTuxedoInfo = orderCoForm.getCoOptionJacketTuxedoInfo();
			CoOptionJacketWashableInfo optionJacketWashableInfo = orderCoForm.getCoOptionJacketWashableInfo();
			if ("0009901".equals(productIs3Piece) || "".equals(productIs3Piece) || productIs3Piece == null) {
				if ("9000101".equals(productCategory)) {
					Map<String, String> ojBodyBackMateMap = optionJacketStandardInfo.getOjBodyBackMateMap();
					String ojBodyBackMate = optionJacketStandardInfo.getOjBodyBackMate();
					bodyLiner = ojBodyBackMateMap.get(ojBodyBackMate);
					bodyLiner = "JACKET：" + bodyLiner;
				} else if ("9000102".equals(productCategory)) {
					Map<String, String> tjBodyBackMateMap = optionJacketTuxedoInfo.getTjBodyBackMateMap();
					String tjBodyBackMate = optionJacketTuxedoInfo.getTjBodyBackMate();
					bodyLiner = tjBodyBackMateMap.get(tjBodyBackMate);
					bodyLiner = "JACKET：" + bodyLiner;
				} else if ("9000103".equals(productCategory)) {
					Map<String, String> wjBodyBackMateMap = optionJacketWashableInfo.getWjBodyBackMateMap();
					String wjBodyBackMate = optionJacketWashableInfo.getWjBodyBackMate();
					bodyLiner = wjBodyBackMateMap.get(wjBodyBackMate);
					bodyLiner = "JACKET：" + bodyLiner;
				}

			} else if ("0009902".equals(productIs3Piece)) {
				if ("9000101".equals(productCategory)) {
					Map<String, String> ojBodyBackMateMap = optionJacketStandardInfo.getOjBodyBackMateMap();
					String ojBodyBackMate = optionJacketStandardInfo.getOjBodyBackMate();
					String jkMateName = ojBodyBackMateMap.get(ojBodyBackMate);
					CoOptionGiletStandardInfo optionGiletStandardInfo = orderCoForm.getCoOptionGiletStandardInfo();
					Map<String, String> ogBackLiningMateMap = optionGiletStandardInfo.getOgBackLiningMateMap();
					String ogBackLiningMate = optionGiletStandardInfo.getOgBackLiningMate();
					String glMateName = ogBackLiningMateMap.get(ogBackLiningMate);
					bodyLiner = "JACKET：" + jkMateName + "<br>GILET：" + glMateName;

				} else if ("9000102".equals(productCategory)) {
					Map<String, String> tjBodyBackMateMap = optionJacketTuxedoInfo.getTjBodyBackMateMap();
					String tjBodyBackMate = optionJacketTuxedoInfo.getTjBodyBackMate();
					String jkMateName = tjBodyBackMateMap.get(tjBodyBackMate);
					CoOptionGiletTuxedoInfo optionGiletTuxedoInfo = orderCoForm.getCoOptionGiletTuxedoInfo();
					Map<String, String> ogBackLiningMateMap = optionGiletTuxedoInfo.getTgBackLiningMateMap();
					String ogBackLiningMate = optionGiletTuxedoInfo.getTgBackLiningMate();
					String glMateName = ogBackLiningMateMap.get(ogBackLiningMate);
					bodyLiner = "JACKET：" + jkMateName + "<br>GILET：" + glMateName;

				} else if ("9000103".equals(productCategory)) {
					Map<String, String> wjBodyBackMateMap = optionJacketWashableInfo.getWjBodyBackMateMap();
					String wjBodyBackMate = optionJacketWashableInfo.getWjBodyBackMate();
					String jkMateName = wjBodyBackMateMap.get(wjBodyBackMate);
					CoOptionGiletWashableInfo optionGiletWashableInfo = orderCoForm.getCoOptionGiletWashableInfo();
					Map<String, String> wgBackLiningMateMap = optionGiletWashableInfo.getWgBackLiningMateMap();
					String wgBackLiningMate = optionGiletWashableInfo.getWgBackLiningMate();
					String glMateName = wgBackLiningMateMap.get(wgBackLiningMate);
					bodyLiner = "JACKET：" + jkMateName + "<br>GILET：" + glMateName;
				}
			}

			if ("9000101".equals(productCategory)) {
				Map<String, String> ojCuffBackMateMap = optionJacketStandardInfo.getOjCuffBackMateMap();
				String ojCuffBackMate = optionJacketStandardInfo.getOjCuffBackMate();
				sleeveLiner = ojCuffBackMateMap.get(ojCuffBackMate);
			} else if ("9000102".equals(productCategory)) {
				Map<String, String> tjCuffBackMateMap = optionJacketTuxedoInfo.getTjCuffBackMateMap();
				String tjCuffBackMate = optionJacketTuxedoInfo.getTjCuffBackMate();
				sleeveLiner = tjCuffBackMateMap.get(tjCuffBackMate);
			} else if ("9000103".equals(productCategory)) {
				Map<String, String> wjCuffBackMateMap = optionJacketWashableInfo.getWjCuffBackMateMap();
				String wjCuffBackMate = optionJacketWashableInfo.getWjCuffBackMate();
				sleeveLiner = wjCuffBackMateMap.get(wjCuffBackMate);
			}

		} else if ("02".equals(productItem)) {
			if ("9000101".equals(productCategory)) {
				CoOptionJacketStandardInfo optionJacketStandardInfo = orderCoForm.getCoOptionJacketStandardInfo();
				Map<String, String> ojBodyBackMateMap = optionJacketStandardInfo.getOjBodyBackMateMap();
				String ojBodyBackMate = optionJacketStandardInfo.getOjBodyBackMate();
				bodyLiner = ojBodyBackMateMap.get(ojBodyBackMate);
				bodyLiner = "JACKET：" + bodyLiner;
				Map<String, String> ojCuffBackMateMap = optionJacketStandardInfo.getOjCuffBackMateMap();
				String ojCuffBackMate = optionJacketStandardInfo.getOjCuffBackMate();
				sleeveLiner = ojCuffBackMateMap.get(ojCuffBackMate);
			} else if ("9000102".equals(productCategory)) {
				CoOptionJacketTuxedoInfo optionJacketTuxedoInfo = orderCoForm.getCoOptionJacketTuxedoInfo();
				Map<String, String> tjBodyBackMateMap = optionJacketTuxedoInfo.getTjBodyBackMateMap();
				String tjBodyBackMate = optionJacketTuxedoInfo.getTjBodyBackMate();
				bodyLiner = tjBodyBackMateMap.get(tjBodyBackMate);
				bodyLiner = "JACKET：" + bodyLiner;
				Map<String, String> tjCuffBackMateMap = optionJacketTuxedoInfo.getTjCuffBackMateMap();
				String tjCuffBackMate = optionJacketTuxedoInfo.getTjCuffBackMate();
				sleeveLiner = tjCuffBackMateMap.get(tjCuffBackMate);
			} else if ("9000103".equals(productCategory)) {
				CoOptionJacketWashableInfo optionJacketWashableInfo = orderCoForm.getCoOptionJacketWashableInfo();
				Map<String, String> wjBodyBackMateMap = optionJacketWashableInfo.getWjBodyBackMateMap();
				String wjBodyBackMate = optionJacketWashableInfo.getWjBodyBackMate();
				bodyLiner = wjBodyBackMateMap.get(wjBodyBackMate);
				bodyLiner = "JACKET：" + bodyLiner;
				Map<String, String> wjCuffBackMateMap = optionJacketWashableInfo.getWjCuffBackMateMap();
				String wjCuffBackMate = optionJacketWashableInfo.getWjCuffBackMate();
				sleeveLiner = wjCuffBackMateMap.get(wjCuffBackMate);
			}
		} else if ("03".equals(productItem)) {

		} else if ("04".equals(productItem)) {
			if ("9000101".equals(productCategory)) {
				CoOptionGiletStandardInfo optionGiletStandardInfo = orderCoForm.getCoOptionGiletStandardInfo();
				Map<String, String> ogBackLiningMateMap = optionGiletStandardInfo.getOgBackLiningMateMap();
				String ogBackLiningMate = optionGiletStandardInfo.getOgBackLiningMate();
				String glMateName = ogBackLiningMateMap.get(ogBackLiningMate);
				bodyLiner = "GILET：" + glMateName;

			} else if ("9000102".equals(productCategory)) {
				CoOptionGiletTuxedoInfo optionGiletTuxedoInfo = orderCoForm.getCoOptionGiletTuxedoInfo();
				Map<String, String> ogBackLiningMateMap = optionGiletTuxedoInfo.getTgBackLiningMateMap();
				String ogBackLiningMate = optionGiletTuxedoInfo.getTgBackLiningMate();
				String glMateName = ogBackLiningMateMap.get(ogBackLiningMate);
				bodyLiner = "GILET：" + glMateName;

			} else if ("9000103".equals(productCategory)) {
				CoOptionGiletWashableInfo optionGiletWashableInfo = orderCoForm.getCoOptionGiletWashableInfo();
				Map<String, String> wgBackLiningMateMap = optionGiletWashableInfo.getWgBackLiningMateMap();
				String wgBackLiningMate = optionGiletWashableInfo.getWgBackLiningMate();
				String glMateName = wgBackLiningMateMap.get(wgBackLiningMate);
				bodyLiner = "GILET：" + glMateName;
			}

		} else if ("05".equals(productItem)) {

		} else if ("06".equals(productItem)) {
			CoOptionCoatStandardInfo optionCoatStandardInfo = orderCoForm.getCoOptionCoatStandardInfo();
			Map<String, String> ocBodyBackMateMap = optionCoatStandardInfo.getOcBodyBackMateMap();
			String ocBodyBackMate = optionCoatStandardInfo.getOcBodyBackMate();
			bodyLiner = ocBodyBackMateMap.get(ocBodyBackMate);
			bodyLiner = "COAT：" + bodyLiner;
			Map<String, String> ocCuffBackMateMap = optionCoatStandardInfo.getOcCuffBackMateMap();
			String ocCuffBackMate = optionCoatStandardInfo.getOcCuffBackMate();
			sleeveLiner = ocCuffBackMateMap.get(ocCuffBackMate);
		}
		productCompos.setBodyLiner(bodyLiner);
		productCompos.setSleeveLiner(sleeveLiner);
		return productCompos;
	}

	public void pantsDefaultValue(OrderCoForm orderCoForm) {
		// 標準
		CoOptionPantsStandardInfo optionPantsStandardInfo = orderCoForm.getCoOptionPantsStandardInfo();
		// PANTSモデル
		optionPantsStandardInfo.setOpPantsModel("");
		// タック
		optionPantsStandardInfo.setOpTack(OptionCodeKeys.PT_0000101);
		// 膝裏
		optionPantsStandardInfo.setOpKneeBack(OptionCodeKeys.PT_0000201);
		// 膝裏素材
		optionPantsStandardInfo.setOpKneeBackMate(OptionCodeKeys.PT_0000301);
		// フロント仕様
		optionPantsStandardInfo.setOpFrontSpec(OptionCodeKeys.PT_0000401);
		// パンチェリーナ
		optionPantsStandardInfo.setOpPancherina(OptionCodeKeys.PT_0000501);
		// アジャスター仕様
		optionPantsStandardInfo.setOpAdjuster(OptionCodeKeys.PT_0000601);
		// ベルトループ
		optionPantsStandardInfo.setOpBeltLoop(OptionCodeKeys.PT_0000701);
		optionPantsStandardInfo.setOpBeltLoopPlace(null);
		// ピンループ
		optionPantsStandardInfo.setOpPinLoop(OptionCodeKeys.PT_0000901);
		// 脇ポケット
		optionPantsStandardInfo.setOpSidePkt(OptionCodeKeys.PT_0001002);
		// 忍びポケット
		optionPantsStandardInfo.setOpSinobiPkt(OptionCodeKeys.PT_0001104);
		// コインポケット
		optionPantsStandardInfo.setOpCoinPkt(OptionCodeKeys.PT_0001201);
		// フラップ付コインポケット
		optionPantsStandardInfo.setOpFlapCoinPkt(OptionCodeKeys.PT_0001301);
		// 上前ピスポケット
		optionPantsStandardInfo.setOpPisPktUf(OptionCodeKeys.PT_0001401);
		// 下前ピスポケット
		optionPantsStandardInfo.setOpPisPktDf(OptionCodeKeys.PT_0001501);
		// Vカット
		optionPantsStandardInfo.setOpVCut(OptionCodeKeys.PT_0001602);
		// 裾上げ
		optionPantsStandardInfo.setOpHemUp(OptionCodeKeys.PT_0001701);
		// ダブル幅
		optionPantsStandardInfo.setOpDoubleWide(OptionCodeKeys.PT_4);
		// ステッチ種類
		optionPantsStandardInfo.setOpStitch(OptionCodeKeys.PT_0001904);
		// ステッチ箇所変更
		optionPantsStandardInfo.setOpStitchModify(OptionCodeKeys.PT_0002001);
		optionPantsStandardInfo.setOpStitchModifyPlace(null);
		// ダブルステッチ
		optionPantsStandardInfo.setOpDStitch(OptionCodeKeys.PT_0002201);
		optionPantsStandardInfo.setOpDStitchPlace(null);
		// AMF色指定
		optionPantsStandardInfo.setOpAmfColor(OptionCodeKeys.PT_0002401);
		optionPantsStandardInfo.setOpAmfColorPlace(null);
		optionPantsStandardInfo.setOpAmfAllColor(null);
		// ボタンホール色指定
		optionPantsStandardInfo.setOpBhColor(OptionCodeKeys.PT_0002701);
		optionPantsStandardInfo.setOpBhColorPlace(null);
		optionPantsStandardInfo.setOpBhAllColor(null);
		// ボタン付け糸指定
		optionPantsStandardInfo.setOpByColor(OptionCodeKeys.PT_0003001);
		optionPantsStandardInfo.setOpByColorPlace(null);
		optionPantsStandardInfo.setOpByAllColor(null);
		// 釦素材
		optionPantsStandardInfo.setOpButton(OptionCodeKeys.PT_3000800);
		
		optionPantsStandardInfo.setOpBtnMateStkNo(null);
		// サスペンダー釦
		optionPantsStandardInfo.setOpSuspenderBtn(OptionCodeKeys.PT_0003501);
		// シック大（股補強）
		optionPantsStandardInfo.setOpThick(OptionCodeKeys.PT_0004101);
		// エイト（滑り止め）
		optionPantsStandardInfo.setOpEight(OptionCodeKeys.PT_0003601);
		// 形状記憶
		optionPantsStandardInfo.setOpShapeMemory(OptionCodeKeys.PT_0003701);

		// タキシード
		CoOptionPantsTuxedoInfo optionPantsTuxedoInfo = orderCoForm.getCoOptionPantsTuxedoInfo();
		// PANTSモデル
		optionPantsTuxedoInfo.setTpPantsModel("");
		// タック
		optionPantsTuxedoInfo.setTpTack(OptionCodeKeys.PT_0000101);
		// 膝裏
		optionPantsTuxedoInfo.setTpKneeBack(OptionCodeKeys.PT_0000201);
		// 膝裏素材
		optionPantsTuxedoInfo.setTpKneeBackMate(OptionCodeKeys.PT_0000301);
		// フロント仕様
		optionPantsTuxedoInfo.setTpFrontSpec(OptionCodeKeys.PT_0000401);
		// パンチェリーナ
		optionPantsTuxedoInfo.setTpPancherina(OptionCodeKeys.PT_0000501);
		// アジャスター仕様
		optionPantsTuxedoInfo.setTpAdjuster(OptionCodeKeys.PT_0000601);
		// ベルトループ
		optionPantsTuxedoInfo.setTpBeltLoop(OptionCodeKeys.PT_0000701);
		optionPantsTuxedoInfo.setTpBeltLoopPlace(null);
		// ピンループ
		optionPantsTuxedoInfo.setTpPinLoop(OptionCodeKeys.PT_0000901);
		// 脇ポケット
		optionPantsTuxedoInfo.setTpSidePkt(OptionCodeKeys.PT_0001002);
		// 忍びポケット
		optionPantsTuxedoInfo.setTpSinobiPkt(OptionCodeKeys.PT_0001104);
		// コインポケット
		optionPantsTuxedoInfo.setTpCoinPkt(OptionCodeKeys.PT_0001201);
		// フラップ付コインポケット
		optionPantsTuxedoInfo.setTpFlapCoinPkt(OptionCodeKeys.PT_0001301);
		// 上前ピスポケット
		optionPantsTuxedoInfo.setTpPisPktUf(OptionCodeKeys.PT_0001401);
		// 下前ピスポケット
		optionPantsTuxedoInfo.setTpPisPktDf(OptionCodeKeys.PT_0001501);
		// Vカット
		optionPantsTuxedoInfo.setTpVCut(OptionCodeKeys.PT_0001602);
		// 裾上げ
		optionPantsTuxedoInfo.setTpHemUp(OptionCodeKeys.PT_0001701);
		// ダブル幅
		optionPantsTuxedoInfo.setTpDoubleWide(OptionCodeKeys.PT_4);
		// ステッチ種類
		optionPantsTuxedoInfo.setTpStitch(OptionCodeKeys.PT_0001903);
		// ボタンホール色指定
		optionPantsTuxedoInfo.setTpBhColor(OptionCodeKeys.PT_0002701);
		optionPantsTuxedoInfo.setTpBhColorPlace(null);
		optionPantsTuxedoInfo.setTpBhAllColor(null);
		// ボタン付け糸指定
		optionPantsTuxedoInfo.setTpByColor(OptionCodeKeys.PT_0003001);
		optionPantsTuxedoInfo.setTpByColorPlace(null);
		optionPantsTuxedoInfo.setTpByAllColor(null);
		// 釦素材
		optionPantsTuxedoInfo.setTpButton(OptionCodeKeys.PT_3000800);
		
		optionPantsTuxedoInfo.setTpBtnMateStkNo(null);
		// サスペンダー釦
		optionPantsTuxedoInfo.setTpSuspenderBtn(OptionCodeKeys.PT_0003501);
		// シック大（股補強）
		optionPantsTuxedoInfo.setTpThick(OptionCodeKeys.PT_0004101);
		// エイト（滑り止め）
		optionPantsTuxedoInfo.setTpEight(OptionCodeKeys.PT_0003601);
		// 形状記憶
		optionPantsTuxedoInfo.setTpShapeMemory(OptionCodeKeys.PT_0003701);
		// 側章
		optionPantsTuxedoInfo.setTpSideStripe(OptionCodeKeys.PT_0003902);
		// 側章幅
		optionPantsTuxedoInfo.setTpSideStripeWidth(OptionCodeKeys.PT_0004001);

		// ウォッシャブル
		CoOptionPantsWashableInfo optionPantsWashableInfo = orderCoForm.getCoOptionPantsWashableInfo();
		// PANTSモデル
		optionPantsWashableInfo.setWpPantsModel("");
		// タック
		optionPantsWashableInfo.setWpTack(OptionCodeKeys.PT_0000101);
		// 膝裏
		optionPantsWashableInfo.setWpKneeBack(OptionCodeKeys.PT_0000201);
		// 膝裏素材
		optionPantsWashableInfo.setWpKneeBackMate(OptionCodeKeys.PT_0000301);
		// フロント仕様
		optionPantsWashableInfo.setWpFrontSpec(OptionCodeKeys.PT_0000401);
		// パンチェリーナ
		optionPantsWashableInfo.setWpPancherina(OptionCodeKeys.PT_0000501);
		// アジャスター仕様
		optionPantsWashableInfo.setWpAdjuster(OptionCodeKeys.PT_0000601);
		// ベルトループ
		optionPantsWashableInfo.setWpBeltLoop(OptionCodeKeys.PT_0000701);
		optionPantsWashableInfo.setWpBeltLoopPlace(null);
		// ピンループ
		optionPantsWashableInfo.setWpPinLoop(OptionCodeKeys.PT_0000901);
		// 脇ポケット
		optionPantsWashableInfo.setWpSidePkt(OptionCodeKeys.PT_0001002);
		// 忍びポケット
		optionPantsWashableInfo.setWpSinobiPkt(OptionCodeKeys.PT_0001104);
		// コインポケット
		optionPantsWashableInfo.setWpCoinPkt(OptionCodeKeys.PT_0001201);
		// フラップ付コインポケット
		optionPantsWashableInfo.setWpFlapCoinPkt(OptionCodeKeys.PT_0001301);
		// 上前ピスポケット
		optionPantsWashableInfo.setWpPisPktUf(OptionCodeKeys.PT_0001401);
		// 下前ピスポケット
		optionPantsWashableInfo.setWpPisPktDf(OptionCodeKeys.PT_0001501);
		// Vカット
		optionPantsWashableInfo.setWpVCut(OptionCodeKeys.PT_0001602);
		// 裾上げ
		optionPantsWashableInfo.setWpHemUp(OptionCodeKeys.PT_0001701);
		// ダブル幅
		optionPantsWashableInfo.setWpDoubleWide(OptionCodeKeys.PT_4);
		// ステッチ種類
		optionPantsWashableInfo.setWpStitch(OptionCodeKeys.PT_0001901);
		// ステッチ箇所変更
		optionPantsWashableInfo.setWpStitchModify(OptionCodeKeys.PT_0002001);
		optionPantsWashableInfo.setWpStitchModifyPlace(null);
		// ダブルステッチ
		optionPantsWashableInfo.setWpDStitch(OptionCodeKeys.PT_0002201);
		optionPantsWashableInfo.setWpDStitchPlace(null);
		// AMF色指定
		optionPantsWashableInfo.setWpAmfColor(OptionCodeKeys.PT_0002401);
		optionPantsWashableInfo.setWpAmfColorPlace(null);
		optionPantsWashableInfo.setWpAmfAllColor(null);
		// ボタンホール色指定
		optionPantsWashableInfo.setWpBhColor(OptionCodeKeys.PT_0002701);
		optionPantsWashableInfo.setWpBhColorPlace(null);
		optionPantsWashableInfo.setWpBhAllColor(null);
		// ボタン付け糸指定
		optionPantsWashableInfo.setWpByColor(OptionCodeKeys.PT_0003001);
		optionPantsWashableInfo.setWpByColorPlace(null);
		optionPantsWashableInfo.setWpByAllColor(null);
		// 釦素材
		optionPantsWashableInfo.setWpButton(OptionCodeKeys.PT_3000800);
		
		optionPantsWashableInfo.setWpBtnMateStkNo(null);
		// サスペンダー釦
		optionPantsWashableInfo.setWpSuspenderBtn(OptionCodeKeys.PT_0003501);
		// シック大（股補強）
		optionPantsWashableInfo.setWpThick(OptionCodeKeys.PT_0004101);
		// エイト（滑り止め）
		optionPantsWashableInfo.setWpEight(OptionCodeKeys.PT_0003601);
		// 形状記憶
		optionPantsWashableInfo.setWpShapeMemory(OptionCodeKeys.PT_0003701);

	}

	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> tuxedoJkServelItemShow(OrderCoForm orderCoForm) {

		Map<String, String> jacketCompositeProjectsMap = new HashMap<String, String>();
		// ボタンホール色指定箇所
		String tjBhColor = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor());
		String tjBhColorYes = "有り";
		if(tjBhColorYes.equals(tjBhColor)) {
			String tjBhColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace1());
			String tjBhColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace2());
			String tjBhColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace3());
			String tjBhColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace4());
			String tjBhColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace5());
			String tjBhColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace6());
			String tjBhColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace7());
			String tjBhColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace8());
			String tjBhColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace9());
			String tjBhColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace10());
			String tjBhColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace11());
			String tjBhColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace12());
			String tjBhColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace13());
			String tjBhColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace14());
			String tjBhColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace15());
			String tjBhColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace16());
			String tjBhColorPlace17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace17());

			String tjBhColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor1());
			String tjBhColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor2());
			String tjBhColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor3());
			String tjBhColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor4());
			String tjBhColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor5());
			String tjBhColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor6());
			String tjBhColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor7());
			String tjBhColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor8());
			String tjBhColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor9());
			String tjBhColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor10());
			String tjBhColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor11());
			String tjBhColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor12());
			String tjBhColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor13());
			String tjBhColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor14());
			String tjBhColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor15());
			String tjBhColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor16());
			String tjBhColor17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor17());

			Map<String, String> tjBhColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace1, tjBhColor1);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace2, tjBhColor2);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace3, tjBhColor3);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace4, tjBhColor4);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace5, tjBhColor5);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace6, tjBhColor6);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace7, tjBhColor7);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace8, tjBhColor8);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace9, tjBhColor9);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace10, tjBhColor10);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace11, tjBhColor11);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace12, tjBhColor12);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace13, tjBhColor13);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace14, tjBhColor14);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace15, tjBhColor15);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace16, tjBhColor16);
			tjBhColorPlaceAndColorMap.put(tjBhColorPlace17, tjBhColor17);
			StringBuffer tjBhColorPlaceAndColorString = new StringBuffer();
			tjBhColorPlaceAndColorString.append(tjBhColor + "　　");
			int tjBhColorPlaceAndColorFlag = 0;
			for (String key : tjBhColorPlaceAndColorMap.keySet()) {
				if (key != null) {

					String value = tjBhColorPlaceAndColorMap.get(key);
					if (tjBhColorPlaceAndColorFlag == 0 || tjBhColorPlaceAndColorFlag % 3 != 0) {
						tjBhColorPlaceAndColorString = tjBhColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (tjBhColorPlaceAndColorFlag != 0 && tjBhColorPlaceAndColorFlag % 3 == 0) {
						tjBhColorPlaceAndColorString = tjBhColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					tjBhColorPlaceAndColorFlag += 1;
				}
			}

			jacketCompositeProjectsMap.put("tjBhColorPlaceAndColor", tjBhColorPlaceAndColorString.toString());
		}
		else {
			jacketCompositeProjectsMap.put("tjBhColorPlaceAndColor", tjBhColor);
		}

		// ボタン付け糸指定
		String tjByColor = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor());
		String tjByColorYes = "有り";
		
		if(tjByColorYes.equals(tjByColor)) {
			String tjByColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace1());
			String tjByColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace2());
			String tjByColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace3());
			String tjByColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace4());
			String tjByColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace5());
			String tjByColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace6());
			String tjByColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace7());
			String tjByColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace8());
			String tjByColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace9());
			String tjByColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace10());
			String tjByColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace11());
			String tjByColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace12());
			String tjByColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace13());
			String tjByColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace14());
			String tjByColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace15());
			String tjByColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace16());

			String tjByColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor1());
			String tjByColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor2());
			String tjByColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor3());
			String tjByColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor4());
			String tjByColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor5());
			String tjByColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor6());
			String tjByColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor7());
			String tjByColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor8());
			String tjByColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor9());
			String tjByColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor10());
			String tjByColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor11());
			String tjByColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor12());
			String tjByColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor13());
			String tjByColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor14());
			String tjByColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor15());
			String tjByColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap()
					.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor16());

			Map<String, String> tjByColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			tjByColorPlaceAndColorMap.put(tjByColorPlace1, tjByColor1);
			tjByColorPlaceAndColorMap.put(tjByColorPlace2, tjByColor2);
			tjByColorPlaceAndColorMap.put(tjByColorPlace3, tjByColor3);
			tjByColorPlaceAndColorMap.put(tjByColorPlace4, tjByColor4);
			tjByColorPlaceAndColorMap.put(tjByColorPlace5, tjByColor5);
			tjByColorPlaceAndColorMap.put(tjByColorPlace6, tjByColor6);
			tjByColorPlaceAndColorMap.put(tjByColorPlace7, tjByColor7);
			tjByColorPlaceAndColorMap.put(tjByColorPlace8, tjByColor8);
			tjByColorPlaceAndColorMap.put(tjByColorPlace9, tjByColor9);
			tjByColorPlaceAndColorMap.put(tjByColorPlace10, tjByColor10);
			tjByColorPlaceAndColorMap.put(tjByColorPlace11, tjByColor11);
			tjByColorPlaceAndColorMap.put(tjByColorPlace12, tjByColor12);
			tjByColorPlaceAndColorMap.put(tjByColorPlace13, tjByColor13);
			tjByColorPlaceAndColorMap.put(tjByColorPlace14, tjByColor14);
			tjByColorPlaceAndColorMap.put(tjByColorPlace15, tjByColor15);
			tjByColorPlaceAndColorMap.put(tjByColorPlace16, tjByColor16);

			StringBuffer tjByColorPlaceAndColorString = new StringBuffer();
			tjByColorPlaceAndColorString.append(tjByColor + "　　");
			int tjByColorPlaceAndColorFlag = 0;
			for (String key : tjByColorPlaceAndColorMap.keySet()) {
				if (key != null) {

					String value = tjByColorPlaceAndColorMap.get(key);
					if (tjByColorPlaceAndColorFlag == 0 || tjByColorPlaceAndColorFlag % 3 != 0) {
						tjByColorPlaceAndColorString = tjByColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (tjByColorPlaceAndColorFlag != 0 && tjByColorPlaceAndColorFlag % 3 == 0) {
						tjByColorPlaceAndColorString = tjByColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					tjByColorPlaceAndColorFlag += 1;
				}
			}

			jacketCompositeProjectsMap.put("tjByColorPlaceAndColor", tjByColorPlaceAndColorString.toString());
		}
		else {
			jacketCompositeProjectsMap.put("tjByColorPlaceAndColor", tjByColor);
		}

		return jacketCompositeProjectsMap;
	}

	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> tuxedoPtServelItemShow(OrderCoForm orderCoForm) {
		Map<String, String> pantsCompositeProjectsMap = new HashMap<String, String>();
		// ベルトループ
		String tpBeltLoop = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoop());
		String tpBeltLoopYes = "有り";
		
		if(tpBeltLoopYes.equals(tpBeltLoop)) {
			String tpBeltLoopPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace1());
			String tpBeltLoopPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace2());
			String tpBeltLoopPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace3());
			String tpBeltLoopPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace4());
			String tpBeltLoopPlace5 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace5());
			String tpBeltLoopPlace6 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace6());
			String tpBeltLoopPlace7 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace7());

			List<String> tpBeltLoopsList = new ArrayList<String>();
			tpBeltLoopsList.add(tpBeltLoopPlace1);
			tpBeltLoopsList.add(tpBeltLoopPlace2);
			tpBeltLoopsList.add(tpBeltLoopPlace3);
			tpBeltLoopsList.add(tpBeltLoopPlace4);
			tpBeltLoopsList.add(tpBeltLoopPlace5);
			tpBeltLoopsList.add(tpBeltLoopPlace6);
			tpBeltLoopsList.add(tpBeltLoopPlace7);
			tpBeltLoopsList.removeAll(Collections.singleton(null));
			StringBuffer tpBeltLoopPlace = new StringBuffer();
			tpBeltLoopPlace = tpBeltLoopPlace.append(tpBeltLoop + "　　");
			if(!tpBeltLoopsList.isEmpty()) {
				for(String tpBeltLoopValue : tpBeltLoopsList) {
					tpBeltLoopPlace = tpBeltLoopPlace.append(tpBeltLoopValue + "　　");
				}
			}

			pantsCompositeProjectsMap.put("tpBeltLoopPlace", tpBeltLoopPlace.toString());
		}
		else {
			pantsCompositeProjectsMap.put("tpBeltLoopPlace", tpBeltLoop);
		}
		
		// ボタンホール色指定
		String tpBhColor = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor());
		String tpBhColorYes = "有り";
		
		if(tpBhColorYes.equals(tpBhColor)) {
			String tpBhColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace1());
			String tpBhColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace2());
			String tpBhColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace3());
			String tpBhColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace4());

			String tpBhColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorsMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor1());
			String tpBhColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorsMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor2());
			String tpBhColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorsMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor3());
			String tpBhColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorsMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor4());

			Map<String, String> tpBhColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			tpBhColorPlaceAndColorMap.put(tpBhColorPlace1, tpBhColor1);
			tpBhColorPlaceAndColorMap.put(tpBhColorPlace2, tpBhColor2);
			tpBhColorPlaceAndColorMap.put(tpBhColorPlace3, tpBhColor3);
			tpBhColorPlaceAndColorMap.put(tpBhColorPlace4, tpBhColor4);

			StringBuffer tpBhColorPlaceAndColorString = new StringBuffer();
			tpBhColorPlaceAndColorString.append(tpBhColor + "　　");
			int tpBhColorPlaceAndColorFlag = 0;
			for (String key : tpBhColorPlaceAndColorMap.keySet()) {
				if (key != null) {

					String value = tpBhColorPlaceAndColorMap.get(key);
					if (tpBhColorPlaceAndColorFlag == 0 || tpBhColorPlaceAndColorFlag % 3 != 0) {
						tpBhColorPlaceAndColorString = tpBhColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (tpBhColorPlaceAndColorFlag != 0 && tpBhColorPlaceAndColorFlag % 3 == 0) {
						tpBhColorPlaceAndColorString = tpBhColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					tpBhColorPlaceAndColorFlag += 1;
				}
			}

			pantsCompositeProjectsMap.put("tpBhColorPlaceAndColor", tpBhColorPlaceAndColorString.toString());
		}
		else {
			pantsCompositeProjectsMap.put("tpBhColorPlaceAndColor", tpBhColor);
		}
		
		// ボタン付け糸指定
		String tpByColor = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor());
		String tpByColorYes = "有り";
		
		if(tpByColorYes.equals(tpByColor)) {
			String tpByColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace1());
			String tpByColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace2());
			String tpByColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace3());
			String tpByColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace4());

			String tpByColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorsMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor1());
			String tpByColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorsMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor2());
			String tpByColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorsMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor3());
			String tpByColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorsMap()
					.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor4());

			Map<String, String> tpByColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			tpByColorPlaceAndColorMap.put(tpByColorPlace1, tpByColor1);
			tpByColorPlaceAndColorMap.put(tpByColorPlace2, tpByColor2);
			tpByColorPlaceAndColorMap.put(tpByColorPlace3, tpByColor3);
			tpByColorPlaceAndColorMap.put(tpByColorPlace4, tpByColor4);

			StringBuffer tpByColorPlaceAndColorString = new StringBuffer();
			tpByColorPlaceAndColorString.append(tpByColor + "　　");
			int tpByColorPlaceAndColorFlag = 0;
			for (String key : tpByColorPlaceAndColorMap.keySet()) {
				if (key != null) {

					String value = tpByColorPlaceAndColorMap.get(key);
					if (tpByColorPlaceAndColorFlag == 0 || tpByColorPlaceAndColorFlag % 3 != 0) {
						tpByColorPlaceAndColorString = tpByColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (tpByColorPlaceAndColorFlag != 0 && tpByColorPlaceAndColorFlag % 3 == 0) {
						tpByColorPlaceAndColorString = tpByColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					tpByColorPlaceAndColorFlag += 1;
				}
			}

			pantsCompositeProjectsMap.put("tpByColorPlaceAndColor", tpByColorPlaceAndColorString.toString());
		}
		else {
			pantsCompositeProjectsMap.put("tpByColorPlaceAndColor", tpByColor);
		}

		return pantsCompositeProjectsMap;
	}

	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> tuxedoGlServelItemShow(OrderCoForm orderCoForm) {
		Map<String, String> giletCompositeProjectsMap = new HashMap<String, String>();

		// ボタンホール色指定
		String tgBhColor = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor());
		String tgBhColorYes = "有り";
		
		if(tgBhColorYes.equals(tgBhColor)) {
			String tgBhColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace1());
			String tgBhColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace2());
			String tgBhColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace3());
			String tgBhColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace4());
			String tgBhColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace5());
			String tgBhColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace6());

			String tgBhColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor1());
			String tgBhColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor2());
			String tgBhColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor3());
			String tgBhColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor4());
			String tgBhColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor5());
			String tgBhColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor6());

			Map<String, String> tgBhColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			tgBhColorPlaceAndColorMap.put(tgBhColorPlace1, tgBhColor1);
			tgBhColorPlaceAndColorMap.put(tgBhColorPlace2, tgBhColor2);
			tgBhColorPlaceAndColorMap.put(tgBhColorPlace3, tgBhColor3);
			tgBhColorPlaceAndColorMap.put(tgBhColorPlace4, tgBhColor4);
			tgBhColorPlaceAndColorMap.put(tgBhColorPlace5, tgBhColor5);
			tgBhColorPlaceAndColorMap.put(tgBhColorPlace6, tgBhColor6);

			StringBuffer tgBhColorPlaceAndColorString = new StringBuffer();
			tgBhColorPlaceAndColorString.append(tgBhColor + "　　");
			int tgBhColorPlaceAndColorFlag = 0;
			for (String key : tgBhColorPlaceAndColorMap.keySet()) {
				if (key != null) {

					String value = tgBhColorPlaceAndColorMap.get(key);
					if (tgBhColorPlaceAndColorFlag == 0 || tgBhColorPlaceAndColorFlag % 3 != 0) {
						tgBhColorPlaceAndColorString = tgBhColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (tgBhColorPlaceAndColorFlag != 0 && tgBhColorPlaceAndColorFlag % 3 == 0) {
						tgBhColorPlaceAndColorString = tgBhColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					tgBhColorPlaceAndColorFlag += 1;
				}
			}
			giletCompositeProjectsMap.put("tgBhColorPlaceAndColor", tgBhColorPlaceAndColorString.toString());
		}
		else {
			giletCompositeProjectsMap.put("tgBhColorPlaceAndColor", tgBhColor);
		}
		
		// ボタン付け糸指定
		String tgByColor = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor());
		String tgByColorYes = "有り";
		
		if(tgByColorYes.equals(tgByColor)) {
			String tgByColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace1());
			String tgByColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace2());
			String tgByColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace3());
			String tgByColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace4());
			String tgByColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace5());
			String tgByColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace6());
			String tgByColorPlace7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace7());
			String tgByColorPlace8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace8());
			String tgByColorPlace9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace9());
			String tgByColorPlace10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace10());

			String tgByColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor1());
			String tgByColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor2());
			String tgByColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor3());
			String tgByColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor4());
			String tgByColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor5());
			String tgByColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor6());
			String tgByColor7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor7());
			String tgByColor8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor8());
			String tgByColor9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor9());
			String tgByColor10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor10());

			Map<String, String> tgByColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			tgByColorPlaceAndColorMap.put(tgByColorPlace1, tgByColor1);
			tgByColorPlaceAndColorMap.put(tgByColorPlace2, tgByColor2);
			tgByColorPlaceAndColorMap.put(tgByColorPlace3, tgByColor3);
			tgByColorPlaceAndColorMap.put(tgByColorPlace4, tgByColor4);
			tgByColorPlaceAndColorMap.put(tgByColorPlace5, tgByColor5);
			tgByColorPlaceAndColorMap.put(tgByColorPlace6, tgByColor6);
			tgByColorPlaceAndColorMap.put(tgByColorPlace7, tgByColor7);
			tgByColorPlaceAndColorMap.put(tgByColorPlace8, tgByColor8);
			tgByColorPlaceAndColorMap.put(tgByColorPlace9, tgByColor9);
			tgByColorPlaceAndColorMap.put(tgByColorPlace10, tgByColor10);

			StringBuffer tgByColorPlaceAndColorString = new StringBuffer();
			tgByColorPlaceAndColorString.append(tgByColor + "　　");
			int tgByColorPlaceAndColorFlag = 0;
			for (String key : tgByColorPlaceAndColorMap.keySet()) {
				if (key != null) {

					String value = tgByColorPlaceAndColorMap.get(key);
					if (tgByColorPlaceAndColorFlag == 0 || tgByColorPlaceAndColorFlag % 3 != 0) {
						tgByColorPlaceAndColorString = tgByColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (tgByColorPlaceAndColorFlag != 0 && tgByColorPlaceAndColorFlag % 3 == 0) {
						tgByColorPlaceAndColorString = tgByColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					tgByColorPlaceAndColorFlag += 1;
				}
			}

			giletCompositeProjectsMap.put("tgByColorPlaceAndColor", tgByColorPlaceAndColorString.toString());
		}
		else {
			giletCompositeProjectsMap.put("tgByColorPlaceAndColor", tgByColor);
		}

		return giletCompositeProjectsMap;
	}

	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> tuxedoPt2ServelItemShow(OrderCoForm orderCoForm) {
		Map<String, String> pants2CompositeProjectsMap = new HashMap<String, String>();
		// ベルトループ
		String tp2BeltLoop = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoop());
		String tp2BeltLoopYes = "有り";
		
		if(tp2BeltLoopYes.equals(tp2BeltLoop)) {
			String tp2BeltLoopPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace1());
			String tp2BeltLoopPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace2());
			String tp2BeltLoopPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace3());
			String tp2BeltLoopPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace4());
			String tp2BeltLoopPlace5 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace5());
			String tp2BeltLoopPlace6 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace6());
			String tp2BeltLoopPlace7 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace7());

			List<String> tp2BeltLoopsList = new ArrayList<String>();
			tp2BeltLoopsList.add(tp2BeltLoopPlace1);
			tp2BeltLoopsList.add(tp2BeltLoopPlace2);
			tp2BeltLoopsList.add(tp2BeltLoopPlace3);
			tp2BeltLoopsList.add(tp2BeltLoopPlace4);
			tp2BeltLoopsList.add(tp2BeltLoopPlace5);
			tp2BeltLoopsList.add(tp2BeltLoopPlace6);
			tp2BeltLoopsList.add(tp2BeltLoopPlace7);
			tp2BeltLoopsList.removeAll(Collections.singleton(null));
			StringBuffer tp2BeltLoopPlace = new StringBuffer();
			tp2BeltLoopPlace = tp2BeltLoopPlace.append(tp2BeltLoop + "　　");
			if(!tp2BeltLoopsList.isEmpty()) {
				for(String tp2BeltLoopValue : tp2BeltLoopsList) {
					tp2BeltLoopPlace = tp2BeltLoopPlace.append(tp2BeltLoopValue + "　　");
				}
			}

			pants2CompositeProjectsMap.put("tp2BeltLoopPlace", tp2BeltLoopPlace.toString());
		}
		else {
			pants2CompositeProjectsMap.put("tp2BeltLoopPlace", tp2BeltLoop);
		}
		
		// ボタンホール色指定
		String tp2BhColor = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor());
		String tp2BhColorYes = "有り"; 
		
		if(tp2BhColorYes.equals(tp2BhColor)) {
			String tp2BhColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace1());
			String tp2BhColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace2());
			String tp2BhColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace3());
			String tp2BhColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace4());

			String tp2BhColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor1());
			String tp2BhColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor2());
			String tp2BhColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor3());
			String tp2BhColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor4());

			Map<String, String> tp2BhColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			tp2BhColorPlaceAndColorMap.put(tp2BhColorPlace1, tp2BhColor1);
			tp2BhColorPlaceAndColorMap.put(tp2BhColorPlace2, tp2BhColor2);
			tp2BhColorPlaceAndColorMap.put(tp2BhColorPlace3, tp2BhColor3);
			tp2BhColorPlaceAndColorMap.put(tp2BhColorPlace4, tp2BhColor4);

			StringBuffer tp2BhColorPlaceAndColorString = new StringBuffer();
			tp2BhColorPlaceAndColorString.append(tp2BhColor + "　　");
			int tp2BhColorPlaceAndColorFlag = 0;
			for (String key : tp2BhColorPlaceAndColorMap.keySet()) {
				if (key != null) {

					String value = tp2BhColorPlaceAndColorMap.get(key);
					if (tp2BhColorPlaceAndColorFlag == 0 || tp2BhColorPlaceAndColorFlag % 3 != 0) {
						tp2BhColorPlaceAndColorString = tp2BhColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (tp2BhColorPlaceAndColorFlag != 0 && tp2BhColorPlaceAndColorFlag % 3 == 0) {
						tp2BhColorPlaceAndColorString = tp2BhColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					tp2BhColorPlaceAndColorFlag += 1;
				}
			}
			pants2CompositeProjectsMap.put("tp2BhColorPlaceAndColor", tp2BhColorPlaceAndColorString.toString());
		}
		else {
			pants2CompositeProjectsMap.put("tp2BhColorPlaceAndColor", tp2BhColor);
		}
		
		// ボタン付け糸指定
		String tp2ByColor = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor());
		String tp2ByColorYes = "有り";
		
		if(tp2ByColorYes.equals(tp2ByColor)) {
			String tp2ByColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace1());
			String tp2ByColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace2());
			String tp2ByColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace3());
			String tp2ByColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace4());

			String tp2ByColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor1());
			String tp2ByColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor2());
			String tp2ByColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor3());
			String tp2ByColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor4());

			Map<String, String> tp2ByColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			tp2ByColorPlaceAndColorMap.put(tp2ByColorPlace1, tp2ByColor1);
			tp2ByColorPlaceAndColorMap.put(tp2ByColorPlace2, tp2ByColor2);
			tp2ByColorPlaceAndColorMap.put(tp2ByColorPlace3, tp2ByColor3);
			tp2ByColorPlaceAndColorMap.put(tp2ByColorPlace4, tp2ByColor4);

			StringBuffer tp2ByColorPlaceAndColorString = new StringBuffer();
			tp2ByColorPlaceAndColorString.append(tp2ByColor + "　　");
			int tp2ByColorPlaceAndColorFlag = 0;
			for (String key : tp2ByColorPlaceAndColorMap.keySet()) {
				if (key != null) {

					String value = tp2ByColorPlaceAndColorMap.get(key);
					if (tp2ByColorPlaceAndColorFlag == 0 || tp2ByColorPlaceAndColorFlag % 3 != 0) {
						tp2ByColorPlaceAndColorString = tp2ByColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (tp2ByColorPlaceAndColorFlag != 0 && tp2ByColorPlaceAndColorFlag % 3 == 0) {
						tp2ByColorPlaceAndColorString = tp2ByColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					tp2ByColorPlaceAndColorFlag += 1;
				}
			}
			pants2CompositeProjectsMap.put("tp2ByColorPlaceAndColor", tp2ByColorPlaceAndColorString.toString());
		}
		else {
			pants2CompositeProjectsMap.put("tp2ByColorPlaceAndColor", tp2ByColor);
		}

		return pants2CompositeProjectsMap;
	}

	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> washablePtServelItemShow(OrderCoForm orderCoForm) {
		Map<String, String> pantsWashableCompositeProjectsMap = new HashMap<String, String>();

		// ベルトループ箇所
		String wpBeltLoop = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoop());
		String wpBeltLoopYes = "有り";
		
		if(wpBeltLoopYes.equals(wpBeltLoop)) {
			String wpBeltLoopPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace1());
			String wpBeltLoopPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace2());
			String wpBeltLoopPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace3());
			String wpBeltLoopPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace4());
			String wpBeltLoopPlace5 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace5());
			String wpBeltLoopPlace6 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace6());
			String wpBeltLoopPlace7 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace7());
			Map<String, String> wpBeltLoopPlaceMap = new LinkedHashMap<String, String>();
			wpBeltLoopPlaceMap.put(wpBeltLoopPlace1, wpBeltLoopPlace1);
			wpBeltLoopPlaceMap.put(wpBeltLoopPlace2, wpBeltLoopPlace2);
			wpBeltLoopPlaceMap.put(wpBeltLoopPlace3, wpBeltLoopPlace3);
			wpBeltLoopPlaceMap.put(wpBeltLoopPlace4, wpBeltLoopPlace4);
			wpBeltLoopPlaceMap.put(wpBeltLoopPlace5, wpBeltLoopPlace5);
			wpBeltLoopPlaceMap.put(wpBeltLoopPlace6, wpBeltLoopPlace6);
			wpBeltLoopPlaceMap.put(wpBeltLoopPlace7, wpBeltLoopPlace7);
			StringBuffer wpBeltLoopPlaceString = new StringBuffer();
			wpBeltLoopPlaceString.append(wpBeltLoop + "　　");

			for (String key : wpBeltLoopPlaceMap.keySet()) {
				String value = wpBeltLoopPlaceMap.get(key);
				if (key != null) {
					wpBeltLoopPlaceString.append(value + "　　");
				}
			}
			pantsWashableCompositeProjectsMap.put("wpBeltLoopPlace", wpBeltLoopPlaceString.toString());
		}
		else {
			pantsWashableCompositeProjectsMap.put("wpBeltLoopPlace", wpBeltLoop);
		}
		
		// ステッチ箇所変更
		String wpStitchModify = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModify());
		String wpStitchModifyYes = "有り";
		
		if(wpStitchModifyYes.equals(wpStitchModify)) {
			String wpStitchModifyPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace1());
			String wpStitchModifyPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace2());
			String wpStitchModifyPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace3());
			String wpStitchModifyPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace4());
			Map<String, String> wpStitchModifyPlaceMap = new LinkedHashMap<String, String>();
			wpStitchModifyPlaceMap.put(wpStitchModifyPlace1, wpStitchModifyPlace1);
			wpStitchModifyPlaceMap.put(wpStitchModifyPlace2, wpStitchModifyPlace2);
			wpStitchModifyPlaceMap.put(wpStitchModifyPlace3, wpStitchModifyPlace3);
			wpStitchModifyPlaceMap.put(wpStitchModifyPlace4, wpStitchModifyPlace4);

			StringBuffer wpStitchModifyPlaceString = new StringBuffer();
			wpStitchModifyPlaceString.append(wpStitchModify + "　　");
			for (String key : wpStitchModifyPlaceMap.keySet()) {
				String value = wpStitchModifyPlaceMap.get(key);
				if (key != null) {
					wpStitchModifyPlaceString.append(value + "　　");
				}
			}
			pantsWashableCompositeProjectsMap.put("wpStitchModifyPlace", wpStitchModifyPlaceString.toString());
		}
		else {
			pantsWashableCompositeProjectsMap.put("wpStitchModifyPlace", wpStitchModify);
		}
		
		// ダブルステッチ
		String wpDStitch = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpDStitch());
		String wpDStitchYes = "有り";
		
		if(wpDStitchYes.equals(wpDStitch)) {
			String wpDStitchPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace1());
			String wpDStitchPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace2());
			String wpDStitchPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace3());
			String wpDStitchPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace4());
			Map<String, String> wpDStitchPlaceMap = new LinkedHashMap<String, String>();
			wpDStitchPlaceMap.put(wpDStitchPlace1, wpDStitchPlace1);
			wpDStitchPlaceMap.put(wpDStitchPlace2, wpDStitchPlace2);
			wpDStitchPlaceMap.put(wpDStitchPlace3, wpDStitchPlace3);
			wpDStitchPlaceMap.put(wpDStitchPlace4, wpDStitchPlace4);

			StringBuffer wpDStitchPlaceString = new StringBuffer();
			wpDStitchPlaceString.append(wpDStitch + "　　");
			for (String key : wpDStitchPlaceMap.keySet()) {
				String value = wpDStitchPlaceMap.get(key);
				if (key != null) {
					wpDStitchPlaceString.append(value + "　　");
				}
			}
			pantsWashableCompositeProjectsMap.put("wpDStitchPlace", wpDStitchPlaceString.toString());
		}
		else {
			pantsWashableCompositeProjectsMap.put("wpDStitchPlace", wpDStitch);
		}
		
		// AMF色指定
		String wpAmfColor = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor());
		String wpAmfColorYes = "有り";
		
		if(wpAmfColorYes.equals(wpAmfColor)) {
			String wpAmfColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace1());
			String wpAmfColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace2());
			String wpAmfColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace3());
			String wpAmfColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace4());

			String wpAmfColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor1());
			String wpAmfColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor2());
			String wpAmfColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor3());
			String wpAmfColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor4());
			Map<String, String> wpAmfColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wpAmfColorPlaceAndColorMap.put(wpAmfColorPlace1, wpAmfColor1);
			wpAmfColorPlaceAndColorMap.put(wpAmfColorPlace2, wpAmfColor2);
			wpAmfColorPlaceAndColorMap.put(wpAmfColorPlace3, wpAmfColor3);
			wpAmfColorPlaceAndColorMap.put(wpAmfColorPlace4, wpAmfColor4);

			StringBuffer wpAmfColorPlaceAndColorString = new StringBuffer();
			wpAmfColorPlaceAndColorString.append(wpAmfColor + "　　");
			int wpAmfColorPlaceAndColorFlag = 0;
			for (String key : wpAmfColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wpAmfColorPlaceAndColorMap.get(key);
					if (wpAmfColorPlaceAndColorFlag == 0 || wpAmfColorPlaceAndColorFlag % 3 != 0) {
						wpAmfColorPlaceAndColorString = wpAmfColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wpAmfColorPlaceAndColorFlag != 0 && wpAmfColorPlaceAndColorFlag % 3 == 0) {
						wpAmfColorPlaceAndColorString = wpAmfColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wpAmfColorPlaceAndColorFlag += 1;
				}
			}
			pantsWashableCompositeProjectsMap.put("wpAmfColorPlaceAndColor", wpAmfColorPlaceAndColorString.toString());
		}
		else {
			pantsWashableCompositeProjectsMap.put("wpAmfColorPlaceAndColor", wpAmfColor);
		}
		
		// ボタンホール色指定
		String wpBhColor = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor());
		String wpBhColorYes = "有り";
		
		if(wpBhColorYes.equals(wpBhColor)) {
			String wpBhColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace1());
			String wpBhColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace2());
			String wpBhColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace3());
			String wpBhColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace4());

			String wpBhColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor1());
			String wpBhColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor2());
			String wpBhColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor3());
			String wpBhColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor4());
			Map<String, String> wpBhColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wpBhColorPlaceAndColorMap.put(wpBhColorPlace1, wpBhColor1);
			wpBhColorPlaceAndColorMap.put(wpBhColorPlace2, wpBhColor2);
			wpBhColorPlaceAndColorMap.put(wpBhColorPlace3, wpBhColor3);
			wpBhColorPlaceAndColorMap.put(wpBhColorPlace4, wpBhColor4);

			StringBuffer wpBhColorPlaceAndColorString = new StringBuffer();
			wpBhColorPlaceAndColorString.append(wpBhColor + "　　");
			int wpBhColorPlaceAndColorFlag = 0;
			for (String key : wpBhColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wpBhColorPlaceAndColorMap.get(key);
					if (wpBhColorPlaceAndColorFlag == 0 || wpBhColorPlaceAndColorFlag % 3 != 0) {
						wpBhColorPlaceAndColorString = wpBhColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wpBhColorPlaceAndColorFlag != 0 && wpBhColorPlaceAndColorFlag % 3 == 0) {
						wpBhColorPlaceAndColorString = wpBhColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wpBhColorPlaceAndColorFlag += 1;
				}
			}
			pantsWashableCompositeProjectsMap.put("wpBhColorPlaceAndColor", wpBhColorPlaceAndColorString.toString());
		}
		else {
			pantsWashableCompositeProjectsMap.put("wpBhColorPlaceAndColor", wpBhColor);
		}
		
		// ボタン付け糸指定
		String wpByColor = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpByColor());
		String wpByColorYes = "有り";
		
		if(wpByColorYes.equals(wpByColor)) {
			String wpByColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace1());
			String wpByColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace2());
			String wpByColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace3());
			String wpByColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlaceMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace4());

			String wpByColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpByColor1());
			String wpByColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpByColor2());
			String wpByColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpByColor3());
			String wpByColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorsMap()
					.get(orderCoForm.getCoOptionPantsWashableInfo().getWpByColor4());
			Map<String, String> wpByColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wpByColorPlaceAndColorMap.put(wpByColorPlace1, wpByColor1);
			wpByColorPlaceAndColorMap.put(wpByColorPlace2, wpByColor2);
			wpByColorPlaceAndColorMap.put(wpByColorPlace3, wpByColor3);
			wpByColorPlaceAndColorMap.put(wpByColorPlace4, wpByColor4);
			StringBuffer wpByColorPlaceAndColorString = new StringBuffer();
			wpByColorPlaceAndColorString.append(wpByColor + "　　");
			int wpByColorPlaceAndColorFlag = 0;
			for (String key : wpByColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wpByColorPlaceAndColorMap.get(key);
					if (wpByColorPlaceAndColorFlag == 0 || wpByColorPlaceAndColorFlag % 3 != 0) {
						wpByColorPlaceAndColorString = wpByColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wpByColorPlaceAndColorFlag != 0 && wpByColorPlaceAndColorFlag % 3 == 0) {
						wpByColorPlaceAndColorString = wpByColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wpByColorPlaceAndColorFlag += 1;
				}
			}
			pantsWashableCompositeProjectsMap.put("wpByColorPlaceAndColor", wpByColorPlaceAndColorString.toString());
		}
		else {
			pantsWashableCompositeProjectsMap.put("wpByColorPlaceAndColor", wpByColor);
		}
		

		return pantsWashableCompositeProjectsMap;
	}

	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> washableJkServelItemShow(OrderCoForm orderCoForm) {
		Map<String, String> jacketWashableCompositeProjectsMap = new HashMap<String, String>();
		// ステッチ箇所変更
		String wjStitchModify = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModify());
		String wjStitchModifyYes = "有り";
		
		if(wjStitchModifyYes.equals(wjStitchModify)) {
			String wjStitchModifyPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace1());
			String wjStitchModifyPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace2());
			String wjStitchModifyPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace3());
			String wjStitchModifyPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace4());
			String wjStitchModifyPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace5());
			String wjStitchModifyPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace6());
			String wjStitchModifyPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace7());
			String wjStitchModifyPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace8());
			String wjStitchModifyPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace9());
			Map<String, String> wjStitchModifyPlaceMap = new LinkedHashMap<String, String>();
			wjStitchModifyPlaceMap.put(wjStitchModifyPlace1, wjStitchModifyPlace1);
			wjStitchModifyPlaceMap.put(wjStitchModifyPlace2, wjStitchModifyPlace2);
			wjStitchModifyPlaceMap.put(wjStitchModifyPlace3, wjStitchModifyPlace3);
			wjStitchModifyPlaceMap.put(wjStitchModifyPlace4, wjStitchModifyPlace4);
			wjStitchModifyPlaceMap.put(wjStitchModifyPlace5, wjStitchModifyPlace5);
			wjStitchModifyPlaceMap.put(wjStitchModifyPlace6, wjStitchModifyPlace6);
			wjStitchModifyPlaceMap.put(wjStitchModifyPlace7, wjStitchModifyPlace7);
			wjStitchModifyPlaceMap.put(wjStitchModifyPlace8, wjStitchModifyPlace8);
			wjStitchModifyPlaceMap.put(wjStitchModifyPlace9, wjStitchModifyPlace9);

			StringBuffer wjStitchModifyPlaceString = new StringBuffer();
			wjStitchModifyPlaceString.append(wjStitchModify + "　　");
			for (String key : wjStitchModifyPlaceMap.keySet()) {
				String value = wjStitchModifyPlaceMap.get(key);
				if (key != null) {
					wjStitchModifyPlaceString.append(value + "　　");
				}
			}
			jacketWashableCompositeProjectsMap.put("wjStitchModifyPlace", wjStitchModifyPlaceString.toString());
		}
		else {
			jacketWashableCompositeProjectsMap.put("wjStitchModifyPlace", wjStitchModify);
		}
		
		// ダブルステッチ変更
		String wjDStitchModify = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModify());
		String wjDStitchModifyYes = "有り";
		
		if(wjDStitchModifyYes.equals(wjDStitchModify)) {
			String wjDStitchModifyPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace1());
			String wjDStitchModifyPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace2());
			String wjDStitchModifyPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace3());
			String wjDStitchModifyPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace4());
			String wjDStitchModifyPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace5());
			String wjDStitchModifyPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace6());
			String wjDStitchModifyPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace7());
			String wjDStitchModifyPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace8());
			String wjDStitchModifyPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace9());
			Map<String, String> wjDStitchModifyPlaceMap = new LinkedHashMap<String, String>();
			wjDStitchModifyPlaceMap.put(wjDStitchModifyPlace1, wjDStitchModifyPlace1);
			wjDStitchModifyPlaceMap.put(wjDStitchModifyPlace2, wjDStitchModifyPlace2);
			wjDStitchModifyPlaceMap.put(wjDStitchModifyPlace3, wjDStitchModifyPlace3);
			wjDStitchModifyPlaceMap.put(wjDStitchModifyPlace4, wjDStitchModifyPlace4);
			wjDStitchModifyPlaceMap.put(wjDStitchModifyPlace5, wjDStitchModifyPlace5);
			wjDStitchModifyPlaceMap.put(wjDStitchModifyPlace6, wjDStitchModifyPlace6);
			wjDStitchModifyPlaceMap.put(wjDStitchModifyPlace7, wjDStitchModifyPlace7);
			wjDStitchModifyPlaceMap.put(wjDStitchModifyPlace8, wjDStitchModifyPlace8);
			wjDStitchModifyPlaceMap.put(wjDStitchModifyPlace9, wjDStitchModifyPlace9);

			StringBuffer wjDStitchModifyPlaceString = new StringBuffer();
			wjDStitchModifyPlaceString.append(wjDStitchModify + "　　");
			for (String key : wjDStitchModifyPlaceMap.keySet()) {
				String value = wjDStitchModifyPlaceMap.get(key);
				if (key != null) {
					wjDStitchModifyPlaceString.append(value + "　　");
				}
			}
			jacketWashableCompositeProjectsMap.put("wjDStitchModifyPlace", wjDStitchModifyPlaceString.toString());
		}
		else {
			jacketWashableCompositeProjectsMap.put("wjDStitchModifyPlace", wjDStitchModify);
		}
		
		// AMF色指定
		String wjAmfColor = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor());
		String wjAmfColorYes = "有り";
		
		if(wjAmfColorYes.equals(wjAmfColor)) {
			String wjAmfColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace1());
			String wjAmfColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace2());
			String wjAmfColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace3());
			String wjAmfColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace4());
			String wjAmfColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace5());
			String wjAmfColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace6());
			String wjAmfColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace7());
			String wjAmfColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace8());
			String wjAmfColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace9());
			String wjAmfColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace10());

			String wjAmfColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor1());
			String wjAmfColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor2());
			String wjAmfColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor3());
			String wjAmfColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor4());
			String wjAmfColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor5());
			String wjAmfColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor6());
			String wjAmfColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor7());
			String wjAmfColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor8());
			String wjAmfColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor9());
			String wjAmfColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor10());

			Map<String, String> wjAmfColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace1, wjAmfColor1);
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace2, wjAmfColor2);
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace3, wjAmfColor3);
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace4, wjAmfColor4);
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace5, wjAmfColor5);
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace6, wjAmfColor6);
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace7, wjAmfColor7);
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace8, wjAmfColor8);
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace9, wjAmfColor9);
			wjAmfColorPlaceAndColorMap.put(wjAmfColorPlace10, wjAmfColor10);

			StringBuffer wjAmfColorPlaceAndColorString = new StringBuffer();
			wjAmfColorPlaceAndColorString.append(wjAmfColor + "　　");
			int wjAmfColorPlaceAndColorFlag = 0;
			for (String key : wjAmfColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wjAmfColorPlaceAndColorMap.get(key);
					if (wjAmfColorPlaceAndColorFlag == 0 || wjAmfColorPlaceAndColorFlag % 3 != 0) {
						wjAmfColorPlaceAndColorString = wjAmfColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wjAmfColorPlaceAndColorFlag != 0 && wjAmfColorPlaceAndColorFlag % 3 == 0) {
						wjAmfColorPlaceAndColorString = wjAmfColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wjAmfColorPlaceAndColorFlag += 1;
				}
			}
			jacketWashableCompositeProjectsMap.put("wjAmfColorPlaceAndColor", wjAmfColorPlaceAndColorString.toString());
		}
		else {
			jacketWashableCompositeProjectsMap.put("wjAmfColorPlaceAndColor", wjAmfColor);
		}
		
		// ボタンホール色指定
		String wjBhColor = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor());
		String wjBhColorYes = "有り";
		
		if(wjBhColorYes.equals(wjBhColor)) {
			String wjBhColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace1());
			String wjBhColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace2());
			String wjBhColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace3());
			String wjBhColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace4());
			String wjBhColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace5());
			String wjBhColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace6());
			String wjBhColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace7());
			String wjBhColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace8());
			String wjBhColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace9());
			String wjBhColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace10());
			String wjBhColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace11());
			String wjBhColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace12());
			String wjBhColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace13());
			String wjBhColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace14());
			String wjBhColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace15());
			String wjBhColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace16());
			String wjBhColorPlace17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace17());

			String wjBhColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor1());
			String wjBhColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor2());
			String wjBhColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor3());
			String wjBhColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor4());
			String wjBhColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor5());
			String wjBhColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor6());
			String wjBhColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor7());
			String wjBhColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor8());
			String wjBhColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor9());
			String wjBhColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor10());
			String wjBhColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor11());
			String wjBhColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor12());
			String wjBhColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor13());
			String wjBhColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor14());
			String wjBhColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor15());
			String wjBhColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor16());
			String wjBhColor17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor17());

			Map<String, String> wjBhColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace1, wjBhColor1);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace2, wjBhColor2);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace3, wjBhColor3);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace4, wjBhColor4);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace5, wjBhColor5);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace6, wjBhColor6);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace7, wjBhColor7);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace8, wjBhColor8);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace9, wjBhColor9);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace10, wjBhColor10);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace11, wjBhColor11);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace12, wjBhColor12);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace13, wjBhColor13);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace14, wjBhColor14);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace15, wjBhColor15);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace16, wjBhColor16);
			wjBhColorPlaceAndColorMap.put(wjBhColorPlace17, wjBhColor17);
			StringBuffer wjBhColorPlaceAndColorString = new StringBuffer();
			wjBhColorPlaceAndColorString.append(wjBhColor + "　　");
			int wjBhColorPlaceAndColorFlag = 0;
			for (String key : wjBhColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wjBhColorPlaceAndColorMap.get(key);
					if (wjBhColorPlaceAndColorFlag == 0 || wjBhColorPlaceAndColorFlag % 3 != 0) {
						wjBhColorPlaceAndColorString = wjBhColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wjBhColorPlaceAndColorFlag != 0 && wjBhColorPlaceAndColorFlag % 3 == 0) {
						wjBhColorPlaceAndColorString = wjBhColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wjBhColorPlaceAndColorFlag += 1;
				}
			}
			jacketWashableCompositeProjectsMap.put("wjBhColorPlaceAndColor", wjBhColorPlaceAndColorString.toString());
		}
		else {
			jacketWashableCompositeProjectsMap.put("wjBhColorPlaceAndColor", wjBhColor);
		}
		
		// ボタン付け糸指定
		String wjByColor = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor());
		String wjByColorYes = "有り";
		
		if(wjByColorYes.equals(wjByColor)) {
			String wjByColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace1());
			String wjByColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace2());
			String wjByColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace3());
			String wjByColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace4());
			String wjByColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace5());
			String wjByColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace6());
			String wjByColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace7());
			String wjByColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace8());
			String wjByColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace9());
			String wjByColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace10());
			String wjByColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace11());
			String wjByColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace12());
			String wjByColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace13());
			String wjByColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace14());
			String wjByColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace15());
			String wjByColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace16());
			
			String wjByColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor1());
			String wjByColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor2());
			String wjByColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor3());
			String wjByColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor4());
			String wjByColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor5());
			String wjByColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor6());
			String wjByColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor7());
			String wjByColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor8());
			String wjByColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor9());
			String wjByColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor10());
			String wjByColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor11());
			String wjByColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor12());
			String wjByColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor13());
			String wjByColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor14());
			String wjByColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor15());
			String wjByColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap()
					.get(orderCoForm.getCoOptionJacketWashableInfo().getWjByColor16());
			
			Map<String, String> wjByColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wjByColorPlaceAndColorMap.put(wjByColorPlace1, wjByColor1);
			wjByColorPlaceAndColorMap.put(wjByColorPlace2, wjByColor2);
			wjByColorPlaceAndColorMap.put(wjByColorPlace3, wjByColor3);
			wjByColorPlaceAndColorMap.put(wjByColorPlace4, wjByColor4);
			wjByColorPlaceAndColorMap.put(wjByColorPlace5, wjByColor5);
			wjByColorPlaceAndColorMap.put(wjByColorPlace6, wjByColor6);
			wjByColorPlaceAndColorMap.put(wjByColorPlace7, wjByColor7);
			wjByColorPlaceAndColorMap.put(wjByColorPlace8, wjByColor8);
			wjByColorPlaceAndColorMap.put(wjByColorPlace9, wjByColor9);
			wjByColorPlaceAndColorMap.put(wjByColorPlace10, wjByColor10);
			wjByColorPlaceAndColorMap.put(wjByColorPlace11, wjByColor11);
			wjByColorPlaceAndColorMap.put(wjByColorPlace12, wjByColor12);
			wjByColorPlaceAndColorMap.put(wjByColorPlace13, wjByColor13);
			wjByColorPlaceAndColorMap.put(wjByColorPlace14, wjByColor14);
			wjByColorPlaceAndColorMap.put(wjByColorPlace15, wjByColor15);
			wjByColorPlaceAndColorMap.put(wjByColorPlace16, wjByColor16);
			StringBuffer wjByColorPlaceAndColorString = new StringBuffer();
			wjByColorPlaceAndColorString.append(wjByColor + "　　");
			int wjByColorPlaceAndColorFlag = 0;
			for (String key : wjByColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wjByColorPlaceAndColorMap.get(key);
					if (wjByColorPlaceAndColorFlag == 0 || wjByColorPlaceAndColorFlag % 3 != 0) {
						wjByColorPlaceAndColorString = wjByColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wjByColorPlaceAndColorFlag != 0 && wjByColorPlaceAndColorFlag % 3 == 0) {
						wjByColorPlaceAndColorString = wjByColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wjByColorPlaceAndColorFlag += 1;
				}
			}
			jacketWashableCompositeProjectsMap.put("wjBhColorPlaceAndColor", wjByColorPlaceAndColorString.toString());
		}
		else {
			jacketWashableCompositeProjectsMap.put("wjBhColorPlaceAndColor", wjByColor);
		}
		return jacketWashableCompositeProjectsMap;
	}

	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> washableGlServelItemShow(OrderCoForm orderCoForm) {
		Map<String, String> giletWashableCompositeProjectsMap = new HashMap<String, String>();
		// ステッチ箇所変更
		String wgStitchModify = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModify());
		String wgStitchModifyYes = "有り";
		
		if(wgStitchModifyYes.equals(wgStitchModify)) {
			String wgStitchModifyPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace1());
			String wgStitchModifyPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace2());
			String wgStitchModifyPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace3());

			Map<String, String> wgStitchModifyPlaceMap = new LinkedHashMap<String, String>();
			wgStitchModifyPlaceMap.put(wgStitchModifyPlace1, wgStitchModifyPlace1);
			wgStitchModifyPlaceMap.put(wgStitchModifyPlace2, wgStitchModifyPlace2);
			wgStitchModifyPlaceMap.put(wgStitchModifyPlace3, wgStitchModifyPlace3);
			StringBuffer wgStitchModifyPlaceString = new StringBuffer();
			wgStitchModifyPlaceString.append(wgStitchModify + "　　");

			for (String key : wgStitchModifyPlaceMap.keySet()) {
				String value = wgStitchModifyPlaceMap.get(key);
				if (key != null) {
					wgStitchModifyPlaceString.append(value + "　　");
				}
			}
			giletWashableCompositeProjectsMap.put("wgStitchModifyPlace", wgStitchModifyPlaceString.toString());
		}
		else {
			giletWashableCompositeProjectsMap.put("wgStitchModifyPlace", wgStitchModify);
		}
		
		// ダブルステッチ変更
		String wgDStitchModify = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModify());
		String wgDStitchModifyYes = "有り";
		
		if(wgDStitchModifyYes.equals(wgDStitchModify)) {
			String wgDStitchModifyPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlace1());
			String wgDStitchModifyPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlace2());
			String wgDStitchModifyPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlace3());
			Map<String, String> wgDStitchModifyPlaceMap = new LinkedHashMap<String, String>();
			wgDStitchModifyPlaceMap.put(wgDStitchModifyPlace1, wgDStitchModifyPlace1);
			wgDStitchModifyPlaceMap.put(wgDStitchModifyPlace2, wgDStitchModifyPlace2);
			wgDStitchModifyPlaceMap.put(wgDStitchModifyPlace3, wgDStitchModifyPlace3);
			StringBuffer wgDStitchModifyPlaceString = new StringBuffer();
			wgDStitchModifyPlaceString.append(wgDStitchModify + "　　");

			for (String key : wgDStitchModifyPlaceMap.keySet()) {
				String value = wgDStitchModifyPlaceMap.get(key);
				if (key != null) {
					wgDStitchModifyPlaceString.append(value + "　　");
				}
			}
			giletWashableCompositeProjectsMap.put("wgDStitchModifyPlace", wgDStitchModifyPlaceString.toString());
		}
		else {
			giletWashableCompositeProjectsMap.put("wgDStitchModifyPlace", wgDStitchModify);
		}
		
		// AMF色指定
		String wgAmfColor = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor());
		String wgAmfColorYes = "有り";
		
		if(wgAmfColorYes.equals(wgAmfColor)) {
			String wgAmfColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace1());
			String wgAmfColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace2());
			String wgAmfColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace3());

			String wgAmfColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor1());
			String wgAmfColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor2());
			String wgAmfColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor3());

			Map<String, String> wgAmfColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wgAmfColorPlaceAndColorMap.put(wgAmfColorPlace1, wgAmfColor1);
			wgAmfColorPlaceAndColorMap.put(wgAmfColorPlace2, wgAmfColor2);
			wgAmfColorPlaceAndColorMap.put(wgAmfColorPlace3, wgAmfColor3);

			StringBuffer wgAmfColorPlaceAndColorString = new StringBuffer();
			wgAmfColorPlaceAndColorString.append(wgAmfColor + "　　");
			int wgAmfColorPlaceAndColorFlag = 0;
			for (String key : wgAmfColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wgAmfColorPlaceAndColorMap.get(key);
					if (wgAmfColorPlaceAndColorFlag == 0 || wgAmfColorPlaceAndColorFlag % 3 != 0) {
						wgAmfColorPlaceAndColorString = wgAmfColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wgAmfColorPlaceAndColorFlag != 0 && wgAmfColorPlaceAndColorFlag % 3 == 0) {
						wgAmfColorPlaceAndColorString = wgAmfColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wgAmfColorPlaceAndColorFlag += 1;
				}
			}
			giletWashableCompositeProjectsMap.put("wgAmfColorPlaceAndColor", wgAmfColorPlaceAndColorString.toString());
		}
		else {
			giletWashableCompositeProjectsMap.put("wgAmfColorPlaceAndColor", wgAmfColor);
		}
		
		// ボタンホール色指定
		String wgBhColor = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor());
		String wgBhColorYes = "有り";
		
		if(wgBhColorYes.equals(wgBhColor)) {
			String wgBhColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace1());
			String wgBhColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace2());
			String wgBhColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace3());
			String wgBhColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace4());
			String wgBhColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace5());
			String wgBhColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace6());

			String wgBhColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor1());
			String wgBhColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor2());
			String wgBhColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor3());
			String wgBhColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor4());
			String wgBhColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor5());
			String wgBhColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor6());

			Map<String, String> wgBhColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wgBhColorPlaceAndColorMap.put(wgBhColorPlace1, wgBhColor1);
			wgBhColorPlaceAndColorMap.put(wgBhColorPlace2, wgBhColor2);
			wgBhColorPlaceAndColorMap.put(wgBhColorPlace3, wgBhColor3);
			wgBhColorPlaceAndColorMap.put(wgBhColorPlace4, wgBhColor4);
			wgBhColorPlaceAndColorMap.put(wgBhColorPlace5, wgBhColor5);
			wgBhColorPlaceAndColorMap.put(wgBhColorPlace6, wgBhColor6);
			StringBuffer wgBhColorPlaceAndColorString = new StringBuffer();
			wgBhColorPlaceAndColorString.append(wgBhColor + "　　");
			int wgBhColorPlaceAndColorFlag = 0;
			for (String key : wgBhColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wgBhColorPlaceAndColorMap.get(key);
					if (wgBhColorPlaceAndColorFlag == 0 || wgBhColorPlaceAndColorFlag % 3 != 0) {
						wgBhColorPlaceAndColorString = wgBhColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wgBhColorPlaceAndColorFlag != 0 && wgBhColorPlaceAndColorFlag % 3 == 0) {
						wgBhColorPlaceAndColorString = wgBhColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wgBhColorPlaceAndColorFlag += 1;
				}
			}
			giletWashableCompositeProjectsMap.put("wgBhColorPlaceAndColor", wgBhColorPlaceAndColorString.toString());
		}
		else {
			giletWashableCompositeProjectsMap.put("wgBhColorPlaceAndColor", wgBhColor);
		}
		
		// ボタン付け糸指定
		String wgByColor = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor());
		String wgByColorYes = "有り";
		
		if(wgByColorYes.equals(wgByColor)) {
			String wgByColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace1());
			String wgByColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace2());
			String wgByColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace3());
			String wgByColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace4());
			String wgByColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace5());
			String wgByColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace6());
			String wgByColorPlace7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace7());
			String wgByColorPlace8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace8());
			String wgByColorPlace9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace9());
			String wgByColorPlace10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace10());

			String wgByColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor1());
			String wgByColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor2());
			String wgByColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor3());
			String wgByColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor4());
			String wgByColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor5());
			String wgByColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor6());
			String wgByColor7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor7());
			String wgByColor8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor8());
			String wgByColor9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor9());
			String wgByColor10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgByColor10());

			Map<String, String> wgByColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wgByColorPlaceAndColorMap.put(wgByColorPlace1, wgByColor1);
			wgByColorPlaceAndColorMap.put(wgByColorPlace2, wgByColor2);
			wgByColorPlaceAndColorMap.put(wgByColorPlace3, wgByColor3);
			wgByColorPlaceAndColorMap.put(wgByColorPlace4, wgByColor4);
			wgByColorPlaceAndColorMap.put(wgByColorPlace5, wgByColor5);
			wgByColorPlaceAndColorMap.put(wgByColorPlace6, wgByColor6);
			wgByColorPlaceAndColorMap.put(wgByColorPlace7, wgByColor7);
			wgByColorPlaceAndColorMap.put(wgByColorPlace8, wgByColor8);
			wgByColorPlaceAndColorMap.put(wgByColorPlace9, wgByColor9);
			wgByColorPlaceAndColorMap.put(wgByColorPlace10, wgByColor10);
			StringBuffer wgByColorPlaceAndColorString = new StringBuffer();
			wgByColorPlaceAndColorString.append(wgByColor + "　　");
			int wgByColorPlaceAndColorFlag = 0;
			for (String key : wgByColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wgByColorPlaceAndColorMap.get(key);
					if (wgByColorPlaceAndColorFlag == 0 || wgByColorPlaceAndColorFlag % 3 != 0) {
						wgByColorPlaceAndColorString = wgByColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wgByColorPlaceAndColorFlag != 0 && wgByColorPlaceAndColorFlag % 3 == 0) {
						wgByColorPlaceAndColorString = wgByColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wgByColorPlaceAndColorFlag += 1;
				}
			}
			giletWashableCompositeProjectsMap.put("wgByColorPlaceAndColor", wgByColorPlaceAndColorString.toString());
		}
		else {
			giletWashableCompositeProjectsMap.put("wgByColorPlaceAndColor", wgByColor);
		}
		
		return giletWashableCompositeProjectsMap;
	}

	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> washablePt2ServelItemShow(OrderCoForm orderCoForm) {
		Map<String, String> pants2WashableCompositeProjectsMap = new HashMap<String, String>();

		// ベルトループ箇所
		String wp2BeltLoop = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoop());
		String wp2BeltLoopYes = "有り";
		
		if(wp2BeltLoopYes.equals(wp2BeltLoop)) {
			String wp2BeltLoopPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace1());
			String wp2BeltLoopPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace2());
			String wp2BeltLoopPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace3());
			String wp2BeltLoopPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace4());
			String wp2BeltLoopPlace5 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace5());
			String wp2BeltLoopPlace6 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace6());
			String wp2BeltLoopPlace7 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace7());
			Map<String, String> wp2BeltLoopPlaceMap = new LinkedHashMap<String, String>();
			wp2BeltLoopPlaceMap.put(wp2BeltLoopPlace1, wp2BeltLoopPlace1);
			wp2BeltLoopPlaceMap.put(wp2BeltLoopPlace2, wp2BeltLoopPlace2);
			wp2BeltLoopPlaceMap.put(wp2BeltLoopPlace3, wp2BeltLoopPlace3);
			wp2BeltLoopPlaceMap.put(wp2BeltLoopPlace4, wp2BeltLoopPlace4);
			wp2BeltLoopPlaceMap.put(wp2BeltLoopPlace5, wp2BeltLoopPlace5);
			wp2BeltLoopPlaceMap.put(wp2BeltLoopPlace6, wp2BeltLoopPlace6);
			wp2BeltLoopPlaceMap.put(wp2BeltLoopPlace7, wp2BeltLoopPlace7);
			StringBuffer wp2BeltLoopPlaceString = new StringBuffer();
			wp2BeltLoopPlaceString.append(wp2BeltLoop + "　　");

			for (String key : wp2BeltLoopPlaceMap.keySet()) {
				String value = wp2BeltLoopPlaceMap.get(key);
				if (key != null) {
					wp2BeltLoopPlaceString.append(value + "　　");
				}
			}
			pants2WashableCompositeProjectsMap.put("wp2BeltLoopPlace", wp2BeltLoopPlaceString.toString());
		}
		else {
			pants2WashableCompositeProjectsMap.put("wp2BeltLoopPlace", wp2BeltLoop);
		}
		
		// ステッチ箇所変更
		String wp2StitchModify = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModify());
		String wp2StitchModifyYes = "有り";
		
		if(wp2StitchModifyYes.equals(wp2StitchModify)) {
			String wp2StitchModifyPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace1());
			String wp2StitchModifyPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace2());
			String wp2StitchModifyPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace3());
			String wp2StitchModifyPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace4());
			Map<String, String> wp2StitchModifyPlaceMap = new LinkedHashMap<String, String>();
			wp2StitchModifyPlaceMap.put(wp2StitchModifyPlace1, wp2StitchModifyPlace1);
			wp2StitchModifyPlaceMap.put(wp2StitchModifyPlace2, wp2StitchModifyPlace2);
			wp2StitchModifyPlaceMap.put(wp2StitchModifyPlace3, wp2StitchModifyPlace3);
			wp2StitchModifyPlaceMap.put(wp2StitchModifyPlace4, wp2StitchModifyPlace4);

			StringBuffer wp2StitchModifyPlaceString = new StringBuffer();
			wp2StitchModifyPlaceString.append(wp2StitchModify + "　　");
			for (String key : wp2StitchModifyPlaceMap.keySet()) {
				String value = wp2StitchModifyPlaceMap.get(key);
				if (key != null) {
					wp2StitchModifyPlaceString.append(value + "　　");
				}
			}
			pants2WashableCompositeProjectsMap.put("wp2StitchModifyPlace", wp2StitchModifyPlaceString.toString());
		}
		else {
			pants2WashableCompositeProjectsMap.put("wp2StitchModifyPlace", wp2StitchModify);
		}
		
		// ダブルステッチ
		String wp2DStitch = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitch());
		String wp2DStitchYes = "有り";
		
		if(wp2DStitchYes.equals(wp2DStitch)) {
			String wp2DStitchPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace1());
			String wp2DStitchPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace2());
			String wp2DStitchPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace3());
			String wp2DStitchPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace4());
			Map<String, String> wp2DStitchPlaceMap = new LinkedHashMap<String, String>();
			wp2DStitchPlaceMap.put(wp2DStitchPlace1, wp2DStitchPlace1);
			wp2DStitchPlaceMap.put(wp2DStitchPlace2, wp2DStitchPlace2);
			wp2DStitchPlaceMap.put(wp2DStitchPlace3, wp2DStitchPlace3);
			wp2DStitchPlaceMap.put(wp2DStitchPlace4, wp2DStitchPlace4);

			StringBuffer wp2DStitchPlaceString = new StringBuffer();
			wp2DStitchPlaceString.append(wp2DStitch + "　　");
			for (String key : wp2DStitchPlaceMap.keySet()) {
				String value = wp2DStitchPlaceMap.get(key);
				if (key != null) {
					wp2DStitchPlaceString.append(value + "　　");
				}
			}
			pants2WashableCompositeProjectsMap.put("wp2DStitchPlace", wp2DStitchPlaceString.toString());
		}
		else {
			pants2WashableCompositeProjectsMap.put("wp2DStitchPlace", wp2DStitch);
		}
		
		// AMF色指定
		String wp2AmfColor = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor());
		String wp2AmfColorYes = "有り";
		
		if(wp2AmfColorYes.equals(wp2AmfColor)) {
			String wp2AmfColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace1());
			String wp2AmfColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace2());
			String wp2AmfColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace3());
			String wp2AmfColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace4());

			String wp2AmfColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor1());
			String wp2AmfColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor2());
			String wp2AmfColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor3());
			String wp2AmfColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor4());
			Map<String, String> wp2AmfColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wp2AmfColorPlaceAndColorMap.put(wp2AmfColorPlace1, wp2AmfColor1);
			wp2AmfColorPlaceAndColorMap.put(wp2AmfColorPlace2, wp2AmfColor2);
			wp2AmfColorPlaceAndColorMap.put(wp2AmfColorPlace3, wp2AmfColor3);
			wp2AmfColorPlaceAndColorMap.put(wp2AmfColorPlace4, wp2AmfColor4);

			StringBuffer wp2AmfColorPlaceAndColorString = new StringBuffer();
			wp2AmfColorPlaceAndColorString.append(wp2AmfColor + "　　");
			int wp2AmfColorPlaceAndColorFlag = 0;
			for (String key : wp2AmfColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wp2AmfColorPlaceAndColorMap.get(key);
					if (wp2AmfColorPlaceAndColorFlag == 0 || wp2AmfColorPlaceAndColorFlag % 3 != 0) {
						wp2AmfColorPlaceAndColorString = wp2AmfColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wp2AmfColorPlaceAndColorFlag != 0 && wp2AmfColorPlaceAndColorFlag % 3 == 0) {
						wp2AmfColorPlaceAndColorString = wp2AmfColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wp2AmfColorPlaceAndColorFlag += 1;
				}
			}
			pants2WashableCompositeProjectsMap.put("wp2AmfColorPlaceAndColor", wp2AmfColorPlaceAndColorString.toString());
		}
		else {
			pants2WashableCompositeProjectsMap.put("wp2AmfColorPlaceAndColor", wp2AmfColor);
		}
		
		// ボタンホール色指定
		String wp2BhColor = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor());
		String wp2BhColorYes = "有り";
		
		if(wp2BhColorYes.equals(wp2BhColor)) {
			String wp2BhColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace1());
			String wp2BhColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace2());
			String wp2BhColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace3());
			String wp2BhColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace4());

			String wp2BhColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor1());
			String wp2BhColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor2());
			String wp2BhColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor3());
			String wp2BhColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor4());
			Map<String, String> wp2BhColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wp2BhColorPlaceAndColorMap.put(wp2BhColorPlace1, wp2BhColor1);
			wp2BhColorPlaceAndColorMap.put(wp2BhColorPlace2, wp2BhColor2);
			wp2BhColorPlaceAndColorMap.put(wp2BhColorPlace3, wp2BhColor3);
			wp2BhColorPlaceAndColorMap.put(wp2BhColorPlace4, wp2BhColor4);

			StringBuffer wp2BhColorPlaceAndColorString = new StringBuffer();
			wp2BhColorPlaceAndColorString.append(wp2BhColor + "　　");
			int wp2BhColorPlaceAndColorFlag = 0;
			for (String key : wp2BhColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wp2BhColorPlaceAndColorMap.get(key);
					if (wp2BhColorPlaceAndColorFlag == 0 || wp2BhColorPlaceAndColorFlag % 3 != 0) {
						wp2BhColorPlaceAndColorString = wp2BhColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wp2BhColorPlaceAndColorFlag != 0 && wp2BhColorPlaceAndColorFlag % 3 == 0) {
						wp2BhColorPlaceAndColorString = wp2BhColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wp2BhColorPlaceAndColorFlag += 1;
				}
			}
			pants2WashableCompositeProjectsMap.put("wp2BhColorPlaceAndColor", wp2BhColorPlaceAndColorString.toString());
		}
		else {
			pants2WashableCompositeProjectsMap.put("wp2BhColorPlaceAndColor", wp2BhColor);
		}
		
		// ボタン付け糸指定
		String wp2ByColor = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor());
		String wp2ByColorYes = "有り";
		
		if(wp2ByColorYes.equals(wp2ByColor)) {
			String wp2ByColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace1());
			String wp2ByColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace2());
			String wp2ByColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace3());
			String wp2ByColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace4());

			String wp2ByColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor1());
			String wp2ByColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor2());
			String wp2ByColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor3());
			String wp2ByColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceAllMap()
					.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor4());
			Map<String, String> wp2ByColorPlaceAndColorMap = new LinkedHashMap<String, String>();
			wp2ByColorPlaceAndColorMap.put(wp2ByColorPlace1, wp2ByColor1);
			wp2ByColorPlaceAndColorMap.put(wp2ByColorPlace2, wp2ByColor2);
			wp2ByColorPlaceAndColorMap.put(wp2ByColorPlace3, wp2ByColor3);
			wp2ByColorPlaceAndColorMap.put(wp2ByColorPlace4, wp2ByColor4);
			StringBuffer wp2ByColorPlaceAndColorString = new StringBuffer();
			wp2ByColorPlaceAndColorString.append(wp2ByColor + "　　");
			int wp2ByColorPlaceAndColorFlag = 0;
			for (String key : wp2ByColorPlaceAndColorMap.keySet()) {
				if (key != null) {
					String value = wp2ByColorPlaceAndColorMap.get(key);
					if (wp2ByColorPlaceAndColorFlag == 0 || wp2ByColorPlaceAndColorFlag % 3 != 0) {
						wp2ByColorPlaceAndColorString = wp2ByColorPlaceAndColorString.append(key + "-" + value + "　　");
					} else if (wp2ByColorPlaceAndColorFlag != 0 && wp2ByColorPlaceAndColorFlag % 3 == 0) {
						wp2ByColorPlaceAndColorString = wp2ByColorPlaceAndColorString
								.append("<br>　　　　" + key + "-" + value + "　　");
					}
					wp2ByColorPlaceAndColorFlag += 1;
				}
			}
			pants2WashableCompositeProjectsMap.put("wp2ByColorPlaceAndColor", wp2ByColorPlaceAndColorString.toString());
		}
		else {
			pants2WashableCompositeProjectsMap.put("wp2ByColorPlaceAndColor", wp2ByColor);
		}
		return pants2WashableCompositeProjectsMap;
	}

	/**
	 * 
	 * @param orderFabric
	 * @return
	 */
	public Map<String, Integer> getCoRetailPriceRelated(OrderFindFabric orderFabric) {

		Map<String, Integer> priceMap = new HashMap<String, Integer>();
		// 上代
		Integer retailPrice = orderFabric.getRetailPrice();
		// ダブルJACKET増額率
		Integer additionalDoubleJacketRate = orderFabric.getAdditionalDoubleJacketRate();
		// シングルGILET追加増額率
		Integer additionalSingleGiletRate = orderFabric.getAdditionalSingleGiletRate();
		// ダブルGILET追加増額率
		Integer additionalDoubleGiletRate = orderFabric.getAdditionalDoubleGiletRate();
		// PANTS追加増額率
		Integer additionalPantsRate = orderFabric.getAdditionalPantsRate();
		// 上代*ダブルJACKET増額率/100
		Integer doubleJacketRtPrice = retailPrice * additionalDoubleJacketRate / 100;
		// 上代*シングルGILET追加増額率/100
		Integer single3PieceRetailPrice = retailPrice * additionalSingleGiletRate / 100;
		// 上代*ダブルGILET追加増額率/100 - 上代*シングルGILET追加増額率/100
		Integer doubleGiletModelRtPrice = retailPrice * additionalDoubleGiletRate / 100
				- retailPrice * additionalSingleGiletRate / 100;
		// 上代*PANTS追加増額率/100
		Integer sparePantsPrice = retailPrice * additionalPantsRate / 100;

		// ダブルJACKET単品率
		Integer doubleJacketOnlyRate = orderFabric.getDoubleJacketOnlyRate();
		// ダブルJacketの単品購買追加金額
		Integer jkDoubleOnlyPlusAlphaPrice = orderFabric.getJkDoubleOnlyPlusAlphaPrice();
		// シングルJACKET単品率
		Integer singleJacketOnlyRate = orderFabric.getSingleJacketOnlyRate();
		// シングルJacketの単品購買追加金額
		Integer jkSingleOnlyPlusAlphaPrice = orderFabric.getJkSingleOnlyPlusAlphaPrice();
		// (上代*ダブルJACKET単品率/100+「ダブルJacketの単品購買追加金額」) -
		// (上代*シングルJACKET単品率/100+「シングルJacketの単品購買追加金額」)
		Integer singleJacketDoublePrice = (retailPrice * doubleJacketOnlyRate / 100 + jkDoubleOnlyPlusAlphaPrice)
				- (retailPrice * singleJacketOnlyRate / 100 + jkSingleOnlyPlusAlphaPrice);

		// シングルGILET単品率
		Integer singleGiletOnlyRate = orderFabric.getSingleGiletOnlyRate();
		// ダブルGILET単品率
		Integer doubleGiletOnlyRate = orderFabric.getDoubleGiletOnlyRate();
		// シングルGILETの単品購買追加金額
		Integer glSingleOnlyPlusAlphaPrice = orderFabric.getGlSingleOnlyPlusAlphaPrice();
		// ダブルGILETの単品購買追加金額
		Integer glDoubleOnlyPlusAlphaPrice = orderFabric.getGlDoubleOnlyPlusAlphaPrice();
		// (上代*ダブルGILET単品率/100+「ダブルGILETの単品購買追加金額」) -
		// (上代*シングルGILET単品率/100+「シングルGILETの単品購買追加金額」)
		Integer singleGiletDoublePrice = (retailPrice * doubleGiletOnlyRate / 100 + glDoubleOnlyPlusAlphaPrice)
				- (retailPrice * singleGiletOnlyRate / 100 + glSingleOnlyPlusAlphaPrice);

		// シングルコート単品率
		Integer coatSingleOnlyRate = orderFabric.getCoatSingleOnlyRate();
		// ダブルコート単品率
		Integer coatDoubleOnlyRate = orderFabric.getCoatDoubleOnlyRate();
		// シングルCoatの単品購買追加金額
		Integer ctSingleOnlyPlusAlphaPrice = orderFabric.getCtSingleOnlyPlusAlphaPrice();
		// ダブルCoatの単品購買追加金額
		Integer ctDoubleOnlyPlusAlphaPrice = orderFabric.getCtDoubleOnlyPlusAlphaPrice();
		// (上代*ダブルコート単品率/100＋「ダブルCoatの単品購買追加金額」) -
		// (上代*シングルコート単品率/100＋「シングルCoatの単品購買追加金額」)
		Integer singleCoatDoublePrice = (retailPrice * coatDoubleOnlyRate / 100 + ctDoubleOnlyPlusAlphaPrice)
				- (retailPrice * coatSingleOnlyRate / 100 + ctSingleOnlyPlusAlphaPrice);

		priceMap.put("price3Piece", single3PieceRetailPrice);
		priceMap.put("sparePants", sparePantsPrice);
		priceMap.put("doubleJacketRtPrice", doubleJacketRtPrice);
		priceMap.put("doubleGiletModelRtPrice", doubleGiletModelRtPrice);
		priceMap.put("singleDoubleJACKET", singleJacketDoublePrice);
		priceMap.put("singleGiletDoublePrice", singleGiletDoublePrice);
		priceMap.put("singleCoatDoublePrice", singleCoatDoublePrice);

		return priceMap;
	}

	/**
	 * 
	 * @param price
	 * @return
	 */
	public String formatPrice(String price) {

		price = new StringBuffer(price).reverse().toString();
		String str2 = "";
		int size = (price.length() % 3 == 0) ? (price.length() / 3) : (price.length() / 3 + 1);
		if (price.length() < 3) {
			str2 = price;
		} else {
			for (int i = 0; i < size - 1; i++) {// 前n-1段
				str2 += price.substring(i * 3, i * 3 + 3) + ",";
			}
			for (int i = size - 1; i < size; i++) {// 第n段
				str2 += price.substring(i * 3, price.length());
			}
		}
		str2 = new StringBuffer(str2).reverse().toString();// 再将字符串颠倒顺序
		return str2;
	}
	
	/**
	 * JACKETのステッチ箇所変更下代工賃
	 * @param orderCoForm
	 * @param selectCoComplexItemsWageList
	 * @return
	 */
	public void standardJkOjStitchModifyPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectCoComplexItemsWageList) {
		
		String productCategory = orderCoForm.getProductCategory();
		// 0：標準
		if("9000101".equals(productCategory)) {
			
			// 標準JACKETのステッチ箇所変更
			String ojStitchModifyPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace1();
			String ojStitchModifyPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace2();
			String ojStitchModifyPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace3();
			String ojStitchModifyPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace4();
			String ojStitchModifyPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace5();
			String ojStitchModifyPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace6();
			String ojStitchModifyPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace7();
			String ojStitchModifyPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace8();
			String ojStitchModifyPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace9();

			List<String> ojStitchModifyPlaceList = new ArrayList<>();
			ojStitchModifyPlaceList.add(ojStitchModifyPlace1);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace2);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace3);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace4);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace5);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace6);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace7);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace8);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace9);
			ojStitchModifyPlaceList.removeAll(Collections.singleton(null));
			BigDecimal optionBranchWage = new BigDecimal(0);
			for (String ojStitchModifyPlace : ojStitchModifyPlaceList) {

				for (NextGenerationPrice nextGenerationPrice : selectCoComplexItemsWageList) {
					if (ojStitchModifyPlace.equals(nextGenerationPrice.getMowOptionBranchCode())) {
						optionBranchWage = optionBranchWage.add(nextGenerationPrice.getMowWage());
					}
				}
			}
			order.setJkStitchPlcWsWage(optionBranchWage);
		}
		// 1：ウォッシャブル
		else if("9000103".equals(productCategory)) {
			
			// タキシードJACKETのステッチ箇所変更
			String wjStitchModifyPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace1();
			String wjStitchModifyPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace2();
			String wjStitchModifyPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace3();
			String wjStitchModifyPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace4();
			String wjStitchModifyPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace5();
			String wjStitchModifyPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace6();
			String wjStitchModifyPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace7();
			String wjStitchModifyPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace8();
			String wjStitchModifyPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace9();
	
			List<String> wjStitchModifyPlaceList = new ArrayList<>();
			wjStitchModifyPlaceList.add(wjStitchModifyPlace1);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace2);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace3);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace4);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace5);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace6);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace7);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace8);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace9);
			wjStitchModifyPlaceList.removeAll(Collections.singleton(null));
			BigDecimal optionBranchWage = new BigDecimal(0);
			for (String wjStitchModifyPlace : wjStitchModifyPlaceList) {

				for (NextGenerationPrice nextGenerationPrice : selectCoComplexItemsWageList) {
					if (wjStitchModifyPlace.equals(nextGenerationPrice.getMowOptionBranchCode())) {
						optionBranchWage = optionBranchWage.add(nextGenerationPrice.getMowWage());
					}
				}
			}
			order.setJkStitchPlcWsWage(optionBranchWage);
		}
	}

	/**
	 * JACKETのステッチ箇所変更下代付属
	 * @param orderCoForm
	 * @param selectJkOjInsidePktPlaceList
	 * @return
	 */
	public void standardJkOjStitchModifyPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectJkOjInsidePktPlaceList) {
		
		String productCategory = orderCoForm.getProductCategory();
		// 0：標準
		if("9000101".equals(productCategory)) {
			// フロント釦数
			String ojFrontBtnCnt = orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String ojFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String ojFrontBtnCntdoubleFourButton = "0000106";
			// 標準JACKETのステッチ箇所変更
			String ojStitchModifyPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace1();
			String ojStitchModifyPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace2();
			String ojStitchModifyPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace3();
			String ojStitchModifyPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace4();
			String ojStitchModifyPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace5();
			String ojStitchModifyPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace6();
			String ojStitchModifyPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace7();
			String ojStitchModifyPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace8();
			String ojStitchModifyPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace9();

			List<String> ojStitchModifyPlaceList = new ArrayList<>();
			ojStitchModifyPlaceList.add(ojStitchModifyPlace1);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace2);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace3);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace4);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace5);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace6);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace7);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace8);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace9);
			ojStitchModifyPlaceList.removeAll(Collections.singleton(null));
			Integer optionBranchDoubleorPrice = 0;
			for (String ojStitchModifyPlace : ojStitchModifyPlaceList) {

				for (NextGenerationPrice nextGenerationPrice : selectJkOjInsidePktPlaceList) {
					if (ojStitchModifyPlace.equals(nextGenerationPrice.getMoapOptionBranchCode())) {
						if (ojFrontBtnCntdoubleSixButton.equals(ojFrontBtnCnt)
								|| ojFrontBtnCntdoubleFourButton.equals(ojFrontBtnCnt)) {
							optionBranchDoubleorPrice += nextGenerationPrice.getMoapDoublePrice();
						} else {
							optionBranchDoubleorPrice += nextGenerationPrice.getMoapPrice();
						}
					}
				}
			}
			order.setJkStitchPlcWsPrice(optionBranchDoubleorPrice);
		}
		// 1：ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// フロント釦数
			String tjFrontBtnCnt = orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String ojFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String ojFrontBtnCntdoubleFourButton = "0000106";
			// タキシードJACKETのステッチ箇所変更
			String wjStitchModifyPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace1();
			String wjStitchModifyPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace2();
			String wjStitchModifyPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace3();
			String wjStitchModifyPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace4();
			String wjStitchModifyPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace5();
			String wjStitchModifyPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace6();
			String wjStitchModifyPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace7();
			String wjStitchModifyPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace8();
			String wjStitchModifyPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace9();
	
			List<String> wjStitchModifyPlaceList = new ArrayList<>();
			wjStitchModifyPlaceList.add(wjStitchModifyPlace1);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace2);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace3);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace4);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace5);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace6);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace7);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace8);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace9);
			wjStitchModifyPlaceList.removeAll(Collections.singleton(null));
			Integer optionBranchDoubleorPrice = 0;
			for (String wjStitchModifyPlace : wjStitchModifyPlaceList) {
	
				for (NextGenerationPrice nextGenerationPrice : selectJkOjInsidePktPlaceList) {
					if (wjStitchModifyPlace.equals(nextGenerationPrice.getMoapOptionBranchCode())) {
						if (ojFrontBtnCntdoubleSixButton.equals(tjFrontBtnCnt)
								|| ojFrontBtnCntdoubleFourButton.equals(tjFrontBtnCnt)) {
							optionBranchDoubleorPrice += nextGenerationPrice.getMoapDoublePrice();
						} else {
							optionBranchDoubleorPrice += nextGenerationPrice.getMoapPrice();
						}
					}
				}
			}
			order.setJkStitchPlcWsPrice(optionBranchDoubleorPrice);
		}
	}

	/**
	 * 削除重複したデータ
	 * 
	 * @param ojAmfColorPlace
	 * @param ojAmfColor
	 * @param ojAmfColorsList
	 * @return
	 */
	public List<String> deteleRepeatValue(String ojAmfColorPlace, String ojAmfColor, List<String> ojAmfColorsList) {
		if (ojAmfColorPlace != null) {
			if (!ojAmfColorsList.contains(ojAmfColor)) {
				ojAmfColorsList.add(ojAmfColor);
			}
		}
		return ojAmfColorsList;
	}
	
	/**
	 * AMF色指定の下代工賃
	 * 
	 * @param orderCoForm
	 * @param selectJkOjAmfColorWageList
	 * @return
	 */
	public void standardJkOjAmfColorNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectJkOjAmfColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0：標準
		if("9000101".equals(productCategory)) {

			List<String> ojAmfColorsList = new ArrayList<>();
			// 標準JACKETのAMF色指定
			String ojAmfColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace1();
			String ojAmfColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace2();
			String ojAmfColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace3();
			String ojAmfColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace4();
			String ojAmfColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace5();
			String ojAmfColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace6();
			String ojAmfColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace7();
			String ojAmfColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace8();
			String ojAmfColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace9();

			String ojAmfColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor1();
			String ojAmfColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor2();
			String ojAmfColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor3();
			String ojAmfColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor4();
			String ojAmfColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor5();
			String ojAmfColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor6();
			String ojAmfColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor7();
			String ojAmfColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor8();
			String ojAmfColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor9();
			List<String> deteleRepeatValue = deteleRepeatValue(ojAmfColorPlace1, ojAmfColor1, ojAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ojAmfColorPlace2, ojAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ojAmfColorPlace3, ojAmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ojAmfColorPlace4, ojAmfColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ojAmfColorPlace5, ojAmfColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ojAmfColorPlace6, ojAmfColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(ojAmfColorPlace7, ojAmfColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(ojAmfColorPlace8, ojAmfColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(ojAmfColorPlace9, ojAmfColor9, deteleRepeatValue8);
			
			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal ojAmfColorSize = new BigDecimal(deteleRepeatValue9.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectJkOjAmfColorWageList.isEmpty()) {
				mowWage = selectJkOjAmfColorWageList.get(0).getMowWage();
			}
			optionBranchWage = ojAmfColorSize.multiply(mowWage);
			order.setJkAmfColorWsWage(optionBranchWage);
		}
		// 1：ウォッシャブル
		else if("9000103".equals(productCategory)) {

			List<String> wjAmfColorsList = new ArrayList<>();
			// 標準JACKETのAMF色指定
			String wjAmfColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace1();
			String wjAmfColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace2();
			String wjAmfColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace3();
			String wjAmfColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace4();
			String wjAmfColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace5();
			String wjAmfColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace6();
			String wjAmfColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace7();
			String wjAmfColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace8();
			String wjAmfColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace9();

			String wjAmfColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor1();
			String wjAmfColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor2();
			String wjAmfColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor3();
			String wjAmfColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor4();
			String wjAmfColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor5();
			String wjAmfColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor6();
			String wjAmfColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor7();
			String wjAmfColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor8();
			String wjAmfColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor9();
			List<String> deteleRepeatValue = deteleRepeatValue(wjAmfColorPlace1, wjAmfColor1, wjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wjAmfColorPlace2, wjAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wjAmfColorPlace3, wjAmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wjAmfColorPlace4, wjAmfColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wjAmfColorPlace5, wjAmfColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wjAmfColorPlace6, wjAmfColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(wjAmfColorPlace7, wjAmfColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(wjAmfColorPlace8, wjAmfColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(wjAmfColorPlace9, wjAmfColor9, deteleRepeatValue8);
			
			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wjAmfColorSize = new BigDecimal(deteleRepeatValue9.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectJkOjAmfColorWageList.isEmpty()) {
				mowWage = selectJkOjAmfColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wjAmfColorSize.multiply(mowWage);
			order.setJkAmfColorWsWage(wptionBranchWage);
		}
	}

	/**
	 * AMF色指定の下代付属
	 * 
	 * @param orderCoForm
	 * @param selectJkOjAmfColorPriceList
	 * @return
	 */
	public void standardJkOjAmfColorNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectJkOjAmfColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0：標準
		if("9000101".equals(productCategory)) {
			// フロント釦数
			String ojFrontBtnCnt = orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String ojFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String ojFrontBtnCntdoubleFourButton = "0000106";

			List<String> ojAmfColorsList = new ArrayList<>();
			// 標準JACKETのAMF色指定
			String ojAmfColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace1();
			String ojAmfColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace2();
			String ojAmfColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace3();
			String ojAmfColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace4();
			String ojAmfColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace5();
			String ojAmfColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace6();
			String ojAmfColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace7();
			String ojAmfColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace8();
			String ojAmfColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace9();

			String ojAmfColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor1();
			String ojAmfColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor2();
			String ojAmfColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor3();
			String ojAmfColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor4();
			String ojAmfColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor5();
			String ojAmfColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor6();
			String ojAmfColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor7();
			String ojAmfColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor8();
			String ojAmfColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor9();
			List<String> deteleRepeatValue = deteleRepeatValue(ojAmfColorPlace1, ojAmfColor1, ojAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ojAmfColorPlace2, ojAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ojAmfColorPlace3, ojAmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ojAmfColorPlace4, ojAmfColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ojAmfColorPlace5, ojAmfColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ojAmfColorPlace6, ojAmfColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(ojAmfColorPlace7, ojAmfColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(ojAmfColorPlace8, ojAmfColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(ojAmfColorPlace9, ojAmfColor9, deteleRepeatValue8);
			Integer optionBranchDoubleorPrice = 0;
			int ojAmfColorSize = deteleRepeatValue9.size();
			if(!selectJkOjAmfColorPriceList.isEmpty()) {
				if (ojFrontBtnCntdoubleSixButton.equals(ojFrontBtnCnt) || ojFrontBtnCntdoubleFourButton.equals(ojFrontBtnCnt)) {
					Integer optionBranchDoublePrice = selectJkOjAmfColorPriceList.get(0).getMoapDoublePrice();
					optionBranchDoubleorPrice = ojAmfColorSize * optionBranchDoublePrice;
				} else {
					Integer optionBranchPrice = selectJkOjAmfColorPriceList.get(0).getMoapPrice();
					optionBranchDoubleorPrice = ojAmfColorSize * optionBranchPrice;
				}
			}
			order.setJkAmfColorWsPrice(optionBranchDoubleorPrice);
		}
		// 1：ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// フロント釦数
			String wjFrontBtnCnt = orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String wjFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String wjFrontBtnCntdoubleFourButton = "0000106";

			List<String> wjAmfColorsList = new ArrayList<>();
			// 標準JACKETのAMF色指定
			String wjAmfColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace1();
			String wjAmfColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace2();
			String wjAmfColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace3();
			String wjAmfColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace4();
			String wjAmfColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace5();
			String wjAmfColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace6();
			String wjAmfColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace7();
			String wjAmfColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace8();
			String wjAmfColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace9();

			String wjAmfColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor1();
			String wjAmfColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor2();
			String wjAmfColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor3();
			String wjAmfColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor4();
			String wjAmfColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor5();
			String wjAmfColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor6();
			String wjAmfColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor7();
			String wjAmfColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor8();
			String wjAmfColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor9();
			List<String> deteleRepeatValue = deteleRepeatValue(wjAmfColorPlace1, wjAmfColor1, wjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wjAmfColorPlace2, wjAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wjAmfColorPlace3, wjAmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wjAmfColorPlace4, wjAmfColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wjAmfColorPlace5, wjAmfColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wjAmfColorPlace6, wjAmfColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(wjAmfColorPlace7, wjAmfColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(wjAmfColorPlace8, wjAmfColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(wjAmfColorPlace9, wjAmfColor9, deteleRepeatValue8);
			Integer optionBranchDoubleorPrice = 0;
			int wjAmfColorSize = deteleRepeatValue9.size();
			if(!selectJkOjAmfColorPriceList.isEmpty()) {
				if (wjFrontBtnCntdoubleSixButton.equals(wjFrontBtnCnt) || wjFrontBtnCntdoubleFourButton.equals(wjFrontBtnCnt)) {
					Integer optionBranchDoublePrice = selectJkOjAmfColorPriceList.get(0).getMoapDoublePrice();
					optionBranchDoubleorPrice = wjAmfColorSize * optionBranchDoublePrice;
				} else {
					Integer optionBranchPrice = selectJkOjAmfColorPriceList.get(0).getMoapPrice();
					optionBranchDoubleorPrice = wjAmfColorSize * optionBranchPrice;
				}
			}
			order.setJkAmfColorWsPrice(optionBranchDoubleorPrice);
		}
	}
	
	/**
	 * ボタンホール色指定の下代工賃
	 * 
	 * @param orderCoForm
	 * @param selectJkOjBhColorWageList
	 * @return
	 */
	public void standardJkOjBhColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectJkOjBhColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 :標準
		if("9000101".equals(productCategory)) {

			List<String> ojAmfColorsList = new ArrayList<>();
			// 標準JACKETのボタン付け糸指定
			String ojBhColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace1();
			String ojBhColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace2();
			String ojBhColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace3();
			String ojBhColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace4();
			String ojBhColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace5();
			String ojBhColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace6();
			String ojBhColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace7();
			String ojBhColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace8();
			String ojBhColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace9();
			String ojBhColorPlace10 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace10();
			String ojBhColorPlace11 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace11();
			String ojBhColorPlace12 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace12();
			String ojBhColorPlace13 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace13();
			String ojBhColorPlace14 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace14();
			String ojBhColorPlace15 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace15();
			String ojBhColorPlace16 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace16();
			String ojBhColorPlace17 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace17();

			String ojBhColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor1();
			String ojBhColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor2();
			String ojBhColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor3();
			String ojBhColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor4();
			String ojBhColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor5();
			String ojBhColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor6();
			String ojBhColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor7();
			String ojBhColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor8();
			String ojBhColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor9();
			String ojBhColor10 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor10();
			String ojBhColor11 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor11();
			String ojBhColor12 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor12();
			String ojBhColor13 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor13();
			String ojBhColor14 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor14();
			String ojBhColor15 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor15();
			String ojBhColor16 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor16();
			String ojBhColor17 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor17();

			List<String> deteleRepeatValue = deteleRepeatValue(ojBhColorPlace1, ojBhColor1, ojAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ojBhColorPlace2, ojBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ojBhColorPlace3, ojBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ojBhColorPlace4, ojBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ojBhColorPlace5, ojBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ojBhColorPlace6, ojBhColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(ojBhColorPlace7, ojBhColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(ojBhColorPlace8, ojBhColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(ojBhColorPlace9, ojBhColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(ojBhColorPlace10, ojBhColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(ojBhColorPlace11, ojBhColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(ojBhColorPlace12, ojBhColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(ojBhColorPlace13, ojBhColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(ojBhColorPlace14, ojBhColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(ojBhColorPlace15, ojBhColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(ojBhColorPlace16, ojBhColor16, deteleRepeatValue15);
			List<String> deteleRepeatValue17 = deteleRepeatValue(ojBhColorPlace17, ojBhColor17, deteleRepeatValue16);
			
			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal ojBhColorSize = new BigDecimal(deteleRepeatValue17.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectJkOjBhColorWageList.isEmpty()) {
				mowWage = selectJkOjBhColorWageList.get(0).getMowWage();
			}
			optionBranchWage = ojBhColorSize.multiply(mowWage);
			order.setJkBtnholePlcColorWsWage(optionBranchWage);
		}
		// 2 : タキシード
		else if("9000102".equals(productCategory)) {

			List<String> tjAmfColorsList = new ArrayList<>();
			// タキシードJACKETのボタン付け糸指定
			String tjBhColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace1();
			String tjBhColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace2();
			String tjBhColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace3();
			String tjBhColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace4();
			String tjBhColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace5();
			String tjBhColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace6();
			String tjBhColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace7();
			String tjBhColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace8();
			String tjBhColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace9();
			String tjBhColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace10();
			String tjBhColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace11();
			String tjBhColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace12();
			String tjBhColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace13();
			String tjBhColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace14();
			String tjBhColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace15();
			String tjBhColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace16();
			String tjBhColorPlace17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace17();

			String tjBhColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor1();
			String tjBhColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor2();
			String tjBhColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor3();
			String tjBhColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor4();
			String tjBhColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor5();
			String tjBhColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor6();
			String tjBhColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor7();
			String tjBhColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor8();
			String tjBhColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor9();
			String tjBhColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor10();
			String tjBhColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor11();
			String tjBhColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor12();
			String tjBhColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor13();
			String tjBhColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor14();
			String tjBhColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor15();
			String tjBhColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor16();
			String tjBhColor17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor17();

			List<String> deteleRepeatValue = deteleRepeatValue(tjBhColorPlace1, tjBhColor1, tjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tjBhColorPlace2, tjBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tjBhColorPlace3, tjBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tjBhColorPlace4, tjBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(tjBhColorPlace5, tjBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(tjBhColorPlace6, tjBhColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(tjBhColorPlace7, tjBhColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(tjBhColorPlace8, tjBhColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(tjBhColorPlace9, tjBhColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(tjBhColorPlace10, tjBhColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(tjBhColorPlace11, tjBhColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(tjBhColorPlace12, tjBhColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(tjBhColorPlace13, tjBhColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(tjBhColorPlace14, tjBhColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(tjBhColorPlace15, tjBhColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(tjBhColorPlace16, tjBhColor16, deteleRepeatValue15);
			List<String> deteleRepeatValue17 = deteleRepeatValue(tjBhColorPlace17, tjBhColor17, deteleRepeatValue16);
			
			BigDecimal tptionBranchWage = new BigDecimal(0);
			BigDecimal tjBhColorSize = new BigDecimal(deteleRepeatValue17.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectJkOjBhColorWageList.isEmpty()) {
				mowWage = selectJkOjBhColorWageList.get(0).getMowWage();
			}
			tptionBranchWage = tjBhColorSize.multiply(mowWage);
			order.setJkBtnholePlcColorWsWage(tptionBranchWage);
		}
		//1 : ウォッシャブル
		else if("9000103".equals(productCategory)) {

			List<String> wjAmfColorsList = new ArrayList<>();
			// ウォッシャブルJACKETのボタン付け糸指定
			String wjBhColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace1();
			String wjBhColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace2();
			String wjBhColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace3();
			String wjBhColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace4();
			String wjBhColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace5();
			String wjBhColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace6();
			String wjBhColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace7();
			String wjBhColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace8();
			String wjBhColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace9();
			String wjBhColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace10();
			String wjBhColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace11();
			String wjBhColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace12();
			String wjBhColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace13();
			String wjBhColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace14();
			String wjBhColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace15();
			String wjBhColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace16();
			String wjBhColorPlace17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace17();

			String wjBhColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor1();
			String wjBhColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor2();
			String wjBhColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor3();
			String wjBhColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor4();
			String wjBhColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor5();
			String wjBhColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor6();
			String wjBhColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor7();
			String wjBhColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor8();
			String wjBhColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor9();
			String wjBhColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor10();
			String wjBhColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor11();
			String wjBhColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor12();
			String wjBhColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor13();
			String wjBhColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor14();
			String wjBhColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor15();
			String wjBhColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor16();
			String wjBhColor17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor17();

			List<String> deteleRepeatValue = deteleRepeatValue(wjBhColorPlace1, wjBhColor1, wjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wjBhColorPlace2, wjBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wjBhColorPlace3, wjBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wjBhColorPlace4, wjBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wjBhColorPlace5, wjBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wjBhColorPlace6, wjBhColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(wjBhColorPlace7, wjBhColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(wjBhColorPlace8, wjBhColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(wjBhColorPlace9, wjBhColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(wjBhColorPlace10, wjBhColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(wjBhColorPlace11, wjBhColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(wjBhColorPlace12, wjBhColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(wjBhColorPlace13, wjBhColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(wjBhColorPlace14, wjBhColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(wjBhColorPlace15, wjBhColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(wjBhColorPlace16, wjBhColor16, deteleRepeatValue15);
			List<String> deteleRepeatValue17 = deteleRepeatValue(wjBhColorPlace17, wjBhColor17, deteleRepeatValue16);
			
			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wjBhColorSize = new BigDecimal(deteleRepeatValue17.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectJkOjBhColorWageList.isEmpty()) {
				mowWage = selectJkOjBhColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wjBhColorSize.multiply(mowWage);
			order.setJkBtnholePlcColorWsWage(wptionBranchWage);
		}
	}

	/**
	 * ボタンホール色指定の下代付属
	 * 
	 * @param orderCoForm
	 * @param selectJkOjBhColorPriceList
	 * @return
	 */
	public void standardJkOjBhColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectJkOjBhColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 :標準
		if("9000101".equals(productCategory)) {
			// フロント釦数
			String ojFrontBtnCnt = orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String ojFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String ojFrontBtnCntdoubleFourButton = "0000106";

			List<String> ojAmfColorsList = new ArrayList<>();
			// 標準JACKETのボタン付け糸指定
			String ojBhColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace1();
			String ojBhColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace2();
			String ojBhColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace3();
			String ojBhColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace4();
			String ojBhColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace5();
			String ojBhColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace6();
			String ojBhColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace7();
			String ojBhColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace8();
			String ojBhColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace9();
			String ojBhColorPlace10 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace10();
			String ojBhColorPlace11 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace11();
			String ojBhColorPlace12 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace12();
			String ojBhColorPlace13 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace13();
			String ojBhColorPlace14 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace14();
			String ojBhColorPlace15 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace15();
			String ojBhColorPlace16 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace16();
			String ojBhColorPlace17 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace17();

			String ojBhColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor1();
			String ojBhColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor2();
			String ojBhColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor3();
			String ojBhColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor4();
			String ojBhColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor5();
			String ojBhColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor6();
			String ojBhColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor7();
			String ojBhColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor8();
			String ojBhColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor9();
			String ojBhColor10 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor10();
			String ojBhColor11 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor11();
			String ojBhColor12 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor12();
			String ojBhColor13 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor13();
			String ojBhColor14 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor14();
			String ojBhColor15 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor15();
			String ojBhColor16 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor16();
			String ojBhColor17 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor17();

			List<String> deteleRepeatValue = deteleRepeatValue(ojBhColorPlace1, ojBhColor1, ojAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ojBhColorPlace2, ojBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ojBhColorPlace3, ojBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ojBhColorPlace4, ojBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ojBhColorPlace5, ojBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ojBhColorPlace6, ojBhColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(ojBhColorPlace7, ojBhColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(ojBhColorPlace8, ojBhColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(ojBhColorPlace9, ojBhColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(ojBhColorPlace10, ojBhColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(ojBhColorPlace11, ojBhColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(ojBhColorPlace12, ojBhColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(ojBhColorPlace13, ojBhColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(ojBhColorPlace14, ojBhColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(ojBhColorPlace15, ojBhColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(ojBhColorPlace16, ojBhColor16, deteleRepeatValue15);
			List<String> deteleRepeatValue17 = deteleRepeatValue(ojBhColorPlace17, ojBhColor17, deteleRepeatValue16);
			Integer optionBranchDoubleorPrice = 0;
			int ojBhColorSize = deteleRepeatValue17.size();
			if(!selectJkOjBhColorPriceList.isEmpty()) {
				if (ojFrontBtnCntdoubleSixButton.equals(ojFrontBtnCnt) || ojFrontBtnCntdoubleFourButton.equals(ojFrontBtnCnt)) {
					Integer optionBranchDoublePrice = selectJkOjBhColorPriceList.get(0).getMoapDoublePrice();
					optionBranchDoubleorPrice = ojBhColorSize * optionBranchDoublePrice;
				} else {
					Integer optionBranchPrice = selectJkOjBhColorPriceList.get(0).getMoapPrice();
					optionBranchDoubleorPrice = ojBhColorSize * optionBranchPrice;
				}
			}
			order.setJkBtnholePlcColorWsPrice(optionBranchDoubleorPrice);
		}
		// 2 : タキシード
		else if("9000102".equals(productCategory)) {
			// フロント釦数
			String tjFrontBtnCnt = orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String tjFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String tjFrontBtnCntdoubleFourButton = "0000106";

			List<String> tjAmfColorsList = new ArrayList<>();
			// タキシードJACKETのボタン付け糸指定
			String tjBhColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace1();
			String tjBhColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace2();
			String tjBhColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace3();
			String tjBhColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace4();
			String tjBhColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace5();
			String tjBhColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace6();
			String tjBhColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace7();
			String tjBhColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace8();
			String tjBhColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace9();
			String tjBhColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace10();
			String tjBhColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace11();
			String tjBhColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace12();
			String tjBhColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace13();
			String tjBhColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace14();
			String tjBhColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace15();
			String tjBhColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace16();
			String tjBhColorPlace17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace17();

			String tjBhColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor1();
			String tjBhColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor2();
			String tjBhColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor3();
			String tjBhColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor4();
			String tjBhColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor5();
			String tjBhColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor6();
			String tjBhColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor7();
			String tjBhColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor8();
			String tjBhColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor9();
			String tjBhColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor10();
			String tjBhColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor11();
			String tjBhColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor12();
			String tjBhColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor13();
			String tjBhColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor14();
			String tjBhColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor15();
			String tjBhColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor16();
			String tjBhColor17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor17();

			List<String> deteleRepeatValue = deteleRepeatValue(tjBhColorPlace1, tjBhColor1, tjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tjBhColorPlace2, tjBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tjBhColorPlace3, tjBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tjBhColorPlace4, tjBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(tjBhColorPlace5, tjBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(tjBhColorPlace6, tjBhColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(tjBhColorPlace7, tjBhColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(tjBhColorPlace8, tjBhColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(tjBhColorPlace9, tjBhColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(tjBhColorPlace10, tjBhColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(tjBhColorPlace11, tjBhColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(tjBhColorPlace12, tjBhColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(tjBhColorPlace13, tjBhColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(tjBhColorPlace14, tjBhColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(tjBhColorPlace15, tjBhColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(tjBhColorPlace16, tjBhColor16, deteleRepeatValue15);
			List<String> deteleRepeatValue17 = deteleRepeatValue(tjBhColorPlace17, tjBhColor17, deteleRepeatValue16);
			Integer tptionBranchDoubleorPrice = 0;
			int tjBhColorSize = deteleRepeatValue17.size();
			if(!selectJkOjBhColorPriceList.isEmpty()) {
				if (tjFrontBtnCntdoubleSixButton.equals(tjFrontBtnCnt) || tjFrontBtnCntdoubleFourButton.equals(tjFrontBtnCnt)) {
					Integer tptionBranchDoublePrice = selectJkOjBhColorPriceList.get(0).getMoapDoublePrice();
					tptionBranchDoubleorPrice = tjBhColorSize * tptionBranchDoublePrice;
				} else {
					Integer tptionBranchPrice = selectJkOjBhColorPriceList.get(0).getMoapPrice();
					tptionBranchDoubleorPrice = tjBhColorSize * tptionBranchPrice;
				}
			}
			order.setJkBtnholePlcColorWsPrice(tptionBranchDoubleorPrice);
		}
		//1 : ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// フロント釦数
			String wjFrontBtnCnt = orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String wjFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String wjFrontBtnCntdoubleFourButton = "0000106";

			List<String> wjAmfColorsList = new ArrayList<>();
			// ウォッシャブルJACKETのボタン付け糸指定
			String wjBhColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace1();
			String wjBhColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace2();
			String wjBhColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace3();
			String wjBhColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace4();
			String wjBhColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace5();
			String wjBhColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace6();
			String wjBhColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace7();
			String wjBhColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace8();
			String wjBhColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace9();
			String wjBhColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace10();
			String wjBhColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace11();
			String wjBhColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace12();
			String wjBhColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace13();
			String wjBhColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace14();
			String wjBhColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace15();
			String wjBhColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace16();
			String wjBhColorPlace17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace17();

			String wjBhColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor1();
			String wjBhColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor2();
			String wjBhColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor3();
			String wjBhColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor4();
			String wjBhColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor5();
			String wjBhColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor6();
			String wjBhColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor7();
			String wjBhColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor8();
			String wjBhColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor9();
			String wjBhColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor10();
			String wjBhColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor11();
			String wjBhColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor12();
			String wjBhColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor13();
			String wjBhColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor14();
			String wjBhColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor15();
			String wjBhColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor16();
			String wjBhColor17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor17();

			List<String> deteleRepeatValue = deteleRepeatValue(wjBhColorPlace1, wjBhColor1, wjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wjBhColorPlace2, wjBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wjBhColorPlace3, wjBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wjBhColorPlace4, wjBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wjBhColorPlace5, wjBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wjBhColorPlace6, wjBhColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(wjBhColorPlace7, wjBhColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(wjBhColorPlace8, wjBhColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(wjBhColorPlace9, wjBhColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(wjBhColorPlace10, wjBhColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(wjBhColorPlace11, wjBhColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(wjBhColorPlace12, wjBhColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(wjBhColorPlace13, wjBhColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(wjBhColorPlace14, wjBhColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(wjBhColorPlace15, wjBhColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(wjBhColorPlace16, wjBhColor16, deteleRepeatValue15);
			List<String> deteleRepeatValue17 = deteleRepeatValue(wjBhColorPlace17, wjBhColor17, deteleRepeatValue16);
			Integer wptionBranchDoubleorPrice = 0;
			int wjBhColorSize = deteleRepeatValue17.size();
			if(!selectJkOjBhColorPriceList.isEmpty()) {
				if (wjFrontBtnCntdoubleSixButton.equals(wjFrontBtnCnt) || wjFrontBtnCntdoubleFourButton.equals(wjFrontBtnCnt)) {
					Integer wptionBranchDoublePrice = selectJkOjBhColorPriceList.get(0).getMoapDoublePrice();
					wptionBranchDoubleorPrice = wjBhColorSize * wptionBranchDoublePrice;
				} else {
					Integer wptionBranchPrice = selectJkOjBhColorPriceList.get(0).getMoapPrice();
					wptionBranchDoubleorPrice = wjBhColorSize * wptionBranchPrice;
				}
			}
			order.setJkBtnholePlcColorWsPrice(wptionBranchDoubleorPrice);
		}
	}

	/**
	 * ボタン付け糸指定の下代工賃
	 * 
	 * @param orderCoForm
	 * @param selectJkOjByColorPriceList
	 * @return
	 */
	public void standardJkOjByColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectJkOjByColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 : 標準
		if("9000101".equals(productCategory)) {

			List<String> ojAmfColorsList = new ArrayList<>();
			// 標準JACKETのボタンホール色指定
			String ojByColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace1();
			String ojByColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace2();
			String ojByColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace3();
			String ojByColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace4();
			String ojByColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace5();
			String ojByColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace6();
			String ojByColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace7();
			String ojByColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace8();
			String ojByColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace9();
			String ojByColorPlace10 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace10();
			String ojByColorPlace11 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace11();
			String ojByColorPlace12 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace12();
			String ojByColorPlace13 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace13();
			String ojByColorPlace14 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace14();
			String ojByColorPlace15 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace15();
			String ojByColorPlace16 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace16();

			String ojByColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor1();
			String ojByColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor2();
			String ojByColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor3();
			String ojByColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor4();
			String ojByColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor5();
			String ojByColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor6();
			String ojByColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor7();
			String ojByColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor8();
			String ojByColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor9();
			String ojByColor10 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor10();
			String ojByColor11 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor11();
			String ojByColor12 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor12();
			String ojByColor13 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor13();
			String ojByColor14 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor14();
			String ojByColor15 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor15();
			String ojByColor16 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor16();

			List<String> deteleRepeatValue = deteleRepeatValue(ojByColorPlace1, ojByColor1, ojAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ojByColorPlace2, ojByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ojByColorPlace3, ojByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ojByColorPlace4, ojByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ojByColorPlace5, ojByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ojByColorPlace6, ojByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(ojByColorPlace7, ojByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(ojByColorPlace8, ojByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(ojByColorPlace9, ojByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(ojByColorPlace10, ojByColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(ojByColorPlace11, ojByColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(ojByColorPlace12, ojByColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(ojByColorPlace13, ojByColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(ojByColorPlace14, ojByColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(ojByColorPlace15, ojByColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(ojByColorPlace16, ojByColor16, deteleRepeatValue15);
			
			BigDecimal optionBranchDoubleorPrice = new BigDecimal(0);
			BigDecimal ojByColorSize = new BigDecimal(deteleRepeatValue16.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectJkOjByColorWageList.isEmpty()) {
				mowWage = selectJkOjByColorWageList.get(0).getMowWage();
			}
			optionBranchDoubleorPrice = ojByColorSize.multiply(mowWage);
			order.setJkBtnthreadPlcColorWsWage(optionBranchDoubleorPrice);
		}
		// 2 :　タキシード
		else if("9000102".equals(productCategory)) {

			List<String> tjAmfColorsList = new ArrayList<>();
			// タキシードJACKETのボタンホール色指定
			String tjByColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace1();
			String tjByColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace2();
			String tjByColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace3();
			String tjByColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace4();
			String tjByColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace5();
			String tjByColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace6();
			String tjByColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace7();
			String tjByColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace8();
			String tjByColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace9();
			String tjByColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace10();
			String tjByColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace11();
			String tjByColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace12();
			String tjByColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace13();
			String tjByColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace14();
			String tjByColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace15();
			String tjByColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace16();

			String tjByColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor1();
			String tjByColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor2();
			String tjByColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor3();
			String tjByColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor4();
			String tjByColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor5();
			String tjByColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor6();
			String tjByColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor7();
			String tjByColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor8();
			String tjByColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor9();
			String tjByColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor10();
			String tjByColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor11();
			String tjByColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor12();
			String tjByColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor13();
			String tjByColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor14();
			String tjByColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor15();
			String tjByColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor16();

			List<String> deteleRepeatValue = deteleRepeatValue(tjByColorPlace1, tjByColor1, tjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tjByColorPlace2, tjByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tjByColorPlace3, tjByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tjByColorPlace4, tjByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(tjByColorPlace5, tjByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(tjByColorPlace6, tjByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(tjByColorPlace7, tjByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(tjByColorPlace8, tjByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(tjByColorPlace9, tjByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(tjByColorPlace10, tjByColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(tjByColorPlace11, tjByColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(tjByColorPlace12, tjByColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(tjByColorPlace13, tjByColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(tjByColorPlace14, tjByColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(tjByColorPlace15, tjByColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(tjByColorPlace16, tjByColor16, deteleRepeatValue15);

			BigDecimal tptionBranchDoubleorPrice = new BigDecimal(0);
			BigDecimal tjByColorSize = new BigDecimal(deteleRepeatValue16.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectJkOjByColorWageList.isEmpty()) {
				mowWage = selectJkOjByColorWageList.get(0).getMowWage();
			}
			tptionBranchDoubleorPrice = tjByColorSize.multiply(mowWage);
			order.setJkBtnthreadPlcColorWsWage(tptionBranchDoubleorPrice);
		}
		// 1 :ウォッシャブル
		else if("9000103".equals(productCategory)) {

			List<String> wjAmfColorsList = new ArrayList<>();
			// ウォッシャブルJACKETのボタンホール色指定
			String wjByColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace1();
			String wjByColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace2();
			String wjByColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace3();
			String wjByColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace4();
			String wjByColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace5();
			String wjByColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace6();
			String wjByColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace7();
			String wjByColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace8();
			String wjByColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace9();
			String wjByColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace10();
			String wjByColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace11();
			String wjByColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace12();
			String wjByColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace13();
			String wjByColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace14();
			String wjByColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace15();
			String wjByColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace16();

			String wjByColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor1();
			String wjByColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor2();
			String wjByColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor3();
			String wjByColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor4();
			String wjByColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor5();
			String wjByColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor6();
			String wjByColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor7();
			String wjByColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor8();
			String wjByColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor9();
			String wjByColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor10();
			String wjByColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor11();
			String wjByColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor12();
			String wjByColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor13();
			String wjByColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor14();
			String wjByColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor15();
			String wjByColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor16();

			List<String> deteleRepeatValue = deteleRepeatValue(wjByColorPlace1, wjByColor1, wjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wjByColorPlace2, wjByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wjByColorPlace3, wjByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wjByColorPlace4, wjByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wjByColorPlace5, wjByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wjByColorPlace6, wjByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(wjByColorPlace7, wjByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(wjByColorPlace8, wjByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(wjByColorPlace9, wjByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(wjByColorPlace10, wjByColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(wjByColorPlace11, wjByColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(wjByColorPlace12, wjByColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(wjByColorPlace13, wjByColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(wjByColorPlace14, wjByColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(wjByColorPlace15, wjByColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(wjByColorPlace16, wjByColor16, deteleRepeatValue15);
			
			BigDecimal wptionBranchDoubleorPrice = new BigDecimal(0);
			BigDecimal wjByColorSize = new BigDecimal(deteleRepeatValue16.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectJkOjByColorWageList.isEmpty()) {
				mowWage = selectJkOjByColorWageList.get(0).getMowWage();
			}
			wptionBranchDoubleorPrice = wjByColorSize.multiply(mowWage);
			order.setJkBtnthreadPlcColorWsWage(wptionBranchDoubleorPrice);
		}
	}
	
	/**
	 * ボタン付け糸指定の下代付属
	 * 
	 * @param orderCoForm
	 * @param selectJkOjByColorPriceList
	 * @return
	 */
	public void standardJkOjByColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectJkOjByColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 : 標準
		if("9000101".equals(productCategory)) {
			// フロント釦数
			String ojFrontBtnCnt = orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String ojFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String ojFrontBtnCntdoubleFourButton = "0000106";

			List<String> ojAmfColorsList = new ArrayList<>();
			// 標準JACKETのボタンホール色指定
			String ojByColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace1();
			String ojByColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace2();
			String ojByColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace3();
			String ojByColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace4();
			String ojByColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace5();
			String ojByColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace6();
			String ojByColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace7();
			String ojByColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace8();
			String ojByColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace9();
			String ojByColorPlace10 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace10();
			String ojByColorPlace11 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace11();
			String ojByColorPlace12 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace12();
			String ojByColorPlace13 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace13();
			String ojByColorPlace14 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace14();
			String ojByColorPlace15 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace15();
			String ojByColorPlace16 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace16();

			String ojByColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor1();
			String ojByColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor2();
			String ojByColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor3();
			String ojByColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor4();
			String ojByColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor5();
			String ojByColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor6();
			String ojByColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor7();
			String ojByColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor8();
			String ojByColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor9();
			String ojByColor10 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor10();
			String ojByColor11 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor11();
			String ojByColor12 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor12();
			String ojByColor13 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor13();
			String ojByColor14 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor14();
			String ojByColor15 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor15();
			String ojByColor16 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor16();

			List<String> deteleRepeatValue = deteleRepeatValue(ojByColorPlace1, ojByColor1, ojAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ojByColorPlace2, ojByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ojByColorPlace3, ojByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ojByColorPlace4, ojByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ojByColorPlace5, ojByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ojByColorPlace6, ojByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(ojByColorPlace7, ojByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(ojByColorPlace8, ojByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(ojByColorPlace9, ojByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(ojByColorPlace10, ojByColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(ojByColorPlace11, ojByColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(ojByColorPlace12, ojByColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(ojByColorPlace13, ojByColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(ojByColorPlace14, ojByColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(ojByColorPlace15, ojByColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(ojByColorPlace16, ojByColor16, deteleRepeatValue15);
			Integer optionBranchDoubleorPrice = 0;
			int ojByColorSize = deteleRepeatValue16.size();
			if(!selectJkOjByColorPriceList.isEmpty()) {
				if (ojFrontBtnCntdoubleSixButton.equals(ojFrontBtnCnt) || ojFrontBtnCntdoubleFourButton.equals(ojFrontBtnCnt)) {
					Integer optionBranchDoublePrice = selectJkOjByColorPriceList.get(0).getMoapDoublePrice();
					optionBranchDoubleorPrice = ojByColorSize * optionBranchDoublePrice;
				} else {
					Integer optionBranchPrice = selectJkOjByColorPriceList.get(0).getMoapPrice();
					optionBranchDoubleorPrice = ojByColorSize * optionBranchPrice;
				}
			}
			order.setJkBtnthreadPlcColorWsPrice(optionBranchDoubleorPrice);
		}
		// 2 :　タキシード
		else if("9000102".equals(productCategory)) {
			// フロント釦数
			String tjFrontBtnCnt = orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String tjFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String tjFrontBtnCntdoubleFourButton = "0000106";

			List<String> tjAmfColorsList = new ArrayList<>();
			// タキシードJACKETのボタンホール色指定
			String tjByColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace1();
			String tjByColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace2();
			String tjByColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace3();
			String tjByColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace4();
			String tjByColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace5();
			String tjByColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace6();
			String tjByColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace7();
			String tjByColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace8();
			String tjByColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace9();
			String tjByColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace10();
			String tjByColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace11();
			String tjByColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace12();
			String tjByColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace13();
			String tjByColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace14();
			String tjByColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace15();
			String tjByColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace16();

			String tjByColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor1();
			String tjByColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor2();
			String tjByColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor3();
			String tjByColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor4();
			String tjByColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor5();
			String tjByColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor6();
			String tjByColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor7();
			String tjByColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor8();
			String tjByColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor9();
			String tjByColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor10();
			String tjByColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor11();
			String tjByColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor12();
			String tjByColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor13();
			String tjByColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor14();
			String tjByColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor15();
			String tjByColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor16();

			List<String> deteleRepeatValue = deteleRepeatValue(tjByColorPlace1, tjByColor1, tjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tjByColorPlace2, tjByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tjByColorPlace3, tjByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tjByColorPlace4, tjByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(tjByColorPlace5, tjByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(tjByColorPlace6, tjByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(tjByColorPlace7, tjByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(tjByColorPlace8, tjByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(tjByColorPlace9, tjByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(tjByColorPlace10, tjByColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(tjByColorPlace11, tjByColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(tjByColorPlace12, tjByColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(tjByColorPlace13, tjByColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(tjByColorPlace14, tjByColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(tjByColorPlace15, tjByColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(tjByColorPlace16, tjByColor16, deteleRepeatValue15);
			Integer tptionBranchDoubleorPrice = 0;
			int tjByColorSize = deteleRepeatValue16.size();
			if(!selectJkOjByColorPriceList.isEmpty()) {
				if (tjFrontBtnCntdoubleSixButton.equals(tjFrontBtnCnt) || tjFrontBtnCntdoubleFourButton.equals(tjFrontBtnCnt)) {
					Integer optionBranchDoublePrice = selectJkOjByColorPriceList.get(0).getMoapDoublePrice();
					tptionBranchDoubleorPrice = tjByColorSize * optionBranchDoublePrice;
				} else {
					Integer optionBranchPrice = selectJkOjByColorPriceList.get(0).getMoapPrice();
					tptionBranchDoubleorPrice = tjByColorSize * optionBranchPrice;
				}
			}
			order.setJkBtnthreadPlcColorWsPrice(tptionBranchDoubleorPrice);
		}
		// 1 :ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// フロント釦数
			String wjFrontBtnCnt = orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt();
			// 0000105(ダブル6つボタン)
			String wjFrontBtnCntdoubleSixButton = "0000105";
			// 0000106(ダブル4つボタン)
			String wjFrontBtnCntdoubleFourButton = "0000106";

			List<String> wjAmfColorsList = new ArrayList<>();
			// ウォッシャブルJACKETのボタンホール色指定
			String wjByColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace1();
			String wjByColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace2();
			String wjByColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace3();
			String wjByColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace4();
			String wjByColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace5();
			String wjByColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace6();
			String wjByColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace7();
			String wjByColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace8();
			String wjByColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace9();
			String wjByColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace10();
			String wjByColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace11();
			String wjByColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace12();
			String wjByColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace13();
			String wjByColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace14();
			String wjByColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace15();
			String wjByColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace16();

			String wjByColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor1();
			String wjByColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor2();
			String wjByColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor3();
			String wjByColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor4();
			String wjByColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor5();
			String wjByColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor6();
			String wjByColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor7();
			String wjByColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor8();
			String wjByColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor9();
			String wjByColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor10();
			String wjByColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor11();
			String wjByColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor12();
			String wjByColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor13();
			String wjByColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor14();
			String wjByColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor15();
			String wjByColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor16();

			List<String> deteleRepeatValue = deteleRepeatValue(wjByColorPlace1, wjByColor1, wjAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wjByColorPlace2, wjByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wjByColorPlace3, wjByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wjByColorPlace4, wjByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wjByColorPlace5, wjByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wjByColorPlace6, wjByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(wjByColorPlace7, wjByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(wjByColorPlace8, wjByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(wjByColorPlace9, wjByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(wjByColorPlace10, wjByColor10, deteleRepeatValue9);
			List<String> deteleRepeatValue11 = deteleRepeatValue(wjByColorPlace11, wjByColor11, deteleRepeatValue10);
			List<String> deteleRepeatValue12 = deteleRepeatValue(wjByColorPlace12, wjByColor12, deteleRepeatValue11);
			List<String> deteleRepeatValue13 = deteleRepeatValue(wjByColorPlace13, wjByColor13, deteleRepeatValue12);
			List<String> deteleRepeatValue14 = deteleRepeatValue(wjByColorPlace14, wjByColor14, deteleRepeatValue13);
			List<String> deteleRepeatValue15 = deteleRepeatValue(wjByColorPlace15, wjByColor15, deteleRepeatValue14);
			List<String> deteleRepeatValue16 = deteleRepeatValue(wjByColorPlace16, wjByColor16, deteleRepeatValue15);
			Integer wptionBranchDoubleorPrice = 0;
			int wjByColorSize = deteleRepeatValue16.size();
			if(!selectJkOjByColorPriceList.isEmpty()) {
				if (wjFrontBtnCntdoubleSixButton.equals(wjFrontBtnCnt) || wjFrontBtnCntdoubleFourButton.equals(wjFrontBtnCnt)) {
					Integer wptionBranchDoublePrice = selectJkOjByColorPriceList.get(0).getMoapDoublePrice();
					wptionBranchDoubleorPrice = wjByColorSize * wptionBranchDoublePrice;
				} else {
					Integer wptionBranchPrice = selectJkOjByColorPriceList.get(0).getMoapPrice();
					wptionBranchDoubleorPrice = wjByColorSize * wptionBranchPrice;
				}
			}
			order.setJkBtnthreadPlcColorWsPrice(wptionBranchDoubleorPrice);
		}
	}
	
	/**
	 * ステッチ箇所変更の下代工賃
	 * 
	 * @param orderCoForm
	 * @param selectGlOgStitchModifyWageList
	 * @return
	 */
	public void standardGlOgStitchModifyPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectGlOgStitchModifyWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// 標準JACKETのステッチ箇所変更
			String ogStitchModifyPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace1();
			String ogStitchModifyPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace2();
			String ogStitchModifyPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace3();

			List<String> ogStitchModifyPlaceList = new ArrayList<>();
			ogStitchModifyPlaceList.add(ogStitchModifyPlace1);
			ogStitchModifyPlaceList.add(ogStitchModifyPlace2);
			ogStitchModifyPlaceList.add(ogStitchModifyPlace3);
			ogStitchModifyPlaceList.removeAll(Collections.singleton(null));
			BigDecimal optionBranchWage = new BigDecimal(0);
			for (String ogStitchModifyPlace : ogStitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectGlOgStitchModifyWageList) {
					if (ogStitchModifyPlace.equals(nextGenerationPrice.getMowOptionBranchCode())) {
						optionBranchWage = optionBranchWage.add(nextGenerationPrice.getMowWage());
					}
				}
			}
			order.setGlStitchPlcWsWage(optionBranchWage);
		}
		// 1 : ウォッシャブル
		else if("9000103".equals(productCategory)) {
			
			// ウォッシャブルJACKETのステッチ箇所変更
			String wgStitchModifyPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace1();
			String wgStitchModifyPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace2();
			String wgStitchModifyPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace3();

			List<String> wgStitchModifyPlaceList = new ArrayList<>();
			wgStitchModifyPlaceList.add(wgStitchModifyPlace1);
			wgStitchModifyPlaceList.add(wgStitchModifyPlace2);
			wgStitchModifyPlaceList.add(wgStitchModifyPlace3);
			wgStitchModifyPlaceList.removeAll(Collections.singleton(null));
			BigDecimal wptionBranchWage = new BigDecimal(0);
			for (String wgStitchModifyPlace : wgStitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectGlOgStitchModifyWageList) {
					if (wgStitchModifyPlace.equals(nextGenerationPrice.getMoapOptionBranchCode())) {
						wptionBranchWage = wptionBranchWage.add(nextGenerationPrice.getMowWage());
					}
				}
			}
			order.setGlStitchPlcWsWage(wptionBranchWage);
		}
	}

	/**
	 * ステッチ箇所変更の下代付属
	 * 
	 * @param orderCoForm
	 * @param selectGlOgStitchModifyPriceList
	 * @return
	 */
	public void standardGlOgStitchModifyPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectGlOgStitchModifyPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// GILETモデル
			String ogGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// 標準JACKETのステッチ箇所変更
			String ogStitchModifyPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace1();
			String ogStitchModifyPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace2();
			String ogStitchModifyPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace3();

			List<String> ogStitchModifyPlaceList = new ArrayList<>();
			ogStitchModifyPlaceList.add(ogStitchModifyPlace1);
			ogStitchModifyPlaceList.add(ogStitchModifyPlace2);
			ogStitchModifyPlaceList.add(ogStitchModifyPlace3);
			ogStitchModifyPlaceList.removeAll(Collections.singleton(null));
			Integer optionBranchDoubleorPrice = 0;
			for (String ogStitchModifyPlace : ogStitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectGlOgStitchModifyPriceList) {
					if (ogStitchModifyPlace.equals(nextGenerationPrice.getMoapOptionBranchCode())) {
						if (bs01dModel.equals(ogGiletModel) || et15dModel.equals(ogGiletModel)) {
							optionBranchDoubleorPrice += nextGenerationPrice.getMoapDoublePrice();
						} else {
							optionBranchDoubleorPrice += nextGenerationPrice.getMoapPrice();
						}
					}
				}
			}
			order.setGlStitchPlcWsPrice(optionBranchDoubleorPrice);
		}
		// 1 : ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// GILETモデル
			String wgGiletModel = orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// ウォッシャブルJACKETのステッチ箇所変更
			String wgStitchModifyPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace1();
			String wgStitchModifyPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace2();
			String wgStitchModifyPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace3();

			List<String> wgStitchModifyPlaceList = new ArrayList<>();
			wgStitchModifyPlaceList.add(wgStitchModifyPlace1);
			wgStitchModifyPlaceList.add(wgStitchModifyPlace2);
			wgStitchModifyPlaceList.add(wgStitchModifyPlace3);
			wgStitchModifyPlaceList.removeAll(Collections.singleton(null));
			Integer optionBranchDoubleorPrice = 0;
			for (String ogStitchModifyPlace : wgStitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectGlOgStitchModifyPriceList) {
					if (ogStitchModifyPlace.equals(nextGenerationPrice.getMoapOptionBranchCode())) {
						if (bs01dModel.equals(wgGiletModel) || et15dModel.equals(wgGiletModel)) {
							optionBranchDoubleorPrice += nextGenerationPrice.getMoapDoublePrice();
						} else {
							optionBranchDoubleorPrice += nextGenerationPrice.getMoapPrice();
						}
					}
				}
			}
			order.setGlStitchPlcWsPrice(optionBranchDoubleorPrice);
		}
	}

	/**
	 * AMF色指定の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectGlOjAmfColorWageList
	 * @return
	 */
	public void standardGlOgAmfColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectGlOjAmfColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		if("9000101".equals(productCategory)) {
			// 標準JACKETのAMF色指定
			String ogAmfColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace1();
			String ogAmfColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace2();
			String ogAmfColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace3();

			String ogAmfColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor1();
			String ogAmfColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor2();
			String ogAmfColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor3();

			List<String> ogAmfColorPlaceList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(ogAmfColorPlace1, ogAmfColor1, ogAmfColorPlaceList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ogAmfColorPlace2, ogAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ogAmfColorPlace3, ogAmfColor3, deteleRepeatValue2);

			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal ogAmfColorSize = new BigDecimal(deteleRepeatValue3.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectGlOjAmfColorWageList.isEmpty()) {
				mowWage = selectGlOjAmfColorWageList.get(0).getMowWage();
			}
			optionBranchWage = ogAmfColorSize.multiply(mowWage);
			order.setGlAmfColorWsWage(optionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルJACKETのAMF色指定
			String wgAmfColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace1();
			String wgAmfColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace2();
			String wgAmfColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace3();

			String wgAmfColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor1();
			String wgAmfColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor2();
			String wgAmfColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor3();

			List<String> ogAmfColorPlaceList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wgAmfColorPlace1, wgAmfColor1, ogAmfColorPlaceList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wgAmfColorPlace2, wgAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wgAmfColorPlace3, wgAmfColor3, deteleRepeatValue2);

			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wgAmfColorSize = new BigDecimal(deteleRepeatValue3.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectGlOjAmfColorWageList.isEmpty()) {
				mowWage = selectGlOjAmfColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wgAmfColorSize.multiply(mowWage);
			order.setGlAmfColorWsWage(wptionBranchWage);
		}
	}
	
	/**
	 * AMF色指定の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectGlOjAmfColorPriceList
	 * @return
	 */
	public void standardGlOgAmfColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectGlOjAmfColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		if("9000101".equals(productCategory)) {
			// GILETモデル
			String ogGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// 標準JACKETのAMF色指定
			String ogAmfColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace1();
			String ogAmfColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace2();
			String ogAmfColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace3();

			String ogAmfColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor1();
			String ogAmfColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor2();
			String ogAmfColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor3();

			List<String> ogAmfColorPlaceList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(ogAmfColorPlace1, ogAmfColor1, ogAmfColorPlaceList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ogAmfColorPlace2, ogAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ogAmfColorPlace3, ogAmfColor3, deteleRepeatValue2);

			Integer optionBranchDoubleorPrice = 0;
			int ogAmfColorSize = deteleRepeatValue3.size();
			if(!selectGlOjAmfColorPriceList.isEmpty()) {
				if (bs01dModel.equals(ogGiletModel) || et15dModel.equals(ogGiletModel)) {
					Integer optionBranchDoublePrice = selectGlOjAmfColorPriceList.get(0).getMoapDoublePrice();
					optionBranchDoubleorPrice = ogAmfColorSize * optionBranchDoublePrice;
				} else {
					Integer optionBranchDoublePrice = selectGlOjAmfColorPriceList.get(0).getMoapPrice();
					optionBranchDoubleorPrice = ogAmfColorSize * optionBranchDoublePrice;
				}
			}
			order.setGlAmfColorWsPrice(optionBranchDoubleorPrice);
		}
		//1 :ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// GILETモデル
			String wgGiletModel = orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// ウォッシャブルJACKETのAMF色指定
			String wgAmfColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace1();
			String wgAmfColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace2();
			String wgAmfColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace3();

			String wgAmfColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor1();
			String wgAmfColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor2();
			String wgAmfColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor3();

			List<String> ogAmfColorPlaceList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wgAmfColorPlace1, wgAmfColor1, ogAmfColorPlaceList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wgAmfColorPlace2, wgAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wgAmfColorPlace3, wgAmfColor3, deteleRepeatValue2);

			Integer optionBranchDoubleorPrice = 0;
			int ogAmfColorSize = deteleRepeatValue3.size();
			if(!selectGlOjAmfColorPriceList.isEmpty()) {
				if (bs01dModel.equals(wgGiletModel) || et15dModel.equals(wgGiletModel)) {
					Integer optionBranchDoublePrice = selectGlOjAmfColorPriceList.get(0).getMoapDoublePrice();
					optionBranchDoubleorPrice = ogAmfColorSize * optionBranchDoublePrice;
				} else {
					Integer optionBranchDoublePrice = selectGlOjAmfColorPriceList.get(0).getMoapPrice();
					optionBranchDoubleorPrice = ogAmfColorSize * optionBranchDoublePrice;
				}
			}
			order.setGlAmfColorWsPrice(optionBranchDoubleorPrice);
		}
	}

	/**
	 * ボタンホール色指定の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectGlOjBhColorPriceList
	 * @return
	 */
	public void standardGlOgBhColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectGlOjBhColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// 標準JACKETのボタンホール色指定
			String ogBhColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace1();
			String ogBhColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace2();
			String ogBhColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace3();
			String ogBhColorPlace4 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace4();
			String ogBhColorPlace5 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace5();
			String ogBhColorPlace6 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace6();

			String ogBhColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor1();
			String ogBhColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor2();
			String ogBhColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor3();
			String ogBhColor4 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor4();
			String ogBhColor5 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor5();
			String ogBhColor6 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor6();

			List<String> ogBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(ogBhColorPlace1, ogBhColor1, ogBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ogBhColorPlace2, ogBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ogBhColorPlace3, ogBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ogBhColorPlace4, ogBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ogBhColorPlace5, ogBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ogBhColorPlace6, ogBhColor6, deteleRepeatValue5);

			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal ogBhColorSize = new BigDecimal(deteleRepeatValue6.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectGlOjBhColorWageList.isEmpty()) {
				mowWage = selectGlOjBhColorWageList.get(0).getMowWage();
			}
			optionBranchWage = ogBhColorSize.multiply(mowWage);
			order.setGlBtnholeColorWsWage(optionBranchWage);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードJACKETのボタンホール色指定
			String tgBhColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace1();
			String tgBhColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace2();
			String tgBhColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace3();
			String tgBhColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace4();
			String tgBhColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace5();
			String tgBhColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace6();

			String tgBhColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor1();
			String tgBhColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor2();
			String tgBhColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor3();
			String tgBhColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor4();
			String tgBhColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor5();
			String tgBhColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor6();

			List<String> tgBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tgBhColorPlace1, tgBhColor1, tgBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tgBhColorPlace2, tgBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tgBhColorPlace3, tgBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tgBhColorPlace4, tgBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(tgBhColorPlace5, tgBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(tgBhColorPlace6, tgBhColor6, deteleRepeatValue5);

			BigDecimal tptionBranchWage = new BigDecimal(0);
			BigDecimal tgBhColorSize = new BigDecimal(deteleRepeatValue6.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectGlOjBhColorWageList.isEmpty()) {
				mowWage = selectGlOjBhColorWageList.get(0).getMowWage();
			}
			tptionBranchWage = tgBhColorSize.multiply(mowWage);
			order.setGlBtnholeColorWsWage(tptionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルJACKETのボタンホール色指定
			String wgBhColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace1();
			String wgBhColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace2();
			String wgBhColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace3();
			String wgBhColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace4();
			String wgBhColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace5();
			String wgBhColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace6();

			String wgBhColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor1();
			String wgBhColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor2();
			String wgBhColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor3();
			String wgBhColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor4();
			String wgBhColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor5();
			String wgBhColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor6();

			List<String> wgBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wgBhColorPlace1, wgBhColor1, wgBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wgBhColorPlace2, wgBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wgBhColorPlace3, wgBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wgBhColorPlace4, wgBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wgBhColorPlace5, wgBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wgBhColorPlace6, wgBhColor6, deteleRepeatValue5);

			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wgBhColorSize = new BigDecimal(deteleRepeatValue6.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectGlOjBhColorWageList.isEmpty()) {
				mowWage = selectGlOjBhColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wgBhColorSize.multiply(mowWage);
			order.setGlBtnholeColorWsWage(wptionBranchWage);
		}
		
	}
	
	/**
	 * ボタンホール色指定の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectGlOjBhColorPriceList
	 * @return
	 */
	public void standardGlOgBhColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectGlOjBhColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// GILETモデル
			String OgGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// 標準JACKETのボタンホール色指定
			String ogBhColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace1();
			String ogBhColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace2();
			String ogBhColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace3();
			String ogBhColorPlace4 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace4();
			String ogBhColorPlace5 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace5();
			String ogBhColorPlace6 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace6();

			String ogBhColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor1();
			String ogBhColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor2();
			String ogBhColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor3();
			String ogBhColor4 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor4();
			String ogBhColor5 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor5();
			String ogBhColor6 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor6();

			List<String> ogBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(ogBhColorPlace1, ogBhColor1, ogBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ogBhColorPlace2, ogBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ogBhColorPlace3, ogBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ogBhColorPlace4, ogBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ogBhColorPlace5, ogBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ogBhColorPlace6, ogBhColor6, deteleRepeatValue5);

			Integer optionBranchDoubleorPrice = 0;
			int ogBhColorSize = deteleRepeatValue6.size();
			if (bs01dModel.equals(OgGiletModel) || et15dModel.equals(OgGiletModel)) {
				Integer optionBranchDoublePrice = selectGlOjBhColorPriceList.get(0).getMoapDoublePrice();
				optionBranchDoubleorPrice = ogBhColorSize * optionBranchDoublePrice;
			} else {
				Integer optionBranchDoublePrice = selectGlOjBhColorPriceList.get(0).getMoapPrice();
				optionBranchDoubleorPrice = ogBhColorSize * optionBranchDoublePrice;
			}
			order.setGlBtnholeColorWsPrice(optionBranchDoubleorPrice);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// GILETモデル
			String OgGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// タキシードJACKETのボタンホール色指定
			String tgBhColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace1();
			String tgBhColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace2();
			String tgBhColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace3();
			String tgBhColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace4();
			String tgBhColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace5();
			String tgBhColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace6();

			String tgBhColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor1();
			String tgBhColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor2();
			String tgBhColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor3();
			String tgBhColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor4();
			String tgBhColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor5();
			String tgBhColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor6();

			List<String> tgBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tgBhColorPlace1, tgBhColor1, tgBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tgBhColorPlace2, tgBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tgBhColorPlace3, tgBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tgBhColorPlace4, tgBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(tgBhColorPlace5, tgBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(tgBhColorPlace6, tgBhColor6, deteleRepeatValue5);

			Integer tptionBranchDoubleorPrice = 0;
			int tgBhColorSize = deteleRepeatValue6.size();
			if(!selectGlOjBhColorPriceList.isEmpty()) {
				if (bs01dModel.equals(OgGiletModel) || et15dModel.equals(OgGiletModel)) {
					Integer tptionBranchDoublePrice = selectGlOjBhColorPriceList.get(0).getMoapDoublePrice();
					tptionBranchDoubleorPrice = tgBhColorSize * tptionBranchDoublePrice;
				} else {
					Integer tptionBranchDoublePrice = selectGlOjBhColorPriceList.get(0).getMoapPrice();
					tptionBranchDoubleorPrice = tgBhColorSize * tptionBranchDoublePrice;
				}
			}
			order.setGlBtnholeColorWsPrice(tptionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// GILETモデル
			String OgGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// ウォッシャブルJACKETのボタンホール色指定
			String wgBhColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace1();
			String wgBhColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace2();
			String wgBhColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace3();
			String wgBhColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace4();
			String wgBhColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace5();
			String wgBhColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace6();

			String wgBhColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor1();
			String wgBhColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor2();
			String wgBhColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor3();
			String wgBhColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor4();
			String wgBhColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor5();
			String wgBhColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor6();

			List<String> wgBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wgBhColorPlace1, wgBhColor1, wgBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wgBhColorPlace2, wgBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wgBhColorPlace3, wgBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wgBhColorPlace4, wgBhColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wgBhColorPlace5, wgBhColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wgBhColorPlace6, wgBhColor6, deteleRepeatValue5);

			Integer wptionBranchDoubleorPrice = 0;
			int wgBhColorSize = deteleRepeatValue6.size();
			if(!selectGlOjBhColorPriceList.isEmpty()) {
				if (bs01dModel.equals(OgGiletModel) || et15dModel.equals(OgGiletModel)) {
					Integer wptionBranchDoublePrice = selectGlOjBhColorPriceList.get(0).getMoapDoublePrice();
					wptionBranchDoubleorPrice = wgBhColorSize * wptionBranchDoublePrice;
				} else {
					Integer wptionBranchDoublePrice = selectGlOjBhColorPriceList.get(0).getMoapPrice();
					wptionBranchDoubleorPrice = wgBhColorSize * wptionBranchDoublePrice;
				}
			}
			order.setGlBtnholeColorWsPrice(wptionBranchDoubleorPrice);
		}
		
	}
	
	/**
	 *  ボタン付け糸指定の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectGlOjByColorWageList
	 */
	public void standardGlOgByColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectGlOjByColorWageList) {
		
		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// 標準JACKETのボタン付け糸指定
			String ogByColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace1();
			String ogByColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace2();
			String ogByColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace3();
			String ogByColorPlace4 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace4();
			String ogByColorPlace5 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace5();
			String ogByColorPlace6 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace6();
			String ogByColorPlace7 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace7();
			String ogByColorPlace8 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace8();
			String ogByColorPlace9 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace9();
			String ogByColorPlace10 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace10();

			String ogByColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor1();
			String ogByColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor2();
			String ogByColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor3();
			String ogByColor4 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor4();
			String ogByColor5 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor5();
			String ogByColor6 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor6();
			String ogByColor7 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor7();
			String ogByColor8 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor8();
			String ogByColor9 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor9();
			String ogByColor10 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor10();

			List<String> ogBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(ogByColorPlace1, ogByColor1, ogBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ogByColorPlace2, ogByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ogByColorPlace3, ogByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ogByColorPlace4, ogByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ogByColorPlace5, ogByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ogByColorPlace6, ogByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(ogByColorPlace7, ogByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(ogByColorPlace8, ogByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(ogByColorPlace9, ogByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(ogByColorPlace10, ogByColor10, deteleRepeatValue9);

			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal ogBhColorSize = new BigDecimal(deteleRepeatValue10.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectGlOjByColorWageList.isEmpty()) {
				mowWage = selectGlOjByColorWageList.get(0).getMowWage();
			}
			optionBranchWage = ogBhColorSize.multiply(mowWage);
			order.setGlBtnthreadColorWsWage(optionBranchWage);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードJACKETのボタン付け糸指定
			String tgByColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace1();
			String tgByColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace2();
			String tgByColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace3();
			String tgByColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace4();
			String tgByColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace5();
			String tgByColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace6();
			String tgByColorPlace7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace7();
			String tgByColorPlace8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace8();
			String tgByColorPlace9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace9();
			String tgByColorPlace10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace10();

			String tgByColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor1();
			String tgByColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor2();
			String tgByColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor3();
			String tgByColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor4();
			String tgByColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor5();
			String tgByColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor6();
			String tgByColor7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor7();
			String tgByColor8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor8();
			String tgByColor9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor9();
			String tgByColor10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor10();

			List<String> tgBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tgByColorPlace1, tgByColor1, tgBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tgByColorPlace2, tgByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tgByColorPlace3, tgByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tgByColorPlace4, tgByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(tgByColorPlace5, tgByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(tgByColorPlace6, tgByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(tgByColorPlace7, tgByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(tgByColorPlace8, tgByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(tgByColorPlace9, tgByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(tgByColorPlace10, tgByColor10, deteleRepeatValue9);

			BigDecimal tptionBranchWage = new BigDecimal(0);
			BigDecimal tgBhColorSize = new BigDecimal(deteleRepeatValue10.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectGlOjByColorWageList.isEmpty()) {
				mowWage = selectGlOjByColorWageList.get(0).getMowWage();
			}
			tptionBranchWage = tgBhColorSize.multiply(mowWage);
			order.setGlBtnthreadColorWsWage(tptionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルJACKETのボタン付け糸指定
			String wgByColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace1();
			String wgByColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace2();
			String wgByColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace3();
			String wgByColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace4();
			String wgByColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace5();
			String wgByColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace6();
			String wgByColorPlace7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace7();
			String wgByColorPlace8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace8();
			String wgByColorPlace9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace9();
			String wgByColorPlace10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace10();

			String wgByColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor1();
			String wgByColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor2();
			String wgByColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor3();
			String wgByColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor4();
			String wgByColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor5();
			String wgByColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor6();
			String wgByColor7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor7();
			String wgByColor8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor8();
			String wgByColor9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor9();
			String wgByColor10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor10();

			List<String> wgBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wgByColorPlace1, wgByColor1, wgBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wgByColorPlace2, wgByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wgByColorPlace3, wgByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wgByColorPlace4, wgByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wgByColorPlace5, wgByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wgByColorPlace6, wgByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(wgByColorPlace7, wgByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(wgByColorPlace8, wgByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(wgByColorPlace9, wgByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(wgByColorPlace10, wgByColor10, deteleRepeatValue9);

			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wgBhColorSize = new BigDecimal(deteleRepeatValue10.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectGlOjByColorWageList.isEmpty()) {
				mowWage = selectGlOjByColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wgBhColorSize.multiply(mowWage);
			order.setGlBtnthreadColorWsWage(wptionBranchWage);
		}
	}

	/**
	 * ボタン付け糸指定の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectGlOjByColorPriceList
	 * @return
	 */
	public void standardGlOgByColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectGlOjByColorPriceList) {
		
		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// GILETモデル
			String ogGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// 標準JACKETのボタン付け糸指定
			String ogByColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace1();
			String ogByColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace2();
			String ogByColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace3();
			String ogByColorPlace4 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace4();
			String ogByColorPlace5 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace5();
			String ogByColorPlace6 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace6();
			String ogByColorPlace7 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace7();
			String ogByColorPlace8 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace8();
			String ogByColorPlace9 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace9();
			String ogByColorPlace10 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace10();

			String ogByColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor1();
			String ogByColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor2();
			String ogByColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor3();
			String ogByColor4 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor4();
			String ogByColor5 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor5();
			String ogByColor6 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor6();
			String ogByColor7 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor7();
			String ogByColor8 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor8();
			String ogByColor9 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor9();
			String ogByColor10 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor10();

			List<String> ogBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(ogByColorPlace1, ogByColor1, ogBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(ogByColorPlace2, ogByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(ogByColorPlace3, ogByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(ogByColorPlace4, ogByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(ogByColorPlace5, ogByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(ogByColorPlace6, ogByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(ogByColorPlace7, ogByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(ogByColorPlace8, ogByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(ogByColorPlace9, ogByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(ogByColorPlace10, ogByColor10, deteleRepeatValue9);

			Integer optionBranchDoubleorPrice = 0;
			int ogBhColorSize = deteleRepeatValue10.size();
			if(!selectGlOjByColorPriceList.isEmpty()) {
				if (bs01dModel.equals(ogGiletModel) || et15dModel.equals(ogGiletModel)) {
					Integer optionBranchDoublePrice = selectGlOjByColorPriceList.get(0).getMoapDoublePrice();
					optionBranchDoubleorPrice = ogBhColorSize * optionBranchDoublePrice;
				} else {
					Integer optionBranchPrice = selectGlOjByColorPriceList.get(0).getMoapPrice();
					optionBranchDoubleorPrice = ogBhColorSize * optionBranchPrice;
				}
			}
			order.setGlBtnthreadColorWsPrice(optionBranchDoubleorPrice);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// GILETモデル
			String tgGiletModel = orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// タキシードJACKETのボタン付け糸指定
			String tgByColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace1();
			String tgByColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace2();
			String tgByColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace3();
			String tgByColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace4();
			String tgByColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace5();
			String tgByColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace6();
			String tgByColorPlace7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace7();
			String tgByColorPlace8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace8();
			String tgByColorPlace9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace9();
			String tgByColorPlace10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace10();

			String tgByColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor1();
			String tgByColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor2();
			String tgByColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor3();
			String tgByColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor4();
			String tgByColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor5();
			String tgByColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor6();
			String tgByColor7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor7();
			String tgByColor8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor8();
			String tgByColor9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor9();
			String tgByColor10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor10();

			List<String> tgBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tgByColorPlace1, tgByColor1, tgBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tgByColorPlace2, tgByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tgByColorPlace3, tgByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tgByColorPlace4, tgByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(tgByColorPlace5, tgByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(tgByColorPlace6, tgByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(tgByColorPlace7, tgByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(tgByColorPlace8, tgByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(tgByColorPlace9, tgByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(tgByColorPlace10, tgByColor10, deteleRepeatValue9);

			Integer tptionBranchDoubleorPrice = 0;
			int tgBhColorSize = deteleRepeatValue10.size();
			if(!selectGlOjByColorPriceList.isEmpty()) {
				if (bs01dModel.equals(tgGiletModel) || et15dModel.equals(tgGiletModel)) {
					Integer tptionBranchDoublePrice = selectGlOjByColorPriceList.get(0).getMoapDoublePrice();
					tptionBranchDoubleorPrice = tgBhColorSize * tptionBranchDoublePrice;
				} else {
					Integer tptionBranchPrice = selectGlOjByColorPriceList.get(0).getMoapPrice();
					tptionBranchDoubleorPrice = tgBhColorSize * tptionBranchPrice;
				}
			}
			order.setGlBtnthreadColorWsPrice(tptionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// GILETモデル
			String OgGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModelMap()
					.get(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel());
			// BS01-D
			String bs01dModel = "BS01-D";
			// ET15-D
			String et15dModel = "ET15-D";
			// ウォッシャブルJACKETのボタン付け糸指定
			String wgByColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace1();
			String wgByColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace2();
			String wgByColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace3();
			String wgByColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace4();
			String wgByColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace5();
			String wgByColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace6();
			String wgByColorPlace7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace7();
			String wgByColorPlace8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace8();
			String wgByColorPlace9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace9();
			String wgByColorPlace10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace10();

			String wgByColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor1();
			String wgByColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor2();
			String wgByColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor3();
			String wgByColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor4();
			String wgByColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor5();
			String wgByColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor6();
			String wgByColor7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor7();
			String wgByColor8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor8();
			String wgByColor9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor9();
			String wgByColor10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor10();

			List<String> wgBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wgByColorPlace1, wgByColor1, wgBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wgByColorPlace2, wgByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wgByColorPlace3, wgByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wgByColorPlace4, wgByColor4, deteleRepeatValue3);
			List<String> deteleRepeatValue5 = deteleRepeatValue(wgByColorPlace5, wgByColor5, deteleRepeatValue4);
			List<String> deteleRepeatValue6 = deteleRepeatValue(wgByColorPlace6, wgByColor6, deteleRepeatValue5);
			List<String> deteleRepeatValue7 = deteleRepeatValue(wgByColorPlace7, wgByColor7, deteleRepeatValue6);
			List<String> deteleRepeatValue8 = deteleRepeatValue(wgByColorPlace8, wgByColor8, deteleRepeatValue7);
			List<String> deteleRepeatValue9 = deteleRepeatValue(wgByColorPlace9, wgByColor9, deteleRepeatValue8);
			List<String> deteleRepeatValue10 = deteleRepeatValue(wgByColorPlace10, wgByColor10, deteleRepeatValue9);

			Integer wptionBranchDoubleorPrice = 0;
			int wgBhColorSize = deteleRepeatValue10.size();
			if(!selectGlOjByColorPriceList.isEmpty()) {
				if (bs01dModel.equals(OgGiletModel) || et15dModel.equals(OgGiletModel)) {
					Integer wptionBranchDoublePrice = selectGlOjByColorPriceList.get(0).getMoapDoublePrice();
					wptionBranchDoubleorPrice = wgBhColorSize * wptionBranchDoublePrice;
				} else {
					Integer wptionBranchPrice = selectGlOjByColorPriceList.get(0).getMoapPrice();
					wptionBranchDoubleorPrice = wgBhColorSize * wptionBranchPrice;
				}
			}
			order.setGlBtnthreadColorWsPrice(wptionBranchDoubleorPrice);
		}
	}
	
	/**
	 * ステッチ箇所変更の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectPtOgStitchModifyWageList
	 * @return
	 */
	public void standardPtOgStitchModifyPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPtOgStitchModifyWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 :標準
		if("9000101".equals(productCategory)) {
			// 標準PANTSのステッチ箇所変更
			String opStitchModifyPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace1();
			String opStitchModifyPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace2();
			String opStitchModifyPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace3();
			String opStitchModifyPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace4();

			List<String> opStitchModifyPlaceList = new ArrayList<>();
			opStitchModifyPlaceList.add(opStitchModifyPlace1);
			opStitchModifyPlaceList.add(opStitchModifyPlace2);
			opStitchModifyPlaceList.add(opStitchModifyPlace3);
			opStitchModifyPlaceList.add(opStitchModifyPlace4);
			opStitchModifyPlaceList.removeAll(Collections.singleton(null));
			BigDecimal optionBranchWage = new BigDecimal(0);
			for (String opStitchModifyPlace : opStitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectPtOgStitchModifyWageList) {
					if (opStitchModifyPlace.equals(nextGenerationPrice.getMowOptionBranchCode())) {
						optionBranchWage = optionBranchWage.add(nextGenerationPrice.getMowWage());
					}
				}
			}
			order.setPtStitchPlcWsWage(optionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTSのステッチ箇所変更
			String wpStitchModifyPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace1();
			String wpStitchModifyPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace2();
			String wpStitchModifyPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace3();
			String wpStitchModifyPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace4();

			List<String> wpStitchModifyPlaceList = new ArrayList<>();
			wpStitchModifyPlaceList.add(wpStitchModifyPlace1);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace2);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace3);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace4);
			wpStitchModifyPlaceList.removeAll(Collections.singleton(null));
			BigDecimal wptionBranchWage = new BigDecimal(0);
			for (String wpStitchModifyPlace : wpStitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectPtOgStitchModifyWageList) {
					if (wpStitchModifyPlace.equals(nextGenerationPrice.getMowOptionBranchCode())) {
						wptionBranchWage = wptionBranchWage.add(nextGenerationPrice.getMowWage());
					}
				}
			}
			order.setPtStitchPlcWsWage(wptionBranchWage);
		}
	}

	/**
	 * ステッチ箇所変更の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectPtOgStitchModifyPriceList
	 * @return
	 */
	public void standardPtOgStitchModifyPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPtOgStitchModifyPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 :標準
		if("9000101".equals(productCategory)) {
			// 標準PANTSのステッチ箇所変更
			String opStitchModifyPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace1();
			String opStitchModifyPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace2();
			String opStitchModifyPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace3();
			String opStitchModifyPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace4();

			List<String> opStitchModifyPlaceList = new ArrayList<>();
			opStitchModifyPlaceList.add(opStitchModifyPlace1);
			opStitchModifyPlaceList.add(opStitchModifyPlace2);
			opStitchModifyPlaceList.add(opStitchModifyPlace3);
			opStitchModifyPlaceList.add(opStitchModifyPlace4);
			opStitchModifyPlaceList.removeAll(Collections.singleton(null));
			Integer optionBranchDoubleorPrice = 0;
			for (String opStitchModifyPlace : opStitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectPtOgStitchModifyPriceList) {
					if (opStitchModifyPlace.equals(nextGenerationPrice.getMoapOptionBranchCode())) {
						optionBranchDoubleorPrice += nextGenerationPrice.getMoapPrice();
					}
				}
			}
			order.setPtStitchPlcWsPrice(optionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTSのステッチ箇所変更
			String wpStitchModifyPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace1();
			String wpStitchModifyPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace2();
			String wpStitchModifyPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace3();
			String wpStitchModifyPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace4();

			List<String> wpStitchModifyPlaceList = new ArrayList<>();
			wpStitchModifyPlaceList.add(wpStitchModifyPlace1);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace2);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace3);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace4);
			wpStitchModifyPlaceList.removeAll(Collections.singleton(null));
			Integer wptionBranchDoubleorPrice = 0;
			for (String wpStitchModifyPlace : wpStitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectPtOgStitchModifyPriceList) {
					if (wpStitchModifyPlace.equals(nextGenerationPrice.getMoapOptionBranchCode())) {
						wptionBranchDoubleorPrice += nextGenerationPrice.getMoapPrice();
					}
				}
			}
			order.setPtStitchPlcWsPrice(wptionBranchDoubleorPrice);
		}
	}
	
	/**
	 *  AMF色指定の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectPtOjAmfColorWageList
	 */
	public void standardPtOpAmfColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPtOjAmfColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 :標準
		if("9000101".equals(productCategory)) {
			// 標準PANTSのAMF色指定
			String opAmfColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace1();
			String opAmfColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace2();
			String opAmfColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace3();
			String opAmfColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace4();

			String opAmfColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor1();
			String opAmfColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor2();
			String opAmfColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor3();
			String opAmfColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor4();

			List<String> opAmfColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(opAmfColorPlace1, opAmfColor1, opAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(opAmfColorPlace2, opAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(opAmfColorPlace3, opAmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(opAmfColorPlace4, opAmfColor4, deteleRepeatValue3);

			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal opAmfColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPtOjAmfColorWageList.isEmpty()) {
				mowWage = selectPtOjAmfColorWageList.get(0).getMowWage();
			}
			optionBranchWage = opAmfColorSize.multiply(mowWage);
			order.setPtAmfColorWsWage(optionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
				// ウォッシャブルPANTSのAMF色指定
				String wpAmfColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace1();
				String wpAmfColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace2();
				String wpAmfColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace3();
				String wpAmfColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace4();

				String wpAmfColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor1();
				String wpAmfColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor2();
				String wpAmfColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor3();
				String wpAmfColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor4();

				List<String> wpAmfColorsList = new ArrayList<>();
				List<String> deteleRepeatValue = deteleRepeatValue(wpAmfColorPlace1, wpAmfColor1, wpAmfColorsList);
				List<String> deteleRepeatValue2 = deteleRepeatValue(wpAmfColorPlace2, wpAmfColor2, deteleRepeatValue);
				List<String> deteleRepeatValue3 = deteleRepeatValue(wpAmfColorPlace3, wpAmfColor3, deteleRepeatValue2);
				List<String> deteleRepeatValue4 = deteleRepeatValue(wpAmfColorPlace4, wpAmfColor4, deteleRepeatValue3);

				BigDecimal wptionBranchWage = new BigDecimal(0);
				BigDecimal wpAmfColorSize = new BigDecimal(deteleRepeatValue4.size());
				BigDecimal mowWage = new BigDecimal(0);
				if(!selectPtOjAmfColorWageList.isEmpty()) {
					mowWage = selectPtOjAmfColorWageList.get(0).getMowWage();
				}
				wptionBranchWage = wpAmfColorSize.multiply(mowWage);
				order.setPtAmfColorWsWage(wptionBranchWage);
			}
	}

	/**
	 *  AMF色指定の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectPtOjAmfColorPriceList
	 */
	public void standardPtOpAmfColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPtOjAmfColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 :標準
		if("9000101".equals(productCategory)) {
			// 標準PANTSのAMF色指定
			String opAmfColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace1();
			String opAmfColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace2();
			String opAmfColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace3();
			String opAmfColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace4();

			String opAmfColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor1();
			String opAmfColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor2();
			String opAmfColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor3();
			String opAmfColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor4();

			List<String> opAmfColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(opAmfColorPlace1, opAmfColor1, opAmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(opAmfColorPlace2, opAmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(opAmfColorPlace3, opAmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(opAmfColorPlace4, opAmfColor4, deteleRepeatValue3);

			Integer optionBranchDoubleorPrice = 0;
			int opAmfColorSize = deteleRepeatValue4.size();
			Integer optionBranchDoublePrice = 0;
			if(!selectPtOjAmfColorPriceList.isEmpty()) {
				optionBranchDoublePrice = selectPtOjAmfColorPriceList.get(0).getMoapPrice();
			}
			optionBranchDoubleorPrice = opAmfColorSize * optionBranchDoublePrice;
			order.setPtAmfColorWsPrice(optionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
				// ウォッシャブルPANTSのAMF色指定
				String wpAmfColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace1();
				String wpAmfColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace2();
				String wpAmfColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace3();
				String wpAmfColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace4();

				String wpAmfColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor1();
				String wpAmfColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor2();
				String wpAmfColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor3();
				String wpAmfColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor4();

				List<String> wpAmfColorsList = new ArrayList<>();
				List<String> deteleRepeatValue = deteleRepeatValue(wpAmfColorPlace1, wpAmfColor1, wpAmfColorsList);
				List<String> deteleRepeatValue2 = deteleRepeatValue(wpAmfColorPlace2, wpAmfColor2, deteleRepeatValue);
				List<String> deteleRepeatValue3 = deteleRepeatValue(wpAmfColorPlace3, wpAmfColor3, deteleRepeatValue2);
				List<String> deteleRepeatValue4 = deteleRepeatValue(wpAmfColorPlace4, wpAmfColor4, deteleRepeatValue3);

				Integer wptionBranchDoubleorPrice = 0;
				int wpAmfColorSize = deteleRepeatValue4.size();
				Integer wptionBranchDoublePrice = 0;
				if(!selectPtOjAmfColorPriceList.isEmpty()) {
					wptionBranchDoublePrice = selectPtOjAmfColorPriceList.get(0).getMoapPrice();
				}
				wptionBranchDoubleorPrice = wpAmfColorSize * wptionBranchDoublePrice;
				order.setPtAmfColorWsPrice(wptionBranchDoubleorPrice);
			}
	}
	
	/**
	 * ボタンホール色指定の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectPtOjBhColorWageList
	 * @return
	 */
	public void standardPtOpBhColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPtOjBhColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 : 標準
		if("9000101".equals(productCategory)) {
			// 標準PANTSのボタンホール色指定
			String opBhColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace1();
			String opBhColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace2();
			String opBhColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace3();
			String opBhColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace4();

			String opBhColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor1();
			String opBhColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor2();
			String opBhColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor3();
			String opBhColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor4();

			List<String> opBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(opBhColorPlace1, opBhColor1, opBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(opBhColorPlace2, opBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(opBhColorPlace3, opBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(opBhColorPlace4, opBhColor4, deteleRepeatValue3);

			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal opBhColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage =  new BigDecimal(0);
			if(!selectPtOjBhColorWageList.isEmpty()) {
				mowWage = selectPtOjBhColorWageList.get(0).getMowWage();
			}
			optionBranchWage = opBhColorSize.multiply(mowWage);
			order.setPtBtnholeColorWsWage(optionBranchWage);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードPANTSのボタンホール色指定
			String tpBhColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace1();
			String tpBhColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace2();
			String tpBhColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace3();
			String tpBhColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace4();

			String tpBhColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor1();
			String tpBhColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor2();
			String tpBhColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor3();
			String tpBhColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor4();

			List<String> tpBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tpBhColorPlace1, tpBhColor1, tpBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tpBhColorPlace2, tpBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tpBhColorPlace3, tpBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tpBhColorPlace4, tpBhColor4, deteleRepeatValue3);

			BigDecimal tptionBranchWage = new BigDecimal(0);
			BigDecimal tpBhColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPtOjBhColorWageList.isEmpty()) {
				mowWage = selectPtOjBhColorWageList.get(0).getMowWage();	
			}
			tptionBranchWage = tpBhColorSize.multiply(mowWage);
			order.setPtBtnholeColorWsWage(tptionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTSのボタンホール色指定
			String wpBhColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace1();
			String wpBhColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace2();
			String wpBhColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace3();
			String wpBhColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace4();

			String wpBhColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor1();
			String wpBhColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor2();
			String wpBhColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor3();
			String wpBhColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor4();

			List<String> wpBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wpBhColorPlace1, wpBhColor1, wpBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wpBhColorPlace2, wpBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wpBhColorPlace3, wpBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wpBhColorPlace4, wpBhColor4, deteleRepeatValue3);

			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wpBhColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPtOjBhColorWageList.isEmpty()) {
				mowWage = selectPtOjBhColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wpBhColorSize.multiply(mowWage);
			order.setPtBtnholeColorWsWage(wptionBranchWage);
		}
	}

	/**
	 * ボタンホール色指定の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectPtOjBhColorPriceList
	 * @return
	 */
	public void standardPtOpBhColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPtOjBhColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0 : 標準
		if("9000101".equals(productCategory)) {
			// 標準PANTSのボタンホール色指定
			String opBhColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace1();
			String opBhColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace2();
			String opBhColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace3();
			String opBhColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace4();

			String opBhColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor1();
			String opBhColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor2();
			String opBhColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor3();
			String opBhColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor4();

			List<String> opBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(opBhColorPlace1, opBhColor1, opBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(opBhColorPlace2, opBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(opBhColorPlace3, opBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(opBhColorPlace4, opBhColor4, deteleRepeatValue3);

			Integer optionBranchDoubleorPrice = 0;
			int opBhColorSize = deteleRepeatValue4.size();
			Integer optionBranchDoublePrice = 0;
			if(!selectPtOjBhColorPriceList.isEmpty()) {
				optionBranchDoublePrice = selectPtOjBhColorPriceList.get(0).getMoapPrice();
			}
			optionBranchDoubleorPrice = opBhColorSize * optionBranchDoublePrice;
			order.setPtBtnholeColorWsPrice(optionBranchDoubleorPrice);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードPANTSのボタンホール色指定
			String tpBhColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace1();
			String tpBhColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace2();
			String tpBhColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace3();
			String tpBhColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace4();

			String tpBhColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor1();
			String tpBhColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor2();
			String tpBhColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor3();
			String tpBhColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor4();

			List<String> tpBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tpBhColorPlace1, tpBhColor1, tpBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tpBhColorPlace2, tpBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tpBhColorPlace3, tpBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tpBhColorPlace4, tpBhColor4, deteleRepeatValue3);

			Integer tptionBranchDoubleorPrice = 0;
			int tpBhColorSize = deteleRepeatValue4.size();
			Integer tptionBranchDoublePrice = 0;
			if(!selectPtOjBhColorPriceList.isEmpty()) {
				tptionBranchDoublePrice = selectPtOjBhColorPriceList.get(0).getMoapPrice();
			}
			tptionBranchDoubleorPrice = tpBhColorSize * tptionBranchDoublePrice;
			order.setPtBtnholeColorWsPrice(tptionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTSのボタンホール色指定
			String wpBhColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace1();
			String wpBhColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace2();
			String wpBhColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace3();
			String wpBhColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace4();

			String wpBhColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor1();
			String wpBhColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor2();
			String wpBhColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor3();
			String wpBhColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor4();

			List<String> wpBhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wpBhColorPlace1, wpBhColor1, wpBhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wpBhColorPlace2, wpBhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wpBhColorPlace3, wpBhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wpBhColorPlace4, wpBhColor4, deteleRepeatValue3);

			Integer wptionBranchDoubleorPrice = 0;
			int wpBhColorSize = deteleRepeatValue4.size();
			Integer wptionBranchDoublePrice = 0;
			if(!selectPtOjBhColorPriceList.isEmpty()) {
				wptionBranchDoublePrice = selectPtOjBhColorPriceList.get(0).getMoapPrice();
			}
			wptionBranchDoubleorPrice = wpBhColorSize * wptionBranchDoublePrice;
			order.setPtBtnholeColorWsPrice(wptionBranchDoubleorPrice);
		}
	}
	
	/**
	 * ボタン付け糸指定の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectPtOjByColorPriceList
	 * @return
	 */
	public void standardPtOpByColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPtOjByColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:
		if("9000101".equals(productCategory)) {
			// 標準PANTSのボタン付け糸指定
			String opByColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace1();
			String opByColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace2();
			String opByColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace3();
			String opByColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace4();

			String opByColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor1();
			String opByColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor2();
			String opByColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor3();
			String opByColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor4();

			List<String> opByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(opByColorPlace1, opByColor1, opByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(opByColorPlace2, opByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(opByColorPlace3, opByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(opByColorPlace4, opByColor4, deteleRepeatValue3);

			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal opByColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPtOjByColorWageList.isEmpty()) {
				mowWage = selectPtOjByColorWageList.get(0).getMowWage();
			}
			optionBranchWage = opByColorSize.multiply(mowWage);
			order.setPtBtnthreadColorWsWage(optionBranchWage);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードPANTSのボタン付け糸指定
			String tpByColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace1();
			String tpByColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace2();
			String tpByColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace3();
			String tpByColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace4();

			String tpByColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor1();
			String tpByColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor2();
			String tpByColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor3();
			String tpByColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor4();

			List<String> tpByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tpByColorPlace1, tpByColor1, tpByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tpByColorPlace2, tpByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tpByColorPlace3, tpByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tpByColorPlace4, tpByColor4, deteleRepeatValue3);

			BigDecimal tptionBranchWage = new BigDecimal(0);
			BigDecimal tpByColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPtOjByColorWageList.isEmpty()) {
				mowWage = selectPtOjByColorWageList.get(0).getMowWage();
			}
			tptionBranchWage = tpByColorSize.multiply(mowWage);
			order.setPtBtnthreadColorWsWage(tptionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTSのボタン付け糸指定
			String wpByColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace1();
			String wpByColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace2();
			String wpByColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace3();
			String wpByColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace4();

			String wpByColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor1();
			String wpByColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor2();
			String wpByColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor3();
			String wpByColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor4();

			List<String> wpByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wpByColorPlace1, wpByColor1, wpByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wpByColorPlace2, wpByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wpByColorPlace3, wpByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wpByColorPlace4, wpByColor4, deteleRepeatValue3);

			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wpByColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPtOjByColorWageList.isEmpty()) {
				mowWage = selectPtOjByColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wpByColorSize.multiply(mowWage);
			order.setPtBtnthreadColorWsWage(wptionBranchWage);
		}
	}

	/**
	 * ボタン付け糸指定の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectPtOjByColorPriceList
	 * @return
	 */
	public void standardPtOpByColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPtOjByColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:
		if("9000101".equals(productCategory)) {
			// 標準PANTSのボタン付け糸指定
			String opByColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace1();
			String opByColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace2();
			String opByColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace3();
			String opByColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace4();

			String opByColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor1();
			String opByColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor2();
			String opByColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor3();
			String opByColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor4();

			List<String> opByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(opByColorPlace1, opByColor1, opByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(opByColorPlace2, opByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(opByColorPlace3, opByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(opByColorPlace4, opByColor4, deteleRepeatValue3);

			Integer optionBranchDoubleorPrice = 0;
			int opByColorSize = deteleRepeatValue4.size();
			Integer optionBranchDoublePrice = 0;
			if(!selectPtOjByColorPriceList.isEmpty()) {
				optionBranchDoublePrice = selectPtOjByColorPriceList.get(0).getMoapPrice();
			}
			optionBranchDoubleorPrice = opByColorSize * optionBranchDoublePrice;
			order.setPtBtnthreadColorWsPrice(optionBranchDoubleorPrice);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードPANTSのボタン付け糸指定
			String tpByColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace1();
			String tpByColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace2();
			String tpByColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace3();
			String tpByColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace4();

			String tpByColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor1();
			String tpByColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor2();
			String tpByColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor3();
			String tpByColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor4();

			List<String> tpByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tpByColorPlace1, tpByColor1, tpByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tpByColorPlace2, tpByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tpByColorPlace3, tpByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tpByColorPlace4, tpByColor4, deteleRepeatValue3);

			Integer tptionBranchDoubleorPrice = 0;
			int tpByColorSize = deteleRepeatValue4.size();
			Integer tptionBranchDoublePrice = 0;
			if(!selectPtOjByColorPriceList.isEmpty()) {
				tptionBranchDoublePrice = selectPtOjByColorPriceList.get(0).getMoapPrice();
			}
			tptionBranchDoubleorPrice = tpByColorSize * tptionBranchDoublePrice;
			order.setPtBtnthreadColorWsPrice(tptionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTSのボタン付け糸指定
			String wpByColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace1();
			String wpByColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace2();
			String wpByColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace3();
			String wpByColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace4();

			String wpByColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor1();
			String wpByColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor2();
			String wpByColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor3();
			String wpByColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor4();

			List<String> wpByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wpByColorPlace1, wpByColor1, wpByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wpByColorPlace2, wpByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wpByColorPlace3, wpByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wpByColorPlace4, wpByColor4, deteleRepeatValue3);

			Integer wptionBranchDoubleorPrice = 0;
			int wpByColorSize = deteleRepeatValue4.size();
			Integer wptionBranchDoublePrice = 0;
			if(!selectPtOjByColorPriceList.isEmpty()) {
				wptionBranchDoublePrice = selectPtOjByColorPriceList.get(0).getMoapPrice();
			}
			wptionBranchDoubleorPrice = wpByColorSize * wptionBranchDoublePrice;
			order.setPtBtnthreadColorWsPrice(wptionBranchDoubleorPrice);
		}
	}
	
	/**
	 * ステッチ箇所変更の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectPt2OgStitchModifyWageList
	 * @return
	 */
	public void standardPt2Op2StitchModifyPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPt2OgStitchModifyWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// 標準JACKETのステッチ箇所変更
			String op2StitchModifyPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace1();
			String op2StitchModifyPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace2();
			String op2StitchModifyPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace3();
			String op2StitchModifyPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace4();

			List<String> op2StitchModifyPlaceList = new ArrayList<>();
			op2StitchModifyPlaceList.add(op2StitchModifyPlace1);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace2);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace3);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace4);
			op2StitchModifyPlaceList.removeAll(Collections.singleton(null));
			BigDecimal optionBranchWage = new BigDecimal(0);
			for (String op2StitchModifyPlace : op2StitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectPt2OgStitchModifyWageList) {
					if (op2StitchModifyPlace.equals(nextGenerationPrice.getMowOptionBranchCode())) {
						optionBranchWage = optionBranchWage.add(nextGenerationPrice.getMowWage());
					}
				}
			}
			order.setPt2StitchPlcWsWage(optionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルJACKETのステッチ箇所変更
			String wp2StitchModifyPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace1();
			String wp2StitchModifyPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace2();
			String wp2StitchModifyPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace3();
			String wp2StitchModifyPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace4();

			List<String> wp2StitchModifyPlaceList = new ArrayList<>();
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace1);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace2);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace3);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace4);
			wp2StitchModifyPlaceList.removeAll(Collections.singleton(null));
			BigDecimal wptionBranchWage = new BigDecimal(0);
			for (String wp2StitchModifyPlace : wp2StitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectPt2OgStitchModifyWageList) {
					if (wp2StitchModifyPlace.equals(nextGenerationPrice.getMowOptionBranchCode())) {
						wptionBranchWage = wptionBranchWage.add(nextGenerationPrice.getMowWage());
					}
				}
			}
			order.setPt2StitchPlcWsWage(wptionBranchWage);
		}
	}

	/**
	 * ステッチ箇所変更の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectPt2OgStitchModifyPriceList
	 * @return
	 */
	public void standardPt2Op2StitchModifyPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPt2OgStitchModifyPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// 標準PANTS2のステッチ箇所変更
			String op2StitchModifyPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace1();
			String op2StitchModifyPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace2();
			String op2StitchModifyPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace3();
			String op2StitchModifyPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace4();

			List<String> op2StitchModifyPlaceList = new ArrayList<>();
			op2StitchModifyPlaceList.add(op2StitchModifyPlace1);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace2);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace3);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace4);
			op2StitchModifyPlaceList.removeAll(Collections.singleton(null));
			Integer optionBranchDoubleorPrice = 0;
			for (String op2StitchModifyPlace : op2StitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectPt2OgStitchModifyPriceList) {
					if (op2StitchModifyPlace.equals(nextGenerationPrice.getMoapOptionBranchCode())) {
						optionBranchDoubleorPrice += nextGenerationPrice.getMoapPrice();
					}
				}
			}
			order.setPt2StitchPlcWsPrice(optionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTS2のステッチ箇所変更
			String wp2StitchModifyPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace1();
			String wp2StitchModifyPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace2();
			String wp2StitchModifyPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace3();
			String wp2StitchModifyPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace4();

			List<String> wp2StitchModifyPlaceList = new ArrayList<>();
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace1);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace2);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace3);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace4);
			wp2StitchModifyPlaceList.removeAll(Collections.singleton(null));
			Integer wptionBranchDoubleorPrice = 0;
			for (String wp2StitchModifyPlace : wp2StitchModifyPlaceList) {
				for (NextGenerationPrice nextGenerationPrice : selectPt2OgStitchModifyPriceList) {
					if (wp2StitchModifyPlace.equals(nextGenerationPrice.getMoapOptionBranchCode())) {
						wptionBranchDoubleorPrice += nextGenerationPrice.getMoapPrice();
					}
				}
			}
			order.setPt2StitchPlcWsPrice(wptionBranchDoubleorPrice);
		}
	}
	
	/**
	 * AMF色指定の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectPt2OjAmfColorWageList
	 * @return
	 */
	public void standardPt2Op2AmfColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPt2OjAmfColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:
		if("9000101".equals(productCategory)) {
			// 標準PANTS2のAMF色指定
			String op2AmfColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace1();
			String op2AmfColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace2();
			String op2AmfColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace3();
			String op2AmfColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace4();

			String op2AmfColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor1();
			String op2AmfColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor2();
			String op2AmfColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor3();
			String op2AmfColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor4();

			List<String> op2AmfColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(op2AmfColorPlace1, op2AmfColor1, op2AmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(op2AmfColorPlace2, op2AmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(op2AmfColorPlace3, op2AmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(op2AmfColorPlace4, op2AmfColor4, deteleRepeatValue3);

			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal op2AmfColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPt2OjAmfColorWageList.isEmpty()) {
				mowWage = selectPt2OjAmfColorWageList.get(0).getMowWage();
			}
			optionBranchWage = op2AmfColorSize.multiply(mowWage);
			order.setPt2AmfColorWsWage(optionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTSのAMF色指定
			String wp2AmfColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace1();
			String wp2AmfColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace2();
			String wp2AmfColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace3();
			String wp2AmfColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace4();

			String wp2AmfColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor1();
			String wp2AmfColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor2();
			String wp2AmfColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor3();
			String wp2AmfColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor4();

			List<String> wp2AmfColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wp2AmfColorPlace1, wp2AmfColor1, wp2AmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wp2AmfColorPlace2, wp2AmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wp2AmfColorPlace3, wp2AmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wp2AmfColorPlace4, wp2AmfColor4, deteleRepeatValue3);

			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wp2AmfColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPt2OjAmfColorWageList.isEmpty()) {
				mowWage = selectPt2OjAmfColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wp2AmfColorSize.multiply(mowWage);
			order.setPt2AmfColorWsWage(wptionBranchWage);
		}
	}

	/**
	 * AMF色指定の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectPt2OjAmfColorPriceList
	 * @return
	 */
	public void standardPt2Op2AmfColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPt2OjAmfColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:
		if("9000101".equals(productCategory)) {
			// 標準PANTS2のAMF色指定
			String op2AmfColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace1();
			String op2AmfColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace2();
			String op2AmfColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace3();
			String op2AmfColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace4();

			String op2AmfColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor1();
			String op2AmfColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor2();
			String op2AmfColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor3();
			String op2AmfColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor4();

			List<String> op2AmfColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(op2AmfColorPlace1, op2AmfColor1, op2AmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(op2AmfColorPlace2, op2AmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(op2AmfColorPlace3, op2AmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(op2AmfColorPlace4, op2AmfColor4, deteleRepeatValue3);

			Integer optionBranchDoubleorPrice = 0;
			int op2AmfColorSize = deteleRepeatValue4.size();
			Integer optionBranchDoublePrice = 0;
			if(!selectPt2OjAmfColorPriceList.isEmpty()) {
				optionBranchDoublePrice = selectPt2OjAmfColorPriceList.get(0).getMoapPrice();
			}
			optionBranchDoubleorPrice = op2AmfColorSize * optionBranchDoublePrice;
			order.setPt2AmfColorWsPrice(optionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTSのAMF色指定
			String wp2AmfColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace1();
			String wp2AmfColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace2();
			String wp2AmfColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace3();
			String wp2AmfColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace4();

			String wp2AmfColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor1();
			String wp2AmfColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor2();
			String wp2AmfColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor3();
			String wp2AmfColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor4();

			List<String> wp2AmfColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wp2AmfColorPlace1, wp2AmfColor1, wp2AmfColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wp2AmfColorPlace2, wp2AmfColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wp2AmfColorPlace3, wp2AmfColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wp2AmfColorPlace4, wp2AmfColor4, deteleRepeatValue3);

			Integer wptionBranchDoubleorPrice = 0;
			int wp2AmfColorSize = deteleRepeatValue4.size();
			Integer wptionBranchDoublePrice = 0;
			if(selectPt2OjAmfColorPriceList.isEmpty()) {
				wptionBranchDoublePrice = selectPt2OjAmfColorPriceList.get(0).getMoapPrice();
			}
			wptionBranchDoubleorPrice = wp2AmfColorSize * wptionBranchDoublePrice;
			order.setPt2AmfColorWsPrice(wptionBranchDoubleorPrice);
		}
	}
	
	/**
	 * ボタンホール色指定の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectPt2OjBhColorWageList
	 * @return
	 */
	public void standardPt2Op2BhColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPt2OjBhColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// 標準PANTS2のボタンホール色指定
			String op2BhColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace1();
			String op2BhColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace2();
			String op2BhColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace3();
			String op2BhColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace4();

			String op2BhColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor1();
			String op2BhColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor2();
			String op2BhColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor3();
			String op2BhColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor4();

			List<String> op2BhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(op2BhColorPlace1, op2BhColor1, op2BhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(op2BhColorPlace2, op2BhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(op2BhColorPlace3, op2BhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(op2BhColorPlace4, op2BhColor4, deteleRepeatValue3);

			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal op2BhColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPt2OjBhColorWageList.isEmpty()) {
				mowWage = selectPt2OjBhColorWageList.get(0).getMowWage();
			}
			optionBranchWage = op2BhColorSize.multiply(mowWage);
			order.setPt2BtnholeColorWsWage(optionBranchWage);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードPANTS2のボタンホール色指定
			String tp2BhColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace1();
			String tp2BhColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace2();
			String tp2BhColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace3();
			String tp2BhColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace4();

			String tp2BhColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor1();
			String tp2BhColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor2();
			String tp2BhColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor3();
			String tp2BhColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor4();

			List<String> tp2BhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tp2BhColorPlace1, tp2BhColor1, tp2BhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tp2BhColorPlace2, tp2BhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tp2BhColorPlace3, tp2BhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tp2BhColorPlace4, tp2BhColor4, deteleRepeatValue3);

			BigDecimal tptionBranchWage = new BigDecimal(0);
			BigDecimal tp2BhColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPt2OjBhColorWageList.isEmpty()) {
				mowWage = selectPt2OjBhColorWageList.get(0).getMowWage();
			}
			tptionBranchWage = tp2BhColorSize.multiply(mowWage);
			order.setPt2BtnholeColorWsWage(tptionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTS2のボタンホール色指定
			String wp2BhColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace1();
			String wp2BhColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace2();
			String wp2BhColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace3();
			String wp2BhColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace4();

			String wp2BhColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor1();
			String wp2BhColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor2();
			String wp2BhColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor3();
			String wp2BhColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor4();

			List<String> wp2BhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wp2BhColorPlace1, wp2BhColor1, wp2BhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wp2BhColorPlace2, wp2BhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wp2BhColorPlace3, wp2BhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wp2BhColorPlace4, wp2BhColor4, deteleRepeatValue3);

			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wp2BhColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPt2OjBhColorWageList.isEmpty()) {
				mowWage = selectPt2OjBhColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wp2BhColorSize.multiply(mowWage);
			order.setPt2BtnholeColorWsWage(wptionBranchWage);
		}
	}

	/**
	 * ボタンホール色指定の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectPt2OjBhColorPriceList
	 * @return
	 */
	public void standardPt2Op2BhColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPt2OjBhColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// 標準PANTS2のボタンホール色指定
			String op2BhColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace1();
			String op2BhColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace2();
			String op2BhColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace3();
			String op2BhColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace4();

			String op2BhColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor1();
			String op2BhColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor2();
			String op2BhColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor3();
			String op2BhColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor4();

			List<String> op2BhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(op2BhColorPlace1, op2BhColor1, op2BhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(op2BhColorPlace2, op2BhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(op2BhColorPlace3, op2BhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(op2BhColorPlace4, op2BhColor4, deteleRepeatValue3);

			Integer optionBranchDoubleorPrice = 0;
			int op2BhColorSize = deteleRepeatValue4.size();
			Integer optionBranchDoublePrice = 0;
			if(!selectPt2OjBhColorPriceList.isEmpty()) {
				optionBranchDoublePrice = selectPt2OjBhColorPriceList.get(0).getMoapPrice();
			}
			optionBranchDoubleorPrice = op2BhColorSize * optionBranchDoublePrice;
			order.setPt2BtnholeColorWsPrice(optionBranchDoubleorPrice);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードPANTS2のボタンホール色指定
			String tp2BhColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace1();
			String tp2BhColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace2();
			String tp2BhColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace3();
			String tp2BhColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace4();

			String tp2BhColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor1();
			String tp2BhColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor2();
			String tp2BhColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor3();
			String tp2BhColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor4();

			List<String> tp2BhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tp2BhColorPlace1, tp2BhColor1, tp2BhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tp2BhColorPlace2, tp2BhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tp2BhColorPlace3, tp2BhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tp2BhColorPlace4, tp2BhColor4, deteleRepeatValue3);

			Integer tptionBranchDoubleorPrice = 0;
			int tp2BhColorSize = deteleRepeatValue4.size();
			Integer tptionBranchDoublePrice = 0;
			if(!selectPt2OjBhColorPriceList.isEmpty()) {
				tptionBranchDoublePrice = selectPt2OjBhColorPriceList.get(0).getMoapPrice();
			}
			tptionBranchDoubleorPrice = tp2BhColorSize * tptionBranchDoublePrice;
			order.setPt2BtnholeColorWsPrice(tptionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTS2のボタンホール色指定
			String wp2BhColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace1();
			String wp2BhColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace2();
			String wp2BhColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace3();
			String wp2BhColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace4();

			String wp2BhColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor1();
			String wp2BhColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor2();
			String wp2BhColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor3();
			String wp2BhColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor4();

			List<String> wp2BhColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wp2BhColorPlace1, wp2BhColor1, wp2BhColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wp2BhColorPlace2, wp2BhColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wp2BhColorPlace3, wp2BhColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wp2BhColorPlace4, wp2BhColor4, deteleRepeatValue3);

			Integer wptionBranchDoubleorPrice = 0;
			int wp2BhColorSize = deteleRepeatValue4.size();
			Integer wptionBranchDoublePrice = 0;
			if(!selectPt2OjBhColorPriceList.isEmpty()) {
				wptionBranchDoublePrice = selectPt2OjBhColorPriceList.get(0).getMoapPrice();
			}
			wptionBranchDoubleorPrice = wp2BhColorSize * wptionBranchDoublePrice;
			order.setPt2BtnholeColorWsPrice(wptionBranchDoubleorPrice);
		}
	}
	
	/**
	 * ボタン付け糸指定の下代工賃
	 * @param orderCoForm
	 * @param order
	 * @param selectPt2OjByColorWageList
	 * @return
	 */
	public void standardPt2Op2ByColorPlaceNextWageCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPt2OjByColorWageList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// 標準PANTS2のボタン付け糸指定
			String op2ByColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace1();
			String op2ByColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace2();
			String op2ByColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace3();
			String op2ByColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace4();

			String op2ByColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor1();
			String op2ByColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor2();
			String op2ByColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor3();
			String op2ByColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor4();

			List<String> op2ByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(op2ByColorPlace1, op2ByColor1, op2ByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(op2ByColorPlace2, op2ByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(op2ByColorPlace3, op2ByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(op2ByColorPlace4, op2ByColor4, deteleRepeatValue3);

			BigDecimal optionBranchWage = new BigDecimal(0);
			BigDecimal op2ByColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPt2OjByColorWageList.isEmpty()) {
				mowWage = selectPt2OjByColorWageList.get(0).getMowWage();
			}
			optionBranchWage = op2ByColorSize.multiply(mowWage);
			order.setPt2BtnthreadColorWsWage(optionBranchWage);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードPANTS2のボタン付け糸指定
			String tp2ByColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace1();
			String tp2ByColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace2();
			String tp2ByColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace3();
			String tp2ByColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace4();

			String tp2ByColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor1();
			String tp2ByColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor2();
			String tp2ByColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor3();
			String tp2ByColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor4();

			List<String> tp2ByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tp2ByColorPlace1, tp2ByColor1, tp2ByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tp2ByColorPlace2, tp2ByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tp2ByColorPlace3, tp2ByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tp2ByColorPlace4, tp2ByColor4, deteleRepeatValue3);

			BigDecimal tptionBranchWage = new BigDecimal(0);
			BigDecimal tp2ByColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPt2OjByColorWageList.isEmpty()) {
				mowWage = selectPt2OjByColorWageList.get(0).getMowWage();
			}
			tptionBranchWage = tp2ByColorSize.multiply(mowWage);
			order.setPt2BtnthreadColorWsWage(tptionBranchWage);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTS2のボタン付け糸指定
			String wp2ByColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace1();
			String wp2ByColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace2();
			String wp2ByColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace3();
			String wp2ByColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace4();

			String wp2ByColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor1();
			String wp2ByColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor2();
			String wp2ByColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor3();
			String wp2ByColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor4();

			List<String> wp2ByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wp2ByColorPlace1, wp2ByColor1, wp2ByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wp2ByColorPlace2, wp2ByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wp2ByColorPlace3, wp2ByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wp2ByColorPlace4, wp2ByColor4, deteleRepeatValue3);

			BigDecimal wptionBranchWage = new BigDecimal(0);
			BigDecimal wp2ByColorSize = new BigDecimal(deteleRepeatValue4.size());
			BigDecimal mowWage = new BigDecimal(0);
			if(!selectPt2OjByColorWageList.isEmpty()) {
				mowWage = selectPt2OjByColorWageList.get(0).getMowWage();
			}
			wptionBranchWage = wp2ByColorSize.multiply(mowWage);
			order.setPt2BtnthreadColorWsWage(wptionBranchWage);
		}
	}

	/**
	 * ボタン付け糸指定の下代付属
	 * @param orderCoForm
	 * @param order
	 * @param selectPt2OjByColorPriceList
	 * @return
	 */
	public void standardPt2Op2ByColorPlaceNextPriceCount(OrderCoForm orderCoForm,
			Order order,List<NextGenerationPrice> selectPt2OjByColorPriceList) {

		String productCategory = orderCoForm.getProductCategory();
		// 0:標準
		if("9000101".equals(productCategory)) {
			// 標準PANTS2のボタン付け糸指定
			String op2ByColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace1();
			String op2ByColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace2();
			String op2ByColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace3();
			String op2ByColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace4();

			String op2ByColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor1();
			String op2ByColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor2();
			String op2ByColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor3();
			String op2ByColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor4();

			List<String> op2ByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(op2ByColorPlace1, op2ByColor1, op2ByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(op2ByColorPlace2, op2ByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(op2ByColorPlace3, op2ByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(op2ByColorPlace4, op2ByColor4, deteleRepeatValue3);

			Integer optionBranchDoubleorPrice = 0;
			int op2ByColorSize = deteleRepeatValue4.size();
			Integer optionBranchDoublePrice = 0;
			if(!selectPt2OjByColorPriceList.isEmpty()) {
				optionBranchDoublePrice = selectPt2OjByColorPriceList.get(0).getMoapPrice();
			}
			optionBranchDoubleorPrice = op2ByColorSize * optionBranchDoublePrice;
			order.setPt2BtnthreadColorWsPrice(optionBranchDoubleorPrice);
		}
		// 2:タキシード
		else if("9000102".equals(productCategory)) {
			// タキシードPANTS2のボタン付け糸指定
			String tp2ByColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace1();
			String tp2ByColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace2();
			String tp2ByColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace3();
			String tp2ByColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace4();

			String tp2ByColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor1();
			String tp2ByColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor2();
			String tp2ByColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor3();
			String tp2ByColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor4();

			List<String> tp2ByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(tp2ByColorPlace1, tp2ByColor1, tp2ByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(tp2ByColorPlace2, tp2ByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(tp2ByColorPlace3, tp2ByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(tp2ByColorPlace4, tp2ByColor4, deteleRepeatValue3);

			Integer tptionBranchDoubleorPrice = 0;
			int tp2ByColorSize = deteleRepeatValue4.size();
			Integer tptionBranchDoublePrice = 0;
			if(!selectPt2OjByColorPriceList.isEmpty()) {
				tptionBranchDoublePrice = selectPt2OjByColorPriceList.get(0).getMoapPrice();
			}
			tptionBranchDoubleorPrice = tp2ByColorSize * tptionBranchDoublePrice;
			order.setPt2BtnthreadColorWsPrice(tptionBranchDoubleorPrice);
		}
		// 1:ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// ウォッシャブルPANTS2のボタン付け糸指定
			String wp2ByColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace1();
			String wp2ByColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace2();
			String wp2ByColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace3();
			String wp2ByColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace4();

			String wp2ByColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor1();
			String wp2ByColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor2();
			String wp2ByColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor3();
			String wp2ByColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor4();

			List<String> wp2ByColorsList = new ArrayList<>();
			List<String> deteleRepeatValue = deteleRepeatValue(wp2ByColorPlace1, wp2ByColor1, wp2ByColorsList);
			List<String> deteleRepeatValue2 = deteleRepeatValue(wp2ByColorPlace2, wp2ByColor2, deteleRepeatValue);
			List<String> deteleRepeatValue3 = deteleRepeatValue(wp2ByColorPlace3, wp2ByColor3, deteleRepeatValue2);
			List<String> deteleRepeatValue4 = deteleRepeatValue(wp2ByColorPlace4, wp2ByColor4, deteleRepeatValue3);

			Integer wptionBranchDoubleorPrice = 0;
			int wp2ByColorSize = deteleRepeatValue4.size();
			Integer wptionBranchDoublePrice = 0;
			if(!selectPt2OjByColorPriceList.isEmpty()) {
				wptionBranchDoublePrice = selectPt2OjByColorPriceList.get(0).getMoapPrice();
			}
			wptionBranchDoubleorPrice = wp2ByColorSize * wptionBranchDoublePrice;
			order.setPt2BtnthreadColorWsPrice(wptionBranchDoubleorPrice);
		}
	}

	/**
	 * 
	 * @param changString
	 * @return
	 */
	public String deteleSomeSysmbol(String changString) {
		String replaceAfter = null;
		if (!"無料".equals(changString)) {
			if (changString.indexOf("￥") != -1) {
				replaceAfter = changString.replace("￥", "");
			}
			if (replaceAfter.indexOf(",") != -1) {
				replaceAfter = replaceAfter.replaceAll(",", "");
			}
		}
		if (replaceAfter == null) {
			replaceAfter = "0";
		}
		return replaceAfter;
	}

	/**
	 * 標準JACKET
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param ojStitchModifyPlaceMap
	 * @param jacketUpperPrice
	 * @param ojAmfColorsMap
	 * @param ojBhColorsMap
	 * @param ojByColorsMap
	 */
	public void setJkCheckBoxInDb(OrderCoForm orderCoForm, Order order, Map<String, String> ojStitchModifyPlaceMap,
			Map<String, String> jacketUpperPrice, Map<String, String> ojAmfColorsMap, Map<String, String> ojBhColorsMap,
			Map<String, String> ojByColorsMap) {
		// 袖釦
		order.setJkSleeveBtnRtPrice(0);
		// 内ポケット変更
		order.setJkInnerPktRtPrice(0);
		// ステッチ箇所変更
		String ojStitchModifyPlace = deteleSomeSysmbol(ojStitchModifyPlaceMap.get("ojStitchModifyPlaceMap"));
		Integer ojStitchModifyPlaceValue = 0;
		if (!"無料".equals(ojStitchModifyPlace)) {
			ojStitchModifyPlaceValue = Integer.parseInt(ojStitchModifyPlace);
		}
		order.setJkStitchPlcRtPrice(ojStitchModifyPlaceValue);
		// ダブルステッチ変更
		String ojDStitchModify = deteleSomeSysmbol(jacketUpperPrice.get("ojDStitchModifyPrice"));
		String ojDStitchModifyYes = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModify());
		Integer ojDStitchModifyValue = 0;
		if ("有り".equals(ojDStitchModifyYes)) {
			ojDStitchModifyValue = Integer.parseInt(ojDStitchModify);
		}
		order.setJkDblstitchPlcRtPrice(ojDStitchModifyValue);
		// AMF色指定
		String ojAmfColor = deteleSomeSysmbol(ojAmfColorsMap.get("ojAmfColorsMap"));
		Integer ojAmfColorValue = 0;
		if (!"無料".equals(ojAmfColor)) {
			ojAmfColorValue = Integer.parseInt(ojAmfColor);
		}
		order.setJkAmfColorRtPrice(ojAmfColorValue);
		// ボタンホール色指定
		String ojBhColor = deteleSomeSysmbol(ojBhColorsMap.get("ojBhColorsMap"));
		Integer ojBhColorValue = 0;
		if (!"無料".equals(ojBhColor)) {
			ojBhColorValue = Integer.parseInt(ojBhColor);
		}
		order.setJkBtnholePlcColorRtPrice(ojBhColorValue);
		// ボタン付け糸指定
		String ojByColor = ojByColorsMap.get("ojByColorsMap");
		Integer ojByColorValue = 0;
		if (!"無料".equals(ojByColor)) {
			ojByColorValue = Integer.parseInt(ojByColor);
		}
		order.setJkBtnthreadPlcColorRtPrice(ojByColorValue);
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param ogStitchModifyPlaceMap
	 * @param giletUpperPriceMap
	 * @param ogAmfColorPlaceMap
	 * @param ogBhColorsMap
	 * @param ogByColorsMap
	 */
	public void setGlCheckBoxInDb(OrderCoForm orderCoForm, Order order, Map<String, String> ogStitchModifyPlaceMap,
			Map<String, String> giletUpperPriceMap, Map<String, String> ogAmfColorPlaceMap,
			Map<String, String> ogBhColorsMap, Map<String, String> ogByColorsMap) {

		// ステッチ箇所変更
		String ogStitchModifyPlace = deteleSomeSysmbol(ogStitchModifyPlaceMap.get("ogStitchModifyPlaceMap"));
		Integer ogStitchModifyPlaceValue = 0;
		if (!"無料".equals(ogStitchModifyPlace)) {
			ogStitchModifyPlaceValue = Integer.parseInt(ogStitchModifyPlace);
		}
		order.setGlStitchPlcRtPrice(ogStitchModifyPlaceValue);
		// ダブルステッチ変更
		String ogDStitchModify = deteleSomeSysmbol(giletUpperPriceMap.get("ogDStitchModifyPrice"));
		String ogDStitchModifyYes = orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModifyMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModify());
		Integer ogDStitchModifyValue = 0;
		if ("有り".equals(ogDStitchModifyYes)) {
			if (!"無料".equals(ogDStitchModify)) {
				ogDStitchModifyValue = Integer.parseInt(ogDStitchModify);
			}
		}
		order.setGlDblstitchPlcRtPrice(ogDStitchModifyValue);
		// AMF色指定
		String ogAmfColorPlace = deteleSomeSysmbol(ogAmfColorPlaceMap.get("ogAmfColorPlaceMap"));
		Integer ogAmfColorValue = 0;
		if (!"無料".equals(ogAmfColorPlace)) {
			ogAmfColorValue = Integer.parseInt(ogAmfColorPlace);
		}
		order.setGlAmfColorRtPrice(ogAmfColorValue);
		// ボタンホール色指定
		String ogBhColor = ogBhColorsMap.get("ogBhColorsMap");
		Integer ogBhColorValue = 0;
		if (!"無料".equals(ogBhColor)) {
			ogBhColorValue = Integer.parseInt(ogBhColor);
		}
		order.setGlBtnholeColorRtPrice(ogBhColorValue);
		// ボタン付け糸指定
		String ogByColor = deteleSomeSysmbol(ogByColorsMap.get("ogByColorsMap"));
		Integer ogByColorValue = 0;
		if (!"無料".equals(ogByColor)) {
			ogByColorValue = Integer.parseInt(ogByColor);
		}
		order.setGlBtnthreadColorRtPrice(ogByColorValue);
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param opStitchModifyPlaceMap
	 * @param pantsUpperPriceMap
	 * @param opAmfColorsMap
	 * @param opBhColorsMap
	 * @param opByColorsMap
	 */
	public void setPtCheckBoxInDb(OrderCoForm orderCoForm, Order order, Map<String, String> opStitchModifyPlaceMap,
			Map<String, String> pantsUpperPriceMap, Map<String, String> opAmfColorsMap,
			Map<String, String> opBhColorsMap, Map<String, String> opByColorsMap) {
		// ベルトループ
		order.setPtBeltloopRtPrice(0);
		// ステッチ箇所変更
		String opStitchModifyPlace = deteleSomeSysmbol(opStitchModifyPlaceMap.get("opStitchModifyPlaceMap"));
		Integer opStitchModifyPlaceValue = 0;
		if (!"無料".equals(opStitchModifyPlace)) {
			opStitchModifyPlaceValue = Integer.parseInt(opStitchModifyPlace);
		}
		order.setPtStitchPlcRtPrice(opStitchModifyPlaceValue);
		// ダブルステッチ
		String opDStitch = deteleSomeSysmbol(pantsUpperPriceMap.get("opDStitchPrice"));
		String opDStitchYes = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpDStitch());
		Integer opDStitchValue = 0;
		if ("有り".equals(opDStitchYes)) {
			if (!"無料".equals(opDStitch)) {
				opDStitchValue = Integer.parseInt(opDStitch);
			}
		}
		order.setPtDblstitchPlcRtPrice(opDStitchValue);
		// AMF色指定
		String opAmfColor = deteleSomeSysmbol(opAmfColorsMap.get("opAmfColorsMap"));
		Integer opAmfColorValue = 0;
		if (!"無料".equals(opAmfColor)) {
			opAmfColorValue = Integer.parseInt(opAmfColor);
		}
		order.setPtAmfColorRtPrice(opAmfColorValue);
		// ボタンホール色指定
		String opBhColor = deteleSomeSysmbol(opBhColorsMap.get("opBhColorsMap"));
		Integer opBhColorValue = 0;
		if (!"無料".equals(opBhColor)) {
			opBhColorValue = Integer.parseInt(opBhColor);
		}
		order.setPtBtnholeColorRtPrice(opBhColorValue);
		// ボタン付け糸指定
		String opByColor = deteleSomeSysmbol(opByColorsMap.get("opByColorsMap"));
		Integer opByColorValue = 0;
		if (!"無料".equals(opByColor)) {
			opByColorValue = Integer.parseInt(opByColor);
		}
		order.setPtBtnthreadColorRtPrice(opByColorValue);
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param op2StitchModifyPlaceMap
	 * @param pants2UpperPriceMap
	 * @param op2AmfColorsMap
	 * @param op2BhColorsMap
	 * @param op2ByColorsMap
	 */
	public void setPt2CheckBoxInDb(OrderCoForm orderCoForm, Order order, Map<String, String> op2StitchModifyPlaceMap,
			Map<String, String> pants2UpperPriceMap, Map<String, String> op2AmfColorsMap,
			Map<String, String> op2BhColorsMap, Map<String, String> op2ByColorsMap) {
		// ベルトループ
		order.setPt2BeltloopRtPrice(0);
		// ステッチ箇所変更
		String op2StitchModifyPlace = deteleSomeSysmbol(op2StitchModifyPlaceMap.get("op2StitchModifyPlaceMap"));
		Integer op2StitchModifyPlaceValue = 0;
		if (!"無料".equals(op2StitchModifyPlace)) {
			op2StitchModifyPlaceValue = Integer.parseInt(op2StitchModifyPlace);
		}
		order.setPt2StitchPlcRtPrice(op2StitchModifyPlaceValue);
		// ダブルステッチ
		String op2DStitch = deteleSomeSysmbol(pants2UpperPriceMap.get("op2DStitchPrice"));
		String op2DStitchYes = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitchMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitch());
		Integer op2DStitchValue = 0;
		if ("有り".equals(op2DStitchYes)) {
			if (!"無料".equals(op2DStitch)) {
				op2DStitchValue = Integer.parseInt(op2DStitch);
			}
		}
		order.setPt2DblstitchPlcRtPrice(op2DStitchValue);
		// AMF色指定
		String op2AmfColor = deteleSomeSysmbol(op2AmfColorsMap.get("op2AmfColorsMap"));
		Integer op2AmfColorValue = 0;
		if (!"無料".equals(op2AmfColor)) {
			op2AmfColorValue = Integer.parseInt(op2AmfColor);
		}
		order.setPt2AmfColorRtPrice(op2AmfColorValue);
		// ボタンホール色指定
		String op2BhColor = deteleSomeSysmbol(op2BhColorsMap.get("op2BhColorsMap"));
		Integer op2BhColorValue = 0;
		if (!"無料".equals(op2BhColor)) {
			op2BhColorValue = Integer.parseInt(op2BhColor);
		}
		order.setPt2BtnholeColorRtPrice(op2BhColorValue);
		// ボタン付け糸指定
		String op2ByColor = deteleSomeSysmbol(op2ByColorsMap.get("op2ByColorsMap"));
		Integer op2ByColorValue = 0;
		if (!"無料".equals(op2ByColor)) {
			op2ByColorValue = Integer.parseInt(op2ByColor);
		}
		order.setPt2BtnthreadColorRtPrice(op2ByColorValue);
	}

	/**
	 * 
	 * @param InDbList
	 * @return
	 */
	public String severalCodeInDb(List<String> inDbList) {
		List<String> actualInDbList = new ArrayList<String>();
		for(int i = 0;i<inDbList.size();i++) {
			actualInDbList.add(inDbList.get(i));
		}
		actualInDbList.removeAll(Collections.singleton(null));
		if(!actualInDbList.isEmpty()) {
			StringBuffer stringbufferCodeValue = new StringBuffer();
			for (String simpleCodeValue : actualInDbList) {
				stringbufferCodeValue.append(",").append(simpleCodeValue);
			}
			String stringCode = stringbufferCodeValue.toString();
			String substrCode = null;
			if (stringCode != null && !stringCode.isEmpty()) {
				substrCode = stringCode.substring(1);
			}
			return substrCode;
		}
		else {
			return null;
		}
	}
	
	/**
	 * 
	 * @param inDbList
	 * @param colorInDbList
	 * @return
	 */
	public String severalColorCodeInDb(List<String> inDbList,List<String> colorInDbList) {
		List<String> actualInDbList = new ArrayList<String>();
		for(int i = 0; i<inDbList.size(); i++) {
			if(inDbList.get(i) == null) {
				colorInDbList.set(i, null);
			}
		}
		for(int j = 0; j<colorInDbList.size(); j++) {
			actualInDbList.add(colorInDbList.get(j));
		}
		actualInDbList.removeAll(Collections.singleton(null));
		if(!actualInDbList.isEmpty()) {
			StringBuffer stringbufferCodeValue = new StringBuffer();
			for (String simpleCodeValue : actualInDbList) {
				stringbufferCodeValue.append(",").append(simpleCodeValue);
			}
			String stringCode = stringbufferCodeValue.toString();
			String substrCode = null;
			if (stringCode != null && !stringCode.isEmpty()) {
				substrCode = stringCode.substring(1);
			}
			return substrCode;
		}
		else {
			return null;
		}
	}

	/**
	 * 
	 * @param InDbList
	 * @param ojInsidePktPlaceMap
	 * @return
	 */
	public String severalNameInDb(List<String> inDbList, Map<String, String> ojInsidePktPlaceMap) {
		List<String> actualInDbList = new ArrayList<String>();
		for(int i =0;i<inDbList.size();i++) {
			actualInDbList.add(inDbList.get(i));
		}
		actualInDbList.removeAll(Collections.singleton(null));
		if(!actualInDbList.isEmpty()) {
			StringBuffer stringbufferNameValue = new StringBuffer();
			for (String simpleNameValue : actualInDbList) {
				String simpleName = ojInsidePktPlaceMap.get(simpleNameValue);
				stringbufferNameValue.append(",").append(simpleName);
			}
			String stringName = stringbufferNameValue.toString();
			String substrName = null;
			if (stringName != null && !stringName.isEmpty()) {
				substrName = stringName.substring(1);
			}
			return substrName;
		}
		else {
			return null;
		}
	}
	
	/**
	 * 
	 * @param inDbList
	 * @param colorInDbList
	 * @param ojInsidePktPlaceMap
	 * @return
	 */
	public String severalColorNameInDb(List<String> inDbList,List<String> colorInDbList,Map<String, String> ojInsidePktPlaceMap) {
		colorInDbList.removeAll(Collections.singleton(null));
		if(!colorInDbList.isEmpty()) {
			StringBuffer stringbufferNameValue = new StringBuffer();
			for (String simpleNameValue : colorInDbList) {
				String simpleName = ojInsidePktPlaceMap.get(simpleNameValue);
				stringbufferNameValue.append(",").append(simpleName);
			}
			String stringName = stringbufferNameValue.toString();
			String substrName = null;
			if (stringName != null && !stringName.isEmpty()) {
				substrName = stringName.substring(1);
			}
			return substrName;
		}
		else {
			return null;
		}
	}

	/**
	 * タキシードJACKETのグループ項目名とコード
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutTuxedoJacketCheckBoxInDb(OrderCoForm orderCoForm, Order order) {
		
		// ボタンホール色指定
		String tjBhColor = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor();
		// ボタンホール色指定:有り
		String tjBhColorYes = "0003102";
		
		if(tjBhColorYes.equals(tjBhColor)) {
			// タキシードJACKETのボタンホール色指定
			String tjBhColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace1();
			String tjBhColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace2();
			String tjBhColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace3();
			String tjBhColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace4();
			String tjBhColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace5();
			String tjBhColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace6();
			String tjBhColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace7();
			String tjBhColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace8();
			String tjBhColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace9();
			String tjBhColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace10();
			String tjBhColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace11();
			String tjBhColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace12();
			String tjBhColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace13();
			String tjBhColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace14();
			String tjBhColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace15();
			String tjBhColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace16();
			String tjBhColorPlace17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace17();

			List<String> tjBhColorPlaceList = new ArrayList<>();
			tjBhColorPlaceList.add(tjBhColorPlace1);
			tjBhColorPlaceList.add(tjBhColorPlace2);
			tjBhColorPlaceList.add(tjBhColorPlace3);
			tjBhColorPlaceList.add(tjBhColorPlace4);
			tjBhColorPlaceList.add(tjBhColorPlace5);
			tjBhColorPlaceList.add(tjBhColorPlace6);
			tjBhColorPlaceList.add(tjBhColorPlace7);
			tjBhColorPlaceList.add(tjBhColorPlace8);
			tjBhColorPlaceList.add(tjBhColorPlace9);
			tjBhColorPlaceList.add(tjBhColorPlace10);
			tjBhColorPlaceList.add(tjBhColorPlace11);
			tjBhColorPlaceList.add(tjBhColorPlace12);
			tjBhColorPlaceList.add(tjBhColorPlace13);
			tjBhColorPlaceList.add(tjBhColorPlace14);
			tjBhColorPlaceList.add(tjBhColorPlace15);
			tjBhColorPlaceList.add(tjBhColorPlace16);
			tjBhColorPlaceList.add(tjBhColorPlace17);
			// JACKET_ボタンホール色指定_箇所コード
			String tjBhColorPlaceCodeInDb = severalCodeInDb(tjBhColorPlaceList);
			order.setJkBtnholeColorPlcCd(tjBhColorPlaceCodeInDb);
			// JACKET_ボタンホール色指定_箇所名
			Map<String, String> tjBhColorPlaceMap = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlaceMap();
			String tjBhColorPlaceNameInDb = severalNameInDb(tjBhColorPlaceList, tjBhColorPlaceMap);
			order.setJkBtnholeColorPlcN(tjBhColorPlaceNameInDb);

			String tjBhColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor1();
			String tjBhColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor2();
			String tjBhColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor3();
			String tjBhColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor4();
			String tjBhColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor5();
			String tjBhColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor6();
			String tjBhColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor7();
			String tjBhColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor8();
			String tjBhColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor9();
			String tjBhColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor10();
			String tjBhColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor11();
			String tjBhColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor12();
			String tjBhColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor13();
			String tjBhColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor14();
			String tjBhColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor15();
			String tjBhColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor16();
			String tjBhColor17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor17();

			List<String> tjBhColorsList = new ArrayList<>();
			tjBhColorsList.add(tjBhColor1);
			tjBhColorsList.add(tjBhColor2);
			tjBhColorsList.add(tjBhColor3);
			tjBhColorsList.add(tjBhColor4);
			tjBhColorsList.add(tjBhColor5);
			tjBhColorsList.add(tjBhColor6);
			tjBhColorsList.add(tjBhColor7);
			tjBhColorsList.add(tjBhColor8);
			tjBhColorsList.add(tjBhColor9);
			tjBhColorsList.add(tjBhColor10);
			tjBhColorsList.add(tjBhColor11);
			tjBhColorsList.add(tjBhColor12);
			tjBhColorsList.add(tjBhColor13);
			tjBhColorsList.add(tjBhColor14);
			tjBhColorsList.add(tjBhColor15);
			tjBhColorsList.add(tjBhColor16);
			tjBhColorsList.add(tjBhColor17);
			// JACKET_ボタンホール色指定_色コード
			String tjBhColorsCodeInDb = severalColorCodeInDb(tjBhColorPlaceList,tjBhColorsList);
			order.setJkBtnholeColorCd(tjBhColorsCodeInDb);
			// JACKET_ボタンホール色指定_色名
			Map<String, String> tjBhColorsMap = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorsMap();
			String tjBhColorsNameInDb = severalColorNameInDb(tjBhColorPlaceList,tjBhColorsList, tjBhColorsMap);
			order.setJkBtnholeColorNm(tjBhColorsNameInDb);
		}
		else {
			// JACKET_ボタンホール色指定_箇所コード
			order.setJkBtnholeColorPlcCd(null);
			// JACKET_ボタンホール色指定_箇所名
			order.setJkBtnholeColorPlcN(null);
			// JACKET_ボタンホール色指定_色コード
			order.setJkBtnholeColorCd(null);
			// JACKET_ボタンホール色指定_色名
			order.setJkBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String tjByColor = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor();
		// ボタン付け糸指定:有り
		String tjByColorYes = "0003402";
		
		if(tjByColorYes.equals(tjByColor)) {
			// タキシードJACKETのボタン付け糸指定
			String tjByColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace1();
			String tjByColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace2();
			String tjByColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace3();
			String tjByColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace4();
			String tjByColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace5();
			String tjByColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace6();
			String tjByColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace7();
			String tjByColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace8();
			String tjByColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace9();
			String tjByColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace10();
			String tjByColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace11();
			String tjByColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace12();
			String tjByColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace13();
			String tjByColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace14();
			String tjByColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace15();
			String tjByColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace16();

			List<String> tjByColorPlaceList = new ArrayList<>();
			tjByColorPlaceList.add(tjByColorPlace1);
			tjByColorPlaceList.add(tjByColorPlace2);
			tjByColorPlaceList.add(tjByColorPlace3);
			tjByColorPlaceList.add(tjByColorPlace4);
			tjByColorPlaceList.add(tjByColorPlace5);
			tjByColorPlaceList.add(tjByColorPlace6);
			tjByColorPlaceList.add(tjByColorPlace7);
			tjByColorPlaceList.add(tjByColorPlace8);
			tjByColorPlaceList.add(tjByColorPlace9);
			tjByColorPlaceList.add(tjByColorPlace10);
			tjByColorPlaceList.add(tjByColorPlace11);
			tjByColorPlaceList.add(tjByColorPlace12);
			tjByColorPlaceList.add(tjByColorPlace13);
			tjByColorPlaceList.add(tjByColorPlace14);
			tjByColorPlaceList.add(tjByColorPlace15);
			tjByColorPlaceList.add(tjByColorPlace16);
			// JACKET_ボタン付け糸指定_箇所コード
			String tjByColorPlaceCodeInDb = severalCodeInDb(tjByColorPlaceList);
			order.setJkBtnthreadColorPlcCd(tjByColorPlaceCodeInDb);
			// JACKET_ボタン付け糸指定_箇所名
			Map<String, String> tjByColorPlaceMap = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlaceMap();
			String tjByColorPlaceNameInDb = severalNameInDb(tjByColorPlaceList, tjByColorPlaceMap);
			order.setJkBtnthreadColorPlcN(tjByColorPlaceNameInDb);

			String tjByColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor1();
			String tjByColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor2();
			String tjByColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor3();
			String tjByColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor4();
			String tjByColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor5();
			String tjByColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor6();
			String tjByColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor7();
			String tjByColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor8();
			String tjByColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor9();
			String tjByColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor10();
			String tjByColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor11();
			String tjByColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor12();
			String tjByColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor13();
			String tjByColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor14();
			String tjByColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor15();
			String tjByColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor16();

			List<String> tjByColorsList = new ArrayList<>();
			tjByColorsList.add(tjByColor1);
			tjByColorsList.add(tjByColor2);
			tjByColorsList.add(tjByColor3);
			tjByColorsList.add(tjByColor4);
			tjByColorsList.add(tjByColor5);
			tjByColorsList.add(tjByColor6);
			tjByColorsList.add(tjByColor7);
			tjByColorsList.add(tjByColor8);
			tjByColorsList.add(tjByColor9);
			tjByColorsList.add(tjByColor10);
			tjByColorsList.add(tjByColor11);
			tjByColorsList.add(tjByColor12);
			tjByColorsList.add(tjByColor13);
			tjByColorsList.add(tjByColor14);
			tjByColorsList.add(tjByColor15);
			tjByColorsList.add(tjByColor16);
			// JACKET_ボタン付け糸指定_色コード
			String tjByColorsCodeInDb = severalColorCodeInDb(tjByColorPlaceList,tjByColorsList);
			order.setJkBtnthreadColorCd(tjByColorsCodeInDb);
			// JACKET_ボタン付け糸指定_色名
			Map<String, String> tjByColorsMap = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorsMap();
			String tjByColorsNameInDb = severalColorNameInDb(tjByColorPlaceList,tjByColorsList, tjByColorsMap);
			order.setJkBtnthreadColorNm(tjByColorsNameInDb);
		}
		else {
			// JACKET_ボタン付け糸指定_箇所コード
			order.setJkBtnthreadColorPlcCd(null);
			// JACKET_ボタン付け糸指定_箇所名
			order.setJkBtnthreadColorPlcN(null);
			// JACKET_ボタン付け糸指定_色コード
			order.setJkBtnthreadColorCd(null);
			// JACKET_ボタン付け糸指定_色名
			order.setJkBtnthreadColorNm(null);
		}
	}

	/**
	 * タキシードGILETのグループ項目名とコード
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutTuxedoGiletCheckBoxInDb(OrderCoForm orderCoForm, Order order) {
		
		// ボタンホール色指定
		String tgBhColor = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor();
		// ボタンホール色指定:有り
		String tgBhColorYes = "0001102";
		
		if(tgBhColorYes.equals(tgBhColor)) {
			// タキシードGILETのボタンホール色指定
			String tgBhColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace1();
			String tgBhColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace2();
			String tgBhColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace3();
			String tgBhColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace4();
			String tgBhColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace5();
			String tgBhColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace6();

			List<String> tgBhColorPlaceList = new ArrayList<>();
			tgBhColorPlaceList.add(tgBhColorPlace1);
			tgBhColorPlaceList.add(tgBhColorPlace2);
			tgBhColorPlaceList.add(tgBhColorPlace3);
			tgBhColorPlaceList.add(tgBhColorPlace4);
			tgBhColorPlaceList.add(tgBhColorPlace5);
			tgBhColorPlaceList.add(tgBhColorPlace6);
			// GILET_ボタンホール色指定_箇所コード
			String tgBhColorPlaceCodeInDb = severalCodeInDb(tgBhColorPlaceList);
			order.setGlBtnholeColorPlcCd(tgBhColorPlaceCodeInDb);
			// GILET_ボタンホール色指定_箇所名
			Map<String, String> tgBhColorPlaceMap = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlaceMap();
			String tjBhColorPlaceNameInDb = severalNameInDb(tgBhColorPlaceList, tgBhColorPlaceMap);
			order.setGlBtnholeColorPlcNm(tjBhColorPlaceNameInDb);

			String tgBhColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor1();
			String tgBhColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor2();
			String tgBhColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor3();
			String tgBhColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor4();
			String tgBhColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor5();
			String tgBhColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor6();

			List<String> tgBhColorsList = new ArrayList<>();
			tgBhColorsList.add(tgBhColor1);
			tgBhColorsList.add(tgBhColor2);
			tgBhColorsList.add(tgBhColor3);
			tgBhColorsList.add(tgBhColor4);
			tgBhColorsList.add(tgBhColor5);
			tgBhColorsList.add(tgBhColor6);
			// GILET_ボタンホール色指定_色コード
			String tgBhColorsCodeInDb = severalColorCodeInDb(tgBhColorPlaceList,tgBhColorsList);
			order.setGlBtnholeColorCd(tgBhColorsCodeInDb);
			// GILET_ボタンホール色指定_色名
			Map<String, String> tjBhColorsMap = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorsMap();
			String tjBhColorsNameInDb = severalColorNameInDb(tgBhColorPlaceList,tgBhColorsList, tjBhColorsMap);
			order.setGlBtnholeColorNm(tjBhColorsNameInDb);
		}
		else {
			// GILET_ボタンホール色指定_箇所コード
			order.setGlBtnholeColorPlcCd(null);
			// GILET_ボタンホール色指定_箇所名
			order.setGlBtnholeColorPlcNm(null);
			// GILET_ボタンホール色指定_色コード
			order.setGlBtnholeColorCd(null);
			// GILET_ボタンホール色指定_色名
			order.setGlBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String tgByColor = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor();
		// ボタン付け糸指定:有り
		String tgByColorYes = "0001402";
		
		if(tgByColorYes.equals(tgByColor)) {
			// タキシードGILETのボタン付け糸指定
			String tgByColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace1();
			String tgByColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace2();
			String tgByColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace3();
			String tgByColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace4();
			String tgByColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace5();
			String tgByColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace6();
			String tgByColorPlace7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace7();
			String tgByColorPlace8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace8();
			String tgByColorPlace9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace9();
			String tgByColorPlace10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace10();

			List<String> tgByColorPlaceList = new ArrayList<>();
			tgByColorPlaceList.add(tgByColorPlace1);
			tgByColorPlaceList.add(tgByColorPlace2);
			tgByColorPlaceList.add(tgByColorPlace3);
			tgByColorPlaceList.add(tgByColorPlace4);
			tgByColorPlaceList.add(tgByColorPlace5);
			tgByColorPlaceList.add(tgByColorPlace6);
			tgByColorPlaceList.add(tgByColorPlace7);
			tgByColorPlaceList.add(tgByColorPlace8);
			tgByColorPlaceList.add(tgByColorPlace9);
			tgByColorPlaceList.add(tgByColorPlace10);
			// GILET_ボタン付け糸指定_箇所コード
			String tgByColorPlaceCodeInDb = severalCodeInDb(tgByColorPlaceList);
			order.setGlBtnthreadColorPlcCd(tgByColorPlaceCodeInDb);
			// GILET_ボタン付け糸指定_箇所名
			Map<String, String> tgByColorPlaceMap = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlaceMap();
			String tgByColorPlaceNameInDb = severalNameInDb(tgByColorPlaceList, tgByColorPlaceMap);
			order.setGlBtnthreadColorPlcNm(tgByColorPlaceNameInDb);

			String tgByColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor1();
			String tgByColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor2();
			String tgByColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor3();
			String tgByColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor4();
			String tgByColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor5();
			String tgByColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor6();
			String tgByColor7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor7();
			String tgByColor8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor8();
			String tgByColor9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor9();
			String tgByColor10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor10();

			List<String> tgByColorsList = new ArrayList<>();
			tgByColorsList.add(tgByColor1);
			tgByColorsList.add(tgByColor2);
			tgByColorsList.add(tgByColor3);
			tgByColorsList.add(tgByColor4);
			tgByColorsList.add(tgByColor5);
			tgByColorsList.add(tgByColor6);
			tgByColorsList.add(tgByColor7);
			tgByColorsList.add(tgByColor8);
			tgByColorsList.add(tgByColor9);
			tgByColorsList.add(tgByColor10);
			// GILET_ボタン付け糸指定_色コード
			String tgByColorsCodeInDb = severalColorCodeInDb(tgByColorPlaceList,tgByColorsList);
			order.setGlBtnthreadColorCd(tgByColorsCodeInDb);
			// GILET_ボタン付け糸指定_色名
			Map<String, String> tgByColorsMap = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorsMap();
			String tgByColorsNameInDb = severalColorNameInDb(tgByColorPlaceList,tgByColorsList, tgByColorsMap);
			order.setGlBtnthreadColorNm(tgByColorsNameInDb);
		}
		else {
			// GILET_ボタン付け糸指定_箇所コード
			order.setGlBtnthreadColorPlcCd(null);
			// GILET_ボタン付け糸指定_箇所名
			order.setGlBtnthreadColorPlcNm(null);
			// GILET_ボタン付け糸指定_色コード
			order.setGlBtnthreadColorCd(null);
			// GILET_ボタン付け糸指定_色名
			order.setGlBtnthreadColorNm(null);
		}
		
	}

	/**
	 * タキシードPANTSのグループ項目名とコード
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutTuxedoPantsCheckBoxInDb(OrderCoForm orderCoForm, Order order) {
		
		// ベルトループ
		String tpBeltLoop = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoop();
		// ベルトループ:有り
		String tpBeltLoopYes = "0000701";
		
		if(tpBeltLoopYes.equals(tpBeltLoop)) {
			// タキシードPANTSのベルトループ箇所
			String tpBeltLoopPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace1();
			String tpBeltLoopPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace2();
			String tpBeltLoopPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace3();
			String tpBeltLoopPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace4();
			String tpBeltLoopPlace5 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace5();
			String tpBeltLoopPlace6 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace6();
			String tpBeltLoopPlace7 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace7();

			List<String> tpBeltLoopPlaceList = new ArrayList<>();
			tpBeltLoopPlaceList.add(tpBeltLoopPlace1);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace2);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace3);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace4);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace5);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace6);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace7);
			// PANTS_ベルトループ_コード
			String tpBeltLoopPlaceCodeInDb = severalCodeInDb(tpBeltLoopPlaceList);
			order.setPtBeltloopCd(tpBeltLoopPlaceCodeInDb);
			// PANTS_ベルトループ_名
			Map<String, String> tpBeltLoopPlaceMap = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlaceMap();
			String tpBeltLoopPlaceNameInDb = severalNameInDb(tpBeltLoopPlaceList, tpBeltLoopPlaceMap);
			order.setPtBeltloopNm(tpBeltLoopPlaceNameInDb);
		}
		else {
			// PANTS_ベルトループ_コード
			order.setPtBeltloopCd(null);
			// PANTS_ベルトループ_名
			order.setPtBeltloopNm(null);
		}
		
		// ボタンホール色指定
		String tpBhColor = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor();
		// ボタンホール色指定:有り
		String tpBhColorYes = "0002702";
		
		if(tpBhColorYes.equals(tpBhColor)) {
			// タキシードPANTSのボタンホール色指定箇所
			String tpBhColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace1();
			String tpBhColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace2();
			String tpBhColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace3();
			String tpBhColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace4();

			List<String> tpBhColorPlaceList = new ArrayList<>();
			tpBhColorPlaceList.add(tpBhColorPlace1);
			tpBhColorPlaceList.add(tpBhColorPlace2);
			tpBhColorPlaceList.add(tpBhColorPlace3);
			tpBhColorPlaceList.add(tpBhColorPlace4);
			// PANTS_ボタンホール色指定_箇所コード
			String tpBhColorPlaceCodeInDb = severalCodeInDb(tpBhColorPlaceList);
			order.setPtBtnholeColorPlcCd(tpBhColorPlaceCodeInDb);
			// PANTS_ボタンホール色指定_箇所名
			Map<String, String> tpBhColorPlaceMap = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlaceMap();
			String tpBhColorPlaceNameInDb = severalNameInDb(tpBhColorPlaceList, tpBhColorPlaceMap);
			order.setPtBtnholeColorPlcNm(tpBhColorPlaceNameInDb);

			String tpBhColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor1();
			String tpBhColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor2();
			String tpBhColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor3();
			String tpBhColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor4();

			List<String> tpBhColorsList = new ArrayList<>();
			tpBhColorsList.add(tpBhColor1);
			tpBhColorsList.add(tpBhColor2);
			tpBhColorsList.add(tpBhColor3);
			tpBhColorsList.add(tpBhColor4);
			// PANTS_ボタンホール色指定_色コード
			String tpBhColorsCodeInDb = severalColorCodeInDb(tpBhColorPlaceList,tpBhColorsList);
			order.setPtBtnholeColorCd(tpBhColorsCodeInDb);
			// PANTS_ボタンホール色指定_色名
			Map<String, String> tpBhColorsMap = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorsMap();
			String tpBhColorsNameInDb = severalColorNameInDb(tpBhColorPlaceList,tpBhColorsList, tpBhColorsMap);
			order.setPtBtnholeColorNm(tpBhColorsNameInDb);
		}
		else {
			// PANTS_ボタンホール色指定_箇所コード
			order.setPtBtnholeColorPlcCd(null);
			// PANTS_ボタンホール色指定_箇所名
			order.setPtBtnholeColorPlcNm(null);
			// PANTS_ボタンホール色指定_色コード
			order.setPtBtnholeColorCd(null);
			// PANTS_ボタンホール色指定_色名
			order.setPtBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String tpByColor = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor();
		// ボタン付け糸指定:有り
		String tpByColorYes = "0003002";

		if(tpByColorYes.equals(tpByColor)) {
			// タキシードPANTSのボタン付け糸指定箇所
			String tpByColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace1();
			String tpByColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace2();
			String tpByColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace3();
			String tpByColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace4();

			List<String> tpByColorPlaceList = new ArrayList<>();
			tpByColorPlaceList.add(tpByColorPlace1);
			tpByColorPlaceList.add(tpByColorPlace2);
			tpByColorPlaceList.add(tpByColorPlace3);
			tpByColorPlaceList.add(tpByColorPlace4);
			// PANTS_ボタン付け糸指定_箇所コード
			String tpByColorPlaceCodeInDb = severalCodeInDb(tpByColorPlaceList);
			order.setPtBtnthreadColorPlcCd(tpByColorPlaceCodeInDb);
			// PANTS_ボタン付け糸指定_箇所名
			Map<String, String> tpByColorPlaceMap = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlaceMap();
			String tpByColorPlaceNameInDb = severalNameInDb(tpByColorPlaceList, tpByColorPlaceMap);
			order.setPtBtnthreadColorPlcNm(tpByColorPlaceNameInDb);

			String tpByColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor1();
			String tpByColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor2();
			String tpByColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor3();
			String tpByColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor4();
			List<String> tpByColorsList = new ArrayList<>();
			tpByColorsList.add(tpByColor1);
			tpByColorsList.add(tpByColor2);
			tpByColorsList.add(tpByColor3);
			tpByColorsList.add(tpByColor4);
			// PANTS_ボタン付け糸指定_色コード
			String tpByColorsCodeInDb = severalColorCodeInDb(tpByColorPlaceList,tpByColorsList);
			order.setPtBtnthreadColorCd(tpByColorsCodeInDb);
			// PANTS_ボタン付け糸指定_色名
			Map<String, String> tpByColorsMap = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorsMap();
			String tpByColorsNameInDb = severalColorNameInDb(tpByColorPlaceList,tpByColorsList, tpByColorsMap);
			order.setPtBtnthreadColorNm(tpByColorsNameInDb);
		}
		else {
			// PANTS_ボタン付け糸指定_箇所コード
			order.setPtBtnthreadColorPlcCd(null);
			// PANTS_ボタン付け糸指定_箇所名
			order.setPtBtnthreadColorPlcNm(null);
			// PANTS_ボタン付け糸指定_色コード
			order.setPtBtnthreadColorCd(null);
			// PANTS_ボタン付け糸指定_色名
			order.setPtBtnthreadColorNm(null);
		}
		
	}

	/**
	 * タキシードPANTS2のグループ項目名とコード
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutTuxedoPants2CheckBoxInDb(OrderCoForm orderCoForm, Order order) {
		
		// ベルトループ
		String tp2BeltLoop = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoop();
		// ベルトループ:有り
		String tp2BeltLoopYes = "0000701";
		
		if(tp2BeltLoopYes.equals(tp2BeltLoop)) {
			// タキシードPANTSのベルトループ箇所
			String tp2BeltLoopPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace1();
			String tp2BeltLoopPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace2();
			String tp2BeltLoopPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace3();
			String tp2BeltLoopPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace4();
			String tp2BeltLoopPlace5 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace5();
			String tp2BeltLoopPlace6 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace6();
			String tp2BeltLoopPlace7 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace7();

			List<String> tp2BeltLoopPlaceList = new ArrayList<>();
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace1);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace2);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace3);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace4);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace5);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace6);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace7);
			// PANTS_ベルトループ_コード
			String tp2BeltLoopPlaceCodeInDb = severalCodeInDb(tp2BeltLoopPlaceList);
			order.setPt2BeltloopCd(tp2BeltLoopPlaceCodeInDb);
			// PANTS_ベルトループ_名
			Map<String, String> tp2BeltLoopPlaceMap = orderCoForm.getCoOptionPants2TuxedoInfo()
					.getTp2BeltLoopPlaceMap();
			String tp2BeltLoopPlaceNameInDb = severalNameInDb(tp2BeltLoopPlaceList, tp2BeltLoopPlaceMap);
			order.setPt2BeltloopNm(tp2BeltLoopPlaceNameInDb);
		}
		else {
			// PANTS_ベルトループ_コード
			order.setPt2BeltloopCd(null);
			// PANTS_ベルトループ_名
			order.setPt2BeltloopNm(null);
		}
		
		// ボタンホール色指定
		String tp2BhColor = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor();
		// ボタンホール色指定:有り
		String tp2BhColorYes = "0002702";

		if(tp2BhColorYes.equals(tp2BhColor)) {
			// タキシードPANTSのボタンホール色指定箇所
			String tp2BhColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace1();
			String tp2BhColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace2();
			String tp2BhColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace3();
			String tp2BhColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace4();

			List<String> tp2BhColorPlaceList = new ArrayList<>();
			tp2BhColorPlaceList.add(tp2BhColorPlace1);
			tp2BhColorPlaceList.add(tp2BhColorPlace2);
			tp2BhColorPlaceList.add(tp2BhColorPlace3);
			tp2BhColorPlaceList.add(tp2BhColorPlace4);
			// PANTS_ボタンホール色指定_箇所コード
			String tp2BhColorPlaceCodeInDb = severalCodeInDb(tp2BhColorPlaceList);
			order.setPt2BtnholeColorPlcCd(tp2BhColorPlaceCodeInDb);
			// PANTS_ボタンホール色指定_箇所名
			Map<String, String> tp2BhColorPlaceMap = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceMap();
			String tp2BhColorPlaceNameInDb = severalNameInDb(tp2BhColorPlaceList, tp2BhColorPlaceMap);
			order.setPt2BtnholeColorPlcNm(tp2BhColorPlaceNameInDb);

			String tp2BhColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor1();
			String tp2BhColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor2();
			String tp2BhColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor3();
			String tp2BhColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor4();

			List<String> tp2BhColorsList = new ArrayList<>();
			tp2BhColorsList.add(tp2BhColor1);
			tp2BhColorsList.add(tp2BhColor2);
			tp2BhColorsList.add(tp2BhColor3);
			tp2BhColorsList.add(tp2BhColor4);
			// PANTS_ボタンホール色指定_色コード
			String tp2BhColorsCodeInDb = severalColorCodeInDb(tp2BhColorPlaceList,tp2BhColorsList);
			order.setPt2BtnholeColorCd(tp2BhColorsCodeInDb);
			// PANTS_ボタンホール色指定_色名
			Map<String, String> tp2BhColorsMap = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlaceAllMap();
			String tp2BhColorsNameInDb = severalColorNameInDb(tp2BhColorPlaceList,tp2BhColorsList, tp2BhColorsMap);
			order.setPt2BtnholeColorNm(tp2BhColorsNameInDb);
		}
		else {
			// PANTS_ボタンホール色指定_箇所コード
			order.setPt2BtnholeColorPlcCd(null);
			// PANTS_ボタンホール色指定_箇所名
			order.setPt2BtnholeColorPlcNm(null);
			// PANTS_ボタンホール色指定_色コード
			order.setPt2BtnholeColorCd(null);
			// PANTS_ボタンホール色指定_色名
			order.setPt2BtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String tp2ByColor = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor();
		// ボタン付け糸指定:有り
		String tp2ByColorYes = "0003002";
		
		if(tp2ByColorYes.equals(tp2ByColor)) {
			// タキシードPANTSのボタン付け糸指定箇所
			String tp2ByColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace1();
			String tp2ByColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace2();
			String tp2ByColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace3();
			String tp2ByColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace4();

			List<String> tp2ByColorPlaceList = new ArrayList<>();
			tp2ByColorPlaceList.add(tp2ByColorPlace1);
			tp2ByColorPlaceList.add(tp2ByColorPlace2);
			tp2ByColorPlaceList.add(tp2ByColorPlace3);
			tp2ByColorPlaceList.add(tp2ByColorPlace4);
			// PANTS_ボタン付け糸指定_箇所コード
			String tp2ByColorPlaceCodeInDb = severalCodeInDb(tp2ByColorPlaceList);
			order.setPt2BtnthreadColorPlcCd(tp2ByColorPlaceCodeInDb);
			// PANTS_ボタン付け糸指定_箇所名
			Map<String, String> tp2ByColorPlaceMap = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceMap();
			String tp2ByColorPlaceNameInDb = severalNameInDb(tp2ByColorPlaceList, tp2ByColorPlaceMap);
			order.setPt2BtnthreadColorPlcNm(tp2ByColorPlaceNameInDb);

			String tp2ByColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor1();
			String tp2ByColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor2();
			String tp2ByColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor3();
			String tp2ByColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor4();
			List<String> tp2ByColorsList = new ArrayList<>();
			tp2ByColorsList.add(tp2ByColor1);
			tp2ByColorsList.add(tp2ByColor2);
			tp2ByColorsList.add(tp2ByColor3);
			tp2ByColorsList.add(tp2ByColor4);
			// PANTS_ボタン付け糸指定_色コード
			String tp2ByColorsCodeInDb = severalColorCodeInDb(tp2ByColorPlaceList,tp2ByColorsList);
			order.setPt2BtnthreadColorCd(tp2ByColorsCodeInDb);
			// PANTS_ボタン付け糸指定_色名
			Map<String, String> tp2ByColorsMap = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlaceAllMap();
			String tp2ByColorsNameInDb = severalColorNameInDb(tp2ByColorPlaceList,tp2ByColorsList, tp2ByColorsMap);
			order.setPt2BtnthreadColorNm(tp2ByColorsNameInDb);
		}
		else {
			// PANTS_ボタン付け糸指定_箇所コード
			order.setPtBtnthreadColorPlcCd(null);
			// PANTS_ボタン付け糸指定_箇所名
			order.setPt2BtnthreadColorPlcNm(null);
			// PANTS_ボタン付け糸指定_色コード
			order.setPt2BtnthreadColorCd(null);
			// PANTS_ボタン付け糸指定_色名
			order.setPt2BtnthreadColorNm(null);
		}
		
	}
	
	/**
	 * タキシードJACKETのグループ項目名とコード
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutTuxedoJacketCheckBoxInDbOnlyCode(OrderCoForm orderCoForm, Order order) {
		
		// ボタンホール色指定
		String tjBhColor = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor();
		// ボタンホール色指定:有り
		String tjBhColorYes = "0003102";
		
		if(tjBhColorYes.equals(tjBhColor)) {
			// タキシードJACKETのボタンホール色指定
			String tjBhColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace1();
			String tjBhColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace2();
			String tjBhColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace3();
			String tjBhColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace4();
			String tjBhColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace5();
			String tjBhColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace6();
			String tjBhColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace7();
			String tjBhColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace8();
			String tjBhColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace9();
			String tjBhColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace10();
			String tjBhColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace11();
			String tjBhColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace12();
			String tjBhColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace13();
			String tjBhColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace14();
			String tjBhColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace15();
			String tjBhColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace16();
			String tjBhColorPlace17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColorPlace17();

			List<String> tjBhColorPlaceList = new ArrayList<>();
			tjBhColorPlaceList.add(tjBhColorPlace1);
			tjBhColorPlaceList.add(tjBhColorPlace2);
			tjBhColorPlaceList.add(tjBhColorPlace3);
			tjBhColorPlaceList.add(tjBhColorPlace4);
			tjBhColorPlaceList.add(tjBhColorPlace5);
			tjBhColorPlaceList.add(tjBhColorPlace6);
			tjBhColorPlaceList.add(tjBhColorPlace7);
			tjBhColorPlaceList.add(tjBhColorPlace8);
			tjBhColorPlaceList.add(tjBhColorPlace9);
			tjBhColorPlaceList.add(tjBhColorPlace10);
			tjBhColorPlaceList.add(tjBhColorPlace11);
			tjBhColorPlaceList.add(tjBhColorPlace12);
			tjBhColorPlaceList.add(tjBhColorPlace13);
			tjBhColorPlaceList.add(tjBhColorPlace14);
			tjBhColorPlaceList.add(tjBhColorPlace15);
			tjBhColorPlaceList.add(tjBhColorPlace16);
			tjBhColorPlaceList.add(tjBhColorPlace17);
			// JACKET_ボタンホール色指定_箇所コード
			String tjBhColorPlaceCodeInDb = severalCodeInDb(tjBhColorPlaceList);
			order.setJkBtnholeColorPlcCd(tjBhColorPlaceCodeInDb);

			String tjBhColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor1();
			String tjBhColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor2();
			String tjBhColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor3();
			String tjBhColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor4();
			String tjBhColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor5();
			String tjBhColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor6();
			String tjBhColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor7();
			String tjBhColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor8();
			String tjBhColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor9();
			String tjBhColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor10();
			String tjBhColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor11();
			String tjBhColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor12();
			String tjBhColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor13();
			String tjBhColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor14();
			String tjBhColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor15();
			String tjBhColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor16();
			String tjBhColor17 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBhColor17();

			List<String> tjBhColorsList = new ArrayList<>();
			tjBhColorsList.add(tjBhColor1);
			tjBhColorsList.add(tjBhColor2);
			tjBhColorsList.add(tjBhColor3);
			tjBhColorsList.add(tjBhColor4);
			tjBhColorsList.add(tjBhColor5);
			tjBhColorsList.add(tjBhColor6);
			tjBhColorsList.add(tjBhColor7);
			tjBhColorsList.add(tjBhColor8);
			tjBhColorsList.add(tjBhColor9);
			tjBhColorsList.add(tjBhColor10);
			tjBhColorsList.add(tjBhColor11);
			tjBhColorsList.add(tjBhColor12);
			tjBhColorsList.add(tjBhColor13);
			tjBhColorsList.add(tjBhColor14);
			tjBhColorsList.add(tjBhColor15);
			tjBhColorsList.add(tjBhColor16);
			tjBhColorsList.add(tjBhColor17);
			// JACKET_ボタンホール色指定_色コード
			String tjBhColorsCodeInDb = severalColorCodeInDb(tjBhColorPlaceList,tjBhColorsList);
			order.setJkBtnholeColorCd(tjBhColorsCodeInDb);
		}
		else {
			// JACKET_ボタンホール色指定_箇所コード
			order.setJkBtnholeColorPlcCd(null);
			// JACKET_ボタンホール色指定_箇所名
			order.setJkBtnholeColorPlcN(null);
			// JACKET_ボタンホール色指定_色コード
			order.setJkBtnholeColorCd(null);
			// JACKET_ボタンホール色指定_色名
			order.setJkBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String tjByColor = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor();
		// ボタン付け糸指定:有り
		String tjByColorYes = "0003402";
		
		if(tjByColorYes.equals(tjByColor)) {
			// タキシードJACKETのボタン付け糸指定
			String tjByColorPlace1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace1();
			String tjByColorPlace2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace2();
			String tjByColorPlace3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace3();
			String tjByColorPlace4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace4();
			String tjByColorPlace5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace5();
			String tjByColorPlace6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace6();
			String tjByColorPlace7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace7();
			String tjByColorPlace8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace8();
			String tjByColorPlace9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace9();
			String tjByColorPlace10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace10();
			String tjByColorPlace11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace11();
			String tjByColorPlace12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace12();
			String tjByColorPlace13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace13();
			String tjByColorPlace14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace14();
			String tjByColorPlace15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace15();
			String tjByColorPlace16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColorPlace16();

			List<String> tjByColorPlaceList = new ArrayList<>();
			tjByColorPlaceList.add(tjByColorPlace1);
			tjByColorPlaceList.add(tjByColorPlace2);
			tjByColorPlaceList.add(tjByColorPlace3);
			tjByColorPlaceList.add(tjByColorPlace4);
			tjByColorPlaceList.add(tjByColorPlace5);
			tjByColorPlaceList.add(tjByColorPlace6);
			tjByColorPlaceList.add(tjByColorPlace7);
			tjByColorPlaceList.add(tjByColorPlace8);
			tjByColorPlaceList.add(tjByColorPlace9);
			tjByColorPlaceList.add(tjByColorPlace10);
			tjByColorPlaceList.add(tjByColorPlace11);
			tjByColorPlaceList.add(tjByColorPlace12);
			tjByColorPlaceList.add(tjByColorPlace13);
			tjByColorPlaceList.add(tjByColorPlace14);
			tjByColorPlaceList.add(tjByColorPlace15);
			tjByColorPlaceList.add(tjByColorPlace16);
			// JACKET_ボタン付け糸指定_箇所コード
			String tjByColorPlaceCodeInDb = severalCodeInDb(tjByColorPlaceList);
			order.setJkBtnthreadColorPlcCd(tjByColorPlaceCodeInDb);

			String tjByColor1 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor1();
			String tjByColor2 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor2();
			String tjByColor3 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor3();
			String tjByColor4 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor4();
			String tjByColor5 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor5();
			String tjByColor6 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor6();
			String tjByColor7 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor7();
			String tjByColor8 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor8();
			String tjByColor9 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor9();
			String tjByColor10 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor10();
			String tjByColor11 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor11();
			String tjByColor12 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor12();
			String tjByColor13 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor13();
			String tjByColor14 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor14();
			String tjByColor15 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor15();
			String tjByColor16 = orderCoForm.getCoOptionJacketTuxedoInfo().getTjByColor16();

			List<String> tjByColorsList = new ArrayList<>();
			tjByColorsList.add(tjByColor1);
			tjByColorsList.add(tjByColor2);
			tjByColorsList.add(tjByColor3);
			tjByColorsList.add(tjByColor4);
			tjByColorsList.add(tjByColor5);
			tjByColorsList.add(tjByColor6);
			tjByColorsList.add(tjByColor7);
			tjByColorsList.add(tjByColor8);
			tjByColorsList.add(tjByColor9);
			tjByColorsList.add(tjByColor10);
			tjByColorsList.add(tjByColor11);
			tjByColorsList.add(tjByColor12);
			tjByColorsList.add(tjByColor13);
			tjByColorsList.add(tjByColor14);
			tjByColorsList.add(tjByColor15);
			tjByColorsList.add(tjByColor16);
			// JACKET_ボタン付け糸指定_色コード
			String tjByColorsCodeInDb = severalColorCodeInDb(tjByColorPlaceList,tjByColorsList);
			order.setJkBtnthreadColorCd(tjByColorsCodeInDb);
		}
		else {
			// JACKET_ボタン付け糸指定_箇所コード
			order.setJkBtnthreadColorPlcCd(null);
			// JACKET_ボタン付け糸指定_箇所名
			order.setJkBtnthreadColorPlcN(null);
			// JACKET_ボタン付け糸指定_色コード
			order.setJkBtnthreadColorCd(null);
			// JACKET_ボタン付け糸指定_色名
			order.setJkBtnthreadColorNm(null);
		}
	}

	/**
	 * タキシードGILETのグループ項目名とコード
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutTuxedoGiletCheckBoxInDbOnlyCode(OrderCoForm orderCoForm, Order order) {
		
		// ボタンホール色指定
		String tgBhColor = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor();
		// ボタンホール色指定:有り
		String tgBhColorYes = "0001102";
		
		if(tgBhColorYes.equals(tgBhColor)) {
			// タキシードGILETのボタンホール色指定
			String tgBhColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace1();
			String tgBhColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace2();
			String tgBhColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace3();
			String tgBhColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace4();
			String tgBhColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace5();
			String tgBhColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColorPlace6();

			List<String> tgBhColorPlaceList = new ArrayList<>();
			tgBhColorPlaceList.add(tgBhColorPlace1);
			tgBhColorPlaceList.add(tgBhColorPlace2);
			tgBhColorPlaceList.add(tgBhColorPlace3);
			tgBhColorPlaceList.add(tgBhColorPlace4);
			tgBhColorPlaceList.add(tgBhColorPlace5);
			tgBhColorPlaceList.add(tgBhColorPlace6);
			// GILET_ボタンホール色指定_箇所コード
			String tgBhColorPlaceCodeInDb = severalCodeInDb(tgBhColorPlaceList);
			order.setGlBtnholeColorPlcCd(tgBhColorPlaceCodeInDb);

			String tgBhColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor1();
			String tgBhColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor2();
			String tgBhColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor3();
			String tgBhColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor4();
			String tgBhColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor5();
			String tgBhColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBhColor6();

			List<String> tgBhColorsList = new ArrayList<>();
			tgBhColorsList.add(tgBhColor1);
			tgBhColorsList.add(tgBhColor2);
			tgBhColorsList.add(tgBhColor3);
			tgBhColorsList.add(tgBhColor4);
			tgBhColorsList.add(tgBhColor5);
			tgBhColorsList.add(tgBhColor6);
			// GILET_ボタンホール色指定_色コード
			String tgBhColorsCodeInDb = severalColorCodeInDb(tgBhColorPlaceList,tgBhColorsList);
			order.setGlBtnholeColorCd(tgBhColorsCodeInDb);
		}
		else {
			// GILET_ボタンホール色指定_箇所コード
			order.setGlBtnholeColorPlcCd(null);
			// GILET_ボタンホール色指定_箇所名
			order.setGlBtnholeColorPlcNm(null);
			// GILET_ボタンホール色指定_色コード
			order.setGlBtnholeColorCd(null);
			// GILET_ボタンホール色指定_色名
			order.setGlBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String tgByColor = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor();
		// ボタン付け糸指定:有り
		String tgByColorYes = "0001402";
		
		if(tgByColorYes.equals(tgByColor)) {
			// タキシードGILETのボタン付け糸指定
			String tgByColorPlace1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace1();
			String tgByColorPlace2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace2();
			String tgByColorPlace3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace3();
			String tgByColorPlace4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace4();
			String tgByColorPlace5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace5();
			String tgByColorPlace6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace6();
			String tgByColorPlace7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace7();
			String tgByColorPlace8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace8();
			String tgByColorPlace9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace9();
			String tgByColorPlace10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColorPlace10();

			List<String> tgByColorPlaceList = new ArrayList<>();
			tgByColorPlaceList.add(tgByColorPlace1);
			tgByColorPlaceList.add(tgByColorPlace2);
			tgByColorPlaceList.add(tgByColorPlace3);
			tgByColorPlaceList.add(tgByColorPlace4);
			tgByColorPlaceList.add(tgByColorPlace5);
			tgByColorPlaceList.add(tgByColorPlace6);
			tgByColorPlaceList.add(tgByColorPlace7);
			tgByColorPlaceList.add(tgByColorPlace8);
			tgByColorPlaceList.add(tgByColorPlace9);
			tgByColorPlaceList.add(tgByColorPlace10);
			// GILET_ボタン付け糸指定_箇所コード
			String tgByColorPlaceCodeInDb = severalCodeInDb(tgByColorPlaceList);
			order.setGlBtnthreadColorPlcCd(tgByColorPlaceCodeInDb);

			String tgByColor1 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor1();
			String tgByColor2 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor2();
			String tgByColor3 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor3();
			String tgByColor4 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor4();
			String tgByColor5 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor5();
			String tgByColor6 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor6();
			String tgByColor7 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor7();
			String tgByColor8 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor8();
			String tgByColor9 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor9();
			String tgByColor10 = orderCoForm.getCoOptionGiletTuxedoInfo().getTgByColor10();

			List<String> tgByColorsList = new ArrayList<>();
			tgByColorsList.add(tgByColor1);
			tgByColorsList.add(tgByColor2);
			tgByColorsList.add(tgByColor3);
			tgByColorsList.add(tgByColor4);
			tgByColorsList.add(tgByColor5);
			tgByColorsList.add(tgByColor6);
			tgByColorsList.add(tgByColor7);
			tgByColorsList.add(tgByColor8);
			tgByColorsList.add(tgByColor9);
			tgByColorsList.add(tgByColor10);
			// GILET_ボタン付け糸指定_色コード
			String tgByColorsCodeInDb = severalColorCodeInDb(tgByColorPlaceList,tgByColorsList);
			order.setGlBtnthreadColorCd(tgByColorsCodeInDb);
		}
		else {
			// GILET_ボタン付け糸指定_箇所コード
			order.setGlBtnthreadColorPlcCd(null);
			// GILET_ボタン付け糸指定_箇所名
			order.setGlBtnthreadColorPlcNm(null);
			// GILET_ボタン付け糸指定_色コード
			order.setGlBtnthreadColorCd(null);
			// GILET_ボタン付け糸指定_色名
			order.setGlBtnthreadColorNm(null);
		}
		
	}

	/**
	 * タキシードPANTSのグループ項目名とコード
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutTuxedoPantsCheckBoxInDbOnlyCode(OrderCoForm orderCoForm, Order order) {
		
		// ベルトループ
		String tpBeltLoop = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoop();
		// ベルトループ:有り
		String tpBeltLoopYes = "0000701";
		
		if(tpBeltLoopYes.equals(tpBeltLoop)) {
			// タキシードPANTSのベルトループ箇所
			String tpBeltLoopPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace1();
			String tpBeltLoopPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace1();
			String tpBeltLoopPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace1();
			String tpBeltLoopPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace1();
			String tpBeltLoopPlace5 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace1();
			String tpBeltLoopPlace6 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace1();
			String tpBeltLoopPlace7 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBeltLoopPlace1();

			List<String> tpBeltLoopPlaceList = new ArrayList<>();
			tpBeltLoopPlaceList.add(tpBeltLoopPlace1);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace2);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace3);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace4);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace5);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace6);
			tpBeltLoopPlaceList.add(tpBeltLoopPlace7);
			// PANTS_ベルトループ_コード
			String tpBeltLoopPlaceCodeInDb = severalCodeInDb(tpBeltLoopPlaceList);
			order.setPtBeltloopCd(tpBeltLoopPlaceCodeInDb);
		}
		else {
			// PANTS_ベルトループ_コード
			order.setPtBeltloopCd(null);
			// PANTS_ベルトループ_名
			order.setPtBeltloopNm(null);
		}
		
		// ボタンホール色指定
		String tpBhColor = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor();
		// ボタンホール色指定:有り
		String tpBhColorYes = "0002702";
		
		if(tpBhColorYes.equals(tpBhColor)) {
			// タキシードPANTSのボタンホール色指定箇所
			String tpBhColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace1();
			String tpBhColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace2();
			String tpBhColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace3();
			String tpBhColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColorPlace4();

			List<String> tpBhColorPlaceList = new ArrayList<>();
			tpBhColorPlaceList.add(tpBhColorPlace1);
			tpBhColorPlaceList.add(tpBhColorPlace2);
			tpBhColorPlaceList.add(tpBhColorPlace3);
			tpBhColorPlaceList.add(tpBhColorPlace4);
			// PANTS_ボタンホール色指定_箇所コード
			String tpBhColorPlaceCodeInDb = severalCodeInDb(tpBhColorPlaceList);
			order.setPtBtnholeColorPlcCd(tpBhColorPlaceCodeInDb);

			String tpBhColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor1();
			String tpBhColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor2();
			String tpBhColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor3();
			String tpBhColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBhColor4();

			List<String> tpBhColorsList = new ArrayList<>();
			tpBhColorsList.add(tpBhColor1);
			tpBhColorsList.add(tpBhColor2);
			tpBhColorsList.add(tpBhColor3);
			tpBhColorsList.add(tpBhColor4);
			// PANTS_ボタンホール色指定_色コード
			String tpBhColorsCodeInDb = severalColorCodeInDb(tpBhColorPlaceList,tpBhColorsList);
			order.setPtBtnholeColorCd(tpBhColorsCodeInDb);
		}
		else {
			// PANTS_ボタンホール色指定_箇所コード
			order.setPtBtnholeColorPlcCd(null);
			// PANTS_ボタンホール色指定_箇所名
			order.setPtBtnholeColorPlcNm(null);
			// PANTS_ボタンホール色指定_色コード
			order.setPtBtnholeColorCd(null);
			// PANTS_ボタンホール色指定_色名
			order.setPtBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String tpByColor = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor();
		// ボタン付け糸指定:有り
		String tpByColorYes = "0003002";

		if(tpByColorYes.equals(tpByColor)) {
			// タキシードPANTSのボタン付け糸指定箇所
			String tpByColorPlace1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace1();
			String tpByColorPlace2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace2();
			String tpByColorPlace3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace3();
			String tpByColorPlace4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColorPlace4();

			List<String> tpByColorPlaceList = new ArrayList<>();
			tpByColorPlaceList.add(tpByColorPlace1);
			tpByColorPlaceList.add(tpByColorPlace2);
			tpByColorPlaceList.add(tpByColorPlace3);
			tpByColorPlaceList.add(tpByColorPlace4);
			// PANTS_ボタン付け糸指定_箇所コード
			String tpByColorPlaceCodeInDb = severalCodeInDb(tpByColorPlaceList);
			order.setPtBtnthreadColorPlcCd(tpByColorPlaceCodeInDb);

			String tpByColor1 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor1();
			String tpByColor2 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor2();
			String tpByColor3 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor3();
			String tpByColor4 = orderCoForm.getCoOptionPantsTuxedoInfo().getTpByColor4();
			List<String> tpByColorsList = new ArrayList<>();
			tpByColorsList.add(tpByColor1);
			tpByColorsList.add(tpByColor2);
			tpByColorsList.add(tpByColor3);
			tpByColorsList.add(tpByColor4);
			// PANTS_ボタン付け糸指定_色コード
			String tpByColorsCodeInDb = severalColorCodeInDb(tpByColorPlaceList,tpByColorsList);
			order.setPtBtnthreadColorCd(tpByColorsCodeInDb);
		}
		else {
			// PANTS_ボタン付け糸指定_箇所コード
			order.setPtBtnthreadColorPlcCd(null);
			// PANTS_ボタン付け糸指定_箇所名
			order.setPtBtnthreadColorPlcNm(null);
			// PANTS_ボタン付け糸指定_色コード
			order.setPtBtnthreadColorCd(null);
			// PANTS_ボタン付け糸指定_色名
			order.setPtBtnthreadColorNm(null);
		}
		
	}

	/**
	 * タキシードPANTS2のグループ項目名とコード
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutTuxedoPants2CheckBoxInDbOnlyCode(OrderCoForm orderCoForm, Order order) {
		
		// ベルトループ
		String tp2BeltLoop = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoop();
		// ベルトループ:有り
		String tp2BeltLoopYes = "0000701";
		
		if(tp2BeltLoopYes.equals(tp2BeltLoop)) {
			// タキシードPANTSのベルトループ箇所
			String tp2BeltLoopPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace1();
			String tp2BeltLoopPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace1();
			String tp2BeltLoopPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace1();
			String tp2BeltLoopPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace1();
			String tp2BeltLoopPlace5 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace1();
			String tp2BeltLoopPlace6 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace1();
			String tp2BeltLoopPlace7 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BeltLoopPlace1();

			List<String> tp2BeltLoopPlaceList = new ArrayList<>();
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace1);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace2);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace3);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace4);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace5);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace6);
			tp2BeltLoopPlaceList.add(tp2BeltLoopPlace7);
			// PANTS_ベルトループ_コード
			String tp2BeltLoopPlaceCodeInDb = severalCodeInDb(tp2BeltLoopPlaceList);
			order.setPt2BeltloopCd(tp2BeltLoopPlaceCodeInDb);
		}
		else {
			// PANTS_ベルトループ_コード
			order.setPt2BeltloopCd(null);
			// PANTS_ベルトループ_名
			order.setPt2BeltloopNm(null);
		}
		
		// ボタンホール色指定
		String tp2BhColor = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor();
		// ボタンホール色指定:有り
		String tp2BhColorYes = "0002702";

		if(tp2BhColorYes.equals(tp2BhColor)) {
			// タキシードPANTSのボタンホール色指定箇所
			String tp2BhColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace1();
			String tp2BhColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace2();
			String tp2BhColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace3();
			String tp2BhColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColorPlace4();

			List<String> tp2BhColorPlaceList = new ArrayList<>();
			tp2BhColorPlaceList.add(tp2BhColorPlace1);
			tp2BhColorPlaceList.add(tp2BhColorPlace2);
			tp2BhColorPlaceList.add(tp2BhColorPlace3);
			tp2BhColorPlaceList.add(tp2BhColorPlace4);
			// PANTS_ボタンホール色指定_箇所コード
			String tp2BhColorPlaceCodeInDb = severalCodeInDb(tp2BhColorPlaceList);
			order.setPt2BtnholeColorPlcCd(tp2BhColorPlaceCodeInDb);

			String tp2BhColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor1();
			String tp2BhColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor2();
			String tp2BhColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor3();
			String tp2BhColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BhColor4();

			List<String> tp2BhColorsList = new ArrayList<>();
			tp2BhColorsList.add(tp2BhColor1);
			tp2BhColorsList.add(tp2BhColor2);
			tp2BhColorsList.add(tp2BhColor3);
			tp2BhColorsList.add(tp2BhColor4);
			// PANTS_ボタンホール色指定_色コード
			String tp2BhColorsCodeInDb = severalColorCodeInDb(tp2BhColorPlaceList,tp2BhColorsList);
			order.setPt2BtnholeColorCd(tp2BhColorsCodeInDb);
		}
		else {
			// PANTS_ボタンホール色指定_箇所コード
			order.setPt2BtnholeColorPlcCd(null);
			// PANTS_ボタンホール色指定_箇所名
			order.setPt2BtnholeColorPlcNm(null);
			// PANTS_ボタンホール色指定_色コード
			order.setPt2BtnholeColorCd(null);
			// PANTS_ボタンホール色指定_色名
			order.setPt2BtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String tp2ByColor = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor();
		// ボタン付け糸指定:有り
		String tp2ByColorYes = "0003002";
		
		if(tp2ByColorYes.equals(tp2ByColor)) {
			// タキシードPANTSのボタン付け糸指定箇所
			String tp2ByColorPlace1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace1();
			String tp2ByColorPlace2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace2();
			String tp2ByColorPlace3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace3();
			String tp2ByColorPlace4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColorPlace4();

			List<String> tp2ByColorPlaceList = new ArrayList<>();
			tp2ByColorPlaceList.add(tp2ByColorPlace1);
			tp2ByColorPlaceList.add(tp2ByColorPlace2);
			tp2ByColorPlaceList.add(tp2ByColorPlace3);
			tp2ByColorPlaceList.add(tp2ByColorPlace4);
			// PANTS_ボタン付け糸指定_箇所コード
			String tp2ByColorPlaceCodeInDb = severalCodeInDb(tp2ByColorPlaceList);
			order.setPt2BtnthreadColorPlcCd(tp2ByColorPlaceCodeInDb);

			String tp2ByColor1 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor1();
			String tp2ByColor2 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor2();
			String tp2ByColor3 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor3();
			String tp2ByColor4 = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ByColor4();
			List<String> tp2ByColorsList = new ArrayList<>();
			tp2ByColorsList.add(tp2ByColor1);
			tp2ByColorsList.add(tp2ByColor2);
			tp2ByColorsList.add(tp2ByColor3);
			tp2ByColorsList.add(tp2ByColor4);
			// PANTS_ボタン付け糸指定_色コード
			String tp2ByColorsCodeInDb = severalColorCodeInDb(tp2ByColorPlaceList,tp2ByColorsList);
			order.setPt2BtnthreadColorCd(tp2ByColorsCodeInDb);
		}
		else {
			// PANTS_ボタン付け糸指定_箇所コード
			order.setPtBtnthreadColorPlcCd(null);
			// PANTS_ボタン付け糸指定_箇所名
			order.setPt2BtnthreadColorPlcNm(null);
			// PANTS_ボタン付け糸指定_色コード
			order.setPt2BtnthreadColorCd(null);
			// PANTS_ボタン付け糸指定_色名
			order.setPt2BtnthreadColorNm(null);
		}
		
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutWashableJacketCheckBoxInDb(OrderCoForm orderCoForm, Order order) {
		
		// ステッチ変更
		String wjStitchModify = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModify();
		// ステッチ変更:有り
		String wjStitchModifyYes = "0002402";
		
		if(wjStitchModifyYes.equals(wjStitchModify)) {
			// ウォッシャブルJACKETのステッチ変更箇所
			String wjStitchModifyPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace1();
			String wjStitchModifyPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace2();
			String wjStitchModifyPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace3();
			String wjStitchModifyPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace4();
			String wjStitchModifyPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace5();
			String wjStitchModifyPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace6();
			String wjStitchModifyPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace7();
			String wjStitchModifyPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace8();
			String wjStitchModifyPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace9();

			List<String> wjStitchModifyPlaceList = new ArrayList<>();
			wjStitchModifyPlaceList.add(wjStitchModifyPlace1);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace2);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace3);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace4);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace5);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace6);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace7);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace8);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace9);
			// JACKET_ステッチ箇所変更_コード
			String wjStitchModifyPlaceCodeInDb = severalCodeInDb(wjStitchModifyPlaceList);
			order.setJkStitchPlcCd(wjStitchModifyPlaceCodeInDb);
			// JACKET_ステッチ箇所変更_名
			Map<String, String> wjStitchModifyPlaceMap = orderCoForm.getCoOptionJacketWashableInfo()
					.getWjStitchModifyPlaceMap();
			String wjStitchModifyPlaceNameInDb = severalNameInDb(wjStitchModifyPlaceList, wjStitchModifyPlaceMap);
			order.setJkStitchPlcNm(wjStitchModifyPlaceNameInDb);
		}
		else {
			// JACKET_ステッチ箇所変更_コード
			order.setJkStitchPlcCd(null);
			// JACKET_ステッチ箇所変更_名
			order.setJkStitchPlcNm(null);
		}
		
		// ダブルステッチ変更
		String wjDStitchModify = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModify();
		// ダブルステッチ変更:有り
		String wjDStitchModifyYes = "0002602";
		
		if(wjDStitchModifyYes.equals(wjDStitchModify)) {
			// ウォッシャブルJACKETのダブルステッチ変更箇所
			String wjDStitchModifyPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace1();
			String wjDStitchModifyPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace2();
			String wjDStitchModifyPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace3();
			String wjDStitchModifyPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace4();
			String wjDStitchModifyPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace5();
			String wjDStitchModifyPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace6();
			String wjDStitchModifyPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace7();
			String wjDStitchModifyPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace8();
			String wjDStitchModifyPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace9();

			List<String> wjDStitchModifyPlaceList = new ArrayList<>();
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace1);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace2);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace3);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace4);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace5);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace6);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace7);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace8);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace9);
			// JACKET_ダブルステッチ_コード
			String wjDStitchModifyPlaceCodeInDb = severalCodeInDb(wjDStitchModifyPlaceList);
			order.setJkDblstitchPlcCd(wjDStitchModifyPlaceCodeInDb);
			// JACKET_ダブルステッチ_名
			Map<String, String> wjDStitchModifyPlaceMap = orderCoForm.getCoOptionJacketWashableInfo()
					.getWjDStitchModifyPlaceMap();
			String wjDStitchModifyPlaceNameInDb = severalNameInDb(wjDStitchModifyPlaceList, wjDStitchModifyPlaceMap);
			order.setJkDblstitchPlcNm(wjDStitchModifyPlaceNameInDb);
		}
		else {
			// JACKET_ダブルステッチ_コード
			order.setJkDblstitchPlcCd(null);
			// JACKET_ダブルステッチ_名
			order.setJkDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String wjAmfColor = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor();
		// AMF色指定：有り
		String wjAmfColorYes = "0002802";
		
		if(wjAmfColorYes.equals(wjAmfColor)) {
			// ウォッシャブルJACKETのAMF色指定箇所
			String wjAmfColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace1();
			String wjAmfColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace2();
			String wjAmfColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace3();
			String wjAmfColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace4();
			String wjAmfColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace5();
			String wjAmfColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace6();
			String wjAmfColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace7();
			String wjAmfColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace8();
			String wjAmfColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace9();
			String wjAmfColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace10();

			List<String> wjAmfColorPlaceList = new ArrayList<>();
			wjAmfColorPlaceList.add(wjAmfColorPlace1);
			wjAmfColorPlaceList.add(wjAmfColorPlace2);
			wjAmfColorPlaceList.add(wjAmfColorPlace3);
			wjAmfColorPlaceList.add(wjAmfColorPlace4);
			wjAmfColorPlaceList.add(wjAmfColorPlace5);
			wjAmfColorPlaceList.add(wjAmfColorPlace6);
			wjAmfColorPlaceList.add(wjAmfColorPlace7);
			wjAmfColorPlaceList.add(wjAmfColorPlace8);
			wjAmfColorPlaceList.add(wjAmfColorPlace9);
			wjAmfColorPlaceList.add(wjAmfColorPlace10);
			// JACKET_AMF色指定_箇所コード
			String wjAmfColorPlaceCodeInDb = severalCodeInDb(wjAmfColorPlaceList);
			order.setJkAmfColorPlcCd(wjAmfColorPlaceCodeInDb);
			// JACKET_AMF色指定_箇所名
			Map<String, String> wjAmfColorPlaceMap = orderCoForm.getCoOptionJacketWashableInfo()
					.getWjAmfColorPlaceMap();
			String wjAmfColorPlaceNameInDb = severalNameInDb(wjAmfColorPlaceList, wjAmfColorPlaceMap);
			order.setJkAmfColorPlcNm(wjAmfColorPlaceNameInDb);

			String wjAmfColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor1();
			String wjAmfColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor2();
			String wjAmfColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor3();
			String wjAmfColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor4();
			String wjAmfColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor5();
			String wjAmfColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor6();
			String wjAmfColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor7();
			String wjAmfColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor8();
			String wjAmfColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor9();
			String wjAmfColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor10();

			List<String> wjAmfColorsList = new ArrayList<>();
			wjAmfColorsList.add(wjAmfColor1);
			wjAmfColorsList.add(wjAmfColor2);
			wjAmfColorsList.add(wjAmfColor3);
			wjAmfColorsList.add(wjAmfColor4);
			wjAmfColorsList.add(wjAmfColor5);
			wjAmfColorsList.add(wjAmfColor6);
			wjAmfColorsList.add(wjAmfColor7);
			wjAmfColorsList.add(wjAmfColor8);
			wjAmfColorsList.add(wjAmfColor9);
			wjAmfColorsList.add(wjAmfColor10);
			// JACKET_AMF色指定_色コード
			String wjAmfColorsCodeInDb = severalColorCodeInDb(wjAmfColorPlaceList,wjAmfColorsList);
			order.setJkAmfColorCd(wjAmfColorsCodeInDb);
			// JACKET_AMF色指定_色名
			Map<String, String> wjAmfColorsMap = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorsMap();
			String wjAmfColorsNameInDb = severalColorNameInDb(wjAmfColorPlaceList,wjAmfColorsList, wjAmfColorsMap);
			order.setJkAmfColorNm(wjAmfColorsNameInDb);
		}
		else {
			// JACKET_AMF色指定_箇所コード
			order.setJkAmfColorPlcCd(null);
			// JACKET_AMF色指定_箇所名
			order.setJkAmfColorPlcNm(null);
			// JACKET_AMF色指定_色コード
			order.setJkAmfColorCd(null);
			// JACKET_AMF色指定_色名
			order.setJkAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String wjBhColor = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor();
		// ボタンホール色指定:有り
		String wjBhColorYes = "0003102";
		
		if(wjBhColorYes.equals(wjBhColor)) {
			// ウォッシャブルJACKETのボタンホール色指定箇所
			String wjBhColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace1();
			String wjBhColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace2();
			String wjBhColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace3();
			String wjBhColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace4();
			String wjBhColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace5();
			String wjBhColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace6();
			String wjBhColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace7();
			String wjBhColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace8();
			String wjBhColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace9();
			String wjBhColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace10();
			String wjBhColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace11();
			String wjBhColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace12();
			String wjBhColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace13();
			String wjBhColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace14();
			String wjBhColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace15();
			String wjBhColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace16();
			String wjBhColorPlace17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace17();

			List<String> wjBhColorPlaceList = new ArrayList<>();
			wjBhColorPlaceList.add(wjBhColorPlace1);
			wjBhColorPlaceList.add(wjBhColorPlace2);
			wjBhColorPlaceList.add(wjBhColorPlace3);
			wjBhColorPlaceList.add(wjBhColorPlace4);
			wjBhColorPlaceList.add(wjBhColorPlace5);
			wjBhColorPlaceList.add(wjBhColorPlace6);
			wjBhColorPlaceList.add(wjBhColorPlace7);
			wjBhColorPlaceList.add(wjBhColorPlace8);
			wjBhColorPlaceList.add(wjBhColorPlace9);
			wjBhColorPlaceList.add(wjBhColorPlace10);
			wjBhColorPlaceList.add(wjBhColorPlace11);
			wjBhColorPlaceList.add(wjBhColorPlace12);
			wjBhColorPlaceList.add(wjBhColorPlace13);
			wjBhColorPlaceList.add(wjBhColorPlace14);
			wjBhColorPlaceList.add(wjBhColorPlace15);
			wjBhColorPlaceList.add(wjBhColorPlace16);
			wjBhColorPlaceList.add(wjBhColorPlace17);
			// JACKET_ボタンホール色指定_箇所コード
			String wjBhColorPlaceCodeInDb = severalCodeInDb(wjBhColorPlaceList);
			order.setJkBtnholeColorPlcCd(wjBhColorPlaceCodeInDb);
			// JACKET_ボタンホール色指定_箇所名
			Map<String, String> wjBhColorPlaceMap = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlaceMap();
			String wjBhColorPlaceNameInDb = severalNameInDb(wjBhColorPlaceList, wjBhColorPlaceMap);
			order.setJkBtnholeColorPlcN(wjBhColorPlaceNameInDb);

			String wjBhColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor1();
			String wjBhColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor2();
			String wjBhColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor3();
			String wjBhColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor4();
			String wjBhColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor5();
			String wjBhColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor6();
			String wjBhColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor7();
			String wjBhColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor8();
			String wjBhColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor9();
			String wjBhColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor10();
			String wjBhColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor11();
			String wjBhColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor12();
			String wjBhColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor13();
			String wjBhColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor14();
			String wjBhColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor15();
			String wjBhColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor16();
			String wjBhColor17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor17();

			List<String> wjBhColorsList = new ArrayList<>();
			wjBhColorsList.add(wjBhColor1);
			wjBhColorsList.add(wjBhColor2);
			wjBhColorsList.add(wjBhColor3);
			wjBhColorsList.add(wjBhColor4);
			wjBhColorsList.add(wjBhColor5);
			wjBhColorsList.add(wjBhColor6);
			wjBhColorsList.add(wjBhColor7);
			wjBhColorsList.add(wjBhColor8);
			wjBhColorsList.add(wjBhColor9);
			wjBhColorsList.add(wjBhColor10);
			wjBhColorsList.add(wjBhColor11);
			wjBhColorsList.add(wjBhColor12);
			wjBhColorsList.add(wjBhColor13);
			wjBhColorsList.add(wjBhColor14);
			wjBhColorsList.add(wjBhColor15);
			wjBhColorsList.add(wjBhColor16);
			wjBhColorsList.add(wjBhColor17);
			// JACKET_ボタンホール色指定_色コード
			String wjBhColorsCodeInDb = severalColorCodeInDb(wjBhColorPlaceList,wjBhColorsList);
			order.setJkBtnholeColorCd(wjBhColorsCodeInDb);
			// JACKET_ボタンホール色指定_色名
			Map<String, String> wjBhColorsMap = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorsMap();
			String wjBhColorsNameInDb = severalColorNameInDb(wjBhColorPlaceList,wjBhColorsList, wjBhColorsMap);
			order.setJkBtnholeColorNm(wjBhColorsNameInDb);
		}
		else {
			// JACKET_ボタンホール色指定_箇所コード
			order.setJkBtnholeColorPlcCd(null);
			// JACKET_ボタンホール色指定_箇所名
			order.setJkBtnholeColorPlcN(null);
			// JACKET_ボタンホール色指定_色コード
			order.setJkBtnholeColorCd(null);
			// JACKET_ボタンホール色指定_色名
			order.setJkBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String wjByColor = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor();
		// ボタン付け糸指定:有り
		String wjByColorYes = "0003402";
		
		if(wjByColorYes.equals(wjByColor)) {
			// ウォッシャブルJACKETのボタン付け糸指定箇所
			String wjByColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace1();
			String wjByColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace2();
			String wjByColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace3();
			String wjByColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace4();
			String wjByColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace5();
			String wjByColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace6();
			String wjByColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace7();
			String wjByColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace8();
			String wjByColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace9();
			String wjByColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace10();
			String wjByColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace11();
			String wjByColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace12();
			String wjByColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace13();
			String wjByColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace14();
			String wjByColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace15();
			String wjByColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace16();
			
			List<String> wjByColorPlaceList = new ArrayList<>();
			wjByColorPlaceList.add(wjByColorPlace1);
			wjByColorPlaceList.add(wjByColorPlace2);
			wjByColorPlaceList.add(wjByColorPlace3);
			wjByColorPlaceList.add(wjByColorPlace4);
			wjByColorPlaceList.add(wjByColorPlace5);
			wjByColorPlaceList.add(wjByColorPlace6);
			wjByColorPlaceList.add(wjByColorPlace7);
			wjByColorPlaceList.add(wjByColorPlace8);
			wjByColorPlaceList.add(wjByColorPlace9);
			wjByColorPlaceList.add(wjByColorPlace10);
			wjByColorPlaceList.add(wjByColorPlace11);
			wjByColorPlaceList.add(wjByColorPlace12);
			wjByColorPlaceList.add(wjByColorPlace13);
			wjByColorPlaceList.add(wjByColorPlace14);
			wjByColorPlaceList.add(wjByColorPlace15);
			wjByColorPlaceList.add(wjByColorPlace16);
			//JACKET_ボタン付け糸指定_箇所コード
			String wjByColorPlaceCodeInDb = severalCodeInDb(wjByColorPlaceList);
			order.setJkBtnthreadColorPlcCd(wjByColorPlaceCodeInDb);
			//JACKET_ボタン付け糸指定_箇所名
			Map<String, String> wjByColorPlaceMap = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlaceMap();
			String wjByColorPlaceNameInDb = severalNameInDb(wjByColorPlaceList, wjByColorPlaceMap);
			order.setJkBtnthreadColorPlcN(wjByColorPlaceNameInDb);
			
			String wjByColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor1();
			String wjByColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor2();
			String wjByColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor3();
			String wjByColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor4();
			String wjByColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor5();
			String wjByColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor6();
			String wjByColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor7();
			String wjByColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor8();
			String wjByColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor9();
			String wjByColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor10();
			String wjByColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor11();
			String wjByColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor12();
			String wjByColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor13();
			String wjByColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor14();
			String wjByColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor15();
			String wjByColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor16();
			List<String> wjByColorsList = new ArrayList<>();
			wjByColorsList.add(wjByColor1);
			wjByColorsList.add(wjByColor2);
			wjByColorsList.add(wjByColor3);
			wjByColorsList.add(wjByColor4);
			wjByColorsList.add(wjByColor5);
			wjByColorsList.add(wjByColor6);
			wjByColorsList.add(wjByColor7);
			wjByColorsList.add(wjByColor8);
			wjByColorsList.add(wjByColor9);
			wjByColorsList.add(wjByColor10);
			wjByColorsList.add(wjByColor11);
			wjByColorsList.add(wjByColor12);
			wjByColorsList.add(wjByColor13);
			wjByColorsList.add(wjByColor14);
			wjByColorsList.add(wjByColor15);
			wjByColorsList.add(wjByColor16);
			//JACKET_ボタン付け糸指定_色コード
			String wjByColorsCodeInDb = severalColorCodeInDb(wjByColorPlaceList,wjByColorsList);
			order.setJkBtnthreadColorCd(wjByColorsCodeInDb);
			//JACKET_ボタン付け糸指定_色名
			Map<String, String> wjByColorsMap = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorsMap();
			String wjByColorsNameInDb = severalColorNameInDb(wjByColorPlaceList,wjByColorsList, wjByColorsMap);
			order.setJkBtnthreadColorNm(wjByColorsNameInDb);
		}
		else {
			//JACKET_ボタン付け糸指定_箇所コード
			order.setJkBtnthreadColorPlcCd(null);
			//JACKET_ボタン付け糸指定_箇所名
			order.setJkBtnthreadColorPlcN(null);
			//JACKET_ボタン付け糸指定_色コード
			order.setJkBtnthreadColorCd(null);
			//JACKET_ボタン付け糸指定_色名
			order.setJkBtnthreadColorNm(null);
		}
		
	}
	
	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutWashableGiletCheckBoxInDb(OrderCoForm orderCoForm,Order order) {
		
		// ステッチ箇所変更
		String wgStitchModify = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModify();
		// ステッチ箇所変更：有り
		String wgStitchModifyYes = "0000602";
		
		if(wgStitchModifyYes.equals(wgStitchModify)) {
			// ウォッシャブルGILETのステッチ変更箇所
			String wgStitchModifyPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace1();
			String wgStitchModifyPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace2();
			String wgStitchModifyPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace3();
			
			List<String> wgStitchModifyPlaceList = new ArrayList<>();
			wgStitchModifyPlaceList.add(wgStitchModifyPlace1);
			wgStitchModifyPlaceList.add(wgStitchModifyPlace2);
			wgStitchModifyPlaceList.add(wgStitchModifyPlace3);
			// GILET_ステッチ箇所変更 _コード
			String wgStitchModifyPlaceCodeInDb = severalCodeInDb(wgStitchModifyPlaceList);
			order.setGlStitchPlcCd(wgStitchModifyPlaceCodeInDb);
			// GILET_ステッチ箇所変更 _名
			Map<String, String> wgStitchModifyPlaceMap = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlaceMap();
			String wgStitchModifyPlaceNameInDb = severalNameInDb(wgStitchModifyPlaceList, wgStitchModifyPlaceMap);
			order.setGlStitchPlcNm(wgStitchModifyPlaceNameInDb);
		}
		else {
			// GILET_ステッチ箇所変更 _コード
			order.setGlStitchPlcCd(null);
			// GILET_ステッチ箇所変更 _名
			order.setGlStitchPlcNm(null);
		}
		
		// ダブルステッチ変更
		String wgDStitchModify = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModify();
		// ダブルステッチ変更:有り
		String wgDStitchModifyYes = "0002602";
		
		if(wgDStitchModifyYes.equals(wgDStitchModify)) {
			// ウォッシャブルGILETのダブルステッチ変更箇所
			String wgDStitchModifyPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlace1();
			String wgDStitchModifyPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlace2();
			String wgDStitchModifyPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlace3();
			
			List<String> wgDStitchModifyPlaceList = new ArrayList<>();
			wgDStitchModifyPlaceList.add(wgDStitchModifyPlace1);
			wgDStitchModifyPlaceList.add(wgDStitchModifyPlace2);
			wgDStitchModifyPlaceList.add(wgDStitchModifyPlace3);
			// GILET_ダブルステッチ変更_コード
			String wgDStitchModifyPlaceCodeInDb = severalCodeInDb(wgDStitchModifyPlaceList);
			order.setGlDblstitchPlcCd(wgDStitchModifyPlaceCodeInDb);
			// GILET_ダブルステッチ変更_名
			Map<String, String> wgDStitchModifyPlaceMap = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlaceMap();
			String wgDStitchModifyPlaceNameInDb = severalNameInDb(wgDStitchModifyPlaceList, wgDStitchModifyPlaceMap);
			order.setGlDblstitchPlcNm(wgDStitchModifyPlaceNameInDb);
		}
		else {
			// GILET_ダブルステッチ変更_コード
			order.setGlDblstitchPlcCd(null);
			// GILET_ダブルステッチ変更_名
			order.setGlDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String wgAmfColor = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor();
		// AMF色指定:有り
		String wgAmfColorYes = "0000802";
		
		if(wgAmfColorYes.equals(wgAmfColor)) {
			// ウォッシャブルGILETのAMF色指定箇所
			String wgAmfColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace1();
			String wgAmfColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace2();
			String wgAmfColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace3();
			
			List<String> wgAmfColorPlaceList = new ArrayList<>();
			wgAmfColorPlaceList.add(wgAmfColorPlace1);
			wgAmfColorPlaceList.add(wgAmfColorPlace2);
			wgAmfColorPlaceList.add(wgAmfColorPlace3);
			// GILET_AMF色指定_箇所コード
			String wgAmfColorPlaceCodeInDb = severalCodeInDb(wgAmfColorPlaceList);
			order.setGlAmfColorPlcCd(wgAmfColorPlaceCodeInDb);
			// GILET_AMF色指定_箇所名
			Map<String, String> wgAmfColorPlaceMap = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlaceMap();
			String wgAmfColorPlaceNameInDb = severalNameInDb(wgAmfColorPlaceList, wgAmfColorPlaceMap);
			order.setGlAmfColorPlcNm(wgAmfColorPlaceNameInDb);
			
			String wgAmfColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor1();
			String wgAmfColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor2();
			String wgAmfColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor3();
			
			List<String> wgAmfColorsList = new ArrayList<>();
			wgAmfColorsList.add(wgAmfColor1);
			wgAmfColorsList.add(wgAmfColor2);
			wgAmfColorsList.add(wgAmfColor3);
			// GILET_AMF色指定_色コード
			String wgAmfColorsCodeInDb = severalColorCodeInDb(wgAmfColorPlaceList,wgAmfColorsList);
			order.setGlAmfColorCd(wgAmfColorsCodeInDb);
			// GILET_AMF色指定_色名
			Map<String, String> wgAmfColorsMap = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorsMap();
			String wgAmfColorsNameInDb = severalColorNameInDb(wgAmfColorPlaceList,wgAmfColorsList, wgAmfColorsMap);
			order.setGlAmfColorNm(wgAmfColorsNameInDb);
		}
		else {
			// GILET_AMF色指定_箇所コード
			order.setGlAmfColorPlcCd(null);
			// GILET_AMF色指定_箇所名
			order.setGlAmfColorPlcNm(null);
			// GILET_AMF色指定_色コード
			order.setGlAmfColorCd(null);
			// GILET_AMF色指定_色名
			order.setGlAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String wgBhColor = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor();
		// ボタンホール色指定：有り
		String wgBhColorYes = "0001102";
		
		if(wgBhColorYes.equals(wgBhColor)) {
			// ウォッシャブルGILETのボタンホール色指定 箇所
			String wgBhColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace1();
			String wgBhColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace2();
			String wgBhColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace3();
			String wgBhColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace4();
			String wgBhColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace5();
			String wgBhColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace6();
			
			List<String> wgBhColorPlaceList = new ArrayList<>();
			wgBhColorPlaceList.add(wgBhColorPlace1);
			wgBhColorPlaceList.add(wgBhColorPlace2);
			wgBhColorPlaceList.add(wgBhColorPlace3);
			wgBhColorPlaceList.add(wgBhColorPlace4);
			wgBhColorPlaceList.add(wgBhColorPlace5);
			wgBhColorPlaceList.add(wgBhColorPlace6);
			// GILET_ボタンホール色指定_箇所コード
			String wgBhColorPlaceCodeInDb = severalCodeInDb(wgBhColorPlaceList);
			order.setGlBtnholeColorPlcCd(wgBhColorPlaceCodeInDb);
			// GILET_ボタンホール色指定_箇所名
			Map<String, String> wgBhColorPlaceMap = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlaceMap();
			String wgBhColorPlaceNameInDb = severalNameInDb(wgBhColorPlaceList, wgBhColorPlaceMap);
			order.setGlBtnholeColorPlcNm(wgBhColorPlaceNameInDb);
			
			String wgBhColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor1();
			String wgBhColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor2();
			String wgBhColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor3();
			String wgBhColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor4();
			String wgBhColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor5();
			String wgBhColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor6();
			
			List<String> wgBhColorsList = new ArrayList<>();
			wgBhColorsList.add(wgBhColor1);
			wgBhColorsList.add(wgBhColor2);
			wgBhColorsList.add(wgBhColor3);
			wgBhColorsList.add(wgBhColor4);
			wgBhColorsList.add(wgBhColor5);
			wgBhColorsList.add(wgBhColor6);
			// GILET_ボタンホール色指定_色コード
			String wgBhColorsCodeInDb = severalColorCodeInDb(wgBhColorPlaceList,wgBhColorsList);
			order.setGlBtnholeColorCd(wgBhColorsCodeInDb);
			// GILET_ボタンホール色指定_色名
			Map<String, String> wgBhColorsMap = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorsMap();
			String wgBhColorsNameInDb = severalColorNameInDb(wgBhColorPlaceList,wgBhColorsList, wgBhColorsMap);
			order.setGlBtnholeColorNm(wgBhColorsNameInDb);
		}
		else {
			// GILET_ボタンホール色指定_箇所コード
			order.setGlBtnholeColorPlcCd(null);
			// GILET_ボタンホール色指定_箇所名
			order.setGlBtnholeColorPlcNm(null);
			// GILET_ボタンホール色指定_色コード
			order.setGlBtnholeColorCd(null);
			// GILET_ボタンホール色指定_色名
			order.setGlBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String wgByColor = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor();
		// ボタン付け糸指定:有り
		String wgByColorYes = "0001402";
		
		if(wgByColorYes.equals(wgByColor)) {
			// ウォッシャブルGILETのボタン付け糸指定 箇所
			String wgByColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace1();
			String wgByColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace2();
			String wgByColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace3();
			String wgByColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace4();
			String wgByColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace5();
			String wgByColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace6();
			String wgByColorPlace7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace7();
			String wgByColorPlace8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace8();
			String wgByColorPlace9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace9();
			String wgByColorPlace10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace10();
			
			List<String> wgByColorPlaceList = new ArrayList<>();
			wgByColorPlaceList.add(wgByColorPlace1);
			wgByColorPlaceList.add(wgByColorPlace2);
			wgByColorPlaceList.add(wgByColorPlace3);
			wgByColorPlaceList.add(wgByColorPlace4);
			wgByColorPlaceList.add(wgByColorPlace5);
			wgByColorPlaceList.add(wgByColorPlace6);
			wgByColorPlaceList.add(wgByColorPlace7);
			wgByColorPlaceList.add(wgByColorPlace8);
			wgByColorPlaceList.add(wgByColorPlace9);
			wgByColorPlaceList.add(wgByColorPlace10);
			// GILET_ボタン付け糸指定_箇所コード
			String wgByColorPlaceCodeInDb = severalCodeInDb(wgByColorPlaceList);
			order.setGlBtnthreadColorPlcCd(wgByColorPlaceCodeInDb);
			// GILET_ボタン付け糸指定_箇所名
			Map<String, String> wgByColorPlaceMap = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlaceMap();
			String wgByColorPlaceNameInDb = severalNameInDb(wgByColorPlaceList, wgByColorPlaceMap);
			order.setGlBtnthreadColorPlcNm(wgByColorPlaceNameInDb);
			
			String wgByColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor1();
			String wgByColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor2();
			String wgByColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor3();
			String wgByColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor4();
			String wgByColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor5();
			String wgByColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor6();
			String wgByColor7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor7();
			String wgByColor8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor8();
			String wgByColor9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor9();
			String wgByColor10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor10();
			
			List<String> wgByColorsList = new ArrayList<>();
			wgByColorsList.add(wgByColor1);
			wgByColorsList.add(wgByColor2);
			wgByColorsList.add(wgByColor3);
			wgByColorsList.add(wgByColor4);
			wgByColorsList.add(wgByColor5);
			wgByColorsList.add(wgByColor6);
			wgByColorsList.add(wgByColor7);
			wgByColorsList.add(wgByColor8);
			wgByColorsList.add(wgByColor9);
			wgByColorsList.add(wgByColor10);
			// GILET_ボタン付け糸指定_色コード
			String wgByColorsCodeInDb = severalColorCodeInDb(wgByColorPlaceList,wgByColorsList);
			order.setGlBtnthreadColorCd(wgByColorsCodeInDb);
			// GILET_ボタン付け糸指定_色名
			Map<String, String> wgByColorsMap = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorsMap();
			String wgByColorsNameInDb = severalColorNameInDb(wgByColorPlaceList,wgByColorsList, wgByColorsMap);
			order.setGlBtnthreadColorNm(wgByColorsNameInDb);
		}
		else {
			// GILET_ボタン付け糸指定_箇所コード
			order.setGlBtnthreadColorPlcCd(null);
			// GILET_ボタン付け糸指定_箇所名
			order.setGlBtnthreadColorPlcNm(null);
			// GILET_ボタン付け糸指定_色コード
			order.setGlBtnthreadColorCd(null);
			// GILET_ボタン付け糸指定_色名
			order.setGlBtnthreadColorNm(null);
		}
		
	}
	
	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutWashablePantsCheckBoxInDb(OrderCoForm orderCoForm,Order order) {
		
		// ベルトループ
		String wpBeltLoop = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoop();
		// ベルトループ:有り
		String wpBeltLoopYes = "0000701";
		
		if(wpBeltLoopYes.equals(wpBeltLoop)) {
			// ウォッシャブルPANTSのベルトループ箇所 
			String wpBeltLoopPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace1();
			String wpBeltLoopPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace2();
			String wpBeltLoopPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace3();
			String wpBeltLoopPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace4();
			String wpBeltLoopPlace5 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace5();
			String wpBeltLoopPlace6 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace6();
			String wpBeltLoopPlace7 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace7();
			
			List<String> wpBeltLoopPlaceList = new ArrayList<>();
			wpBeltLoopPlaceList.add(wpBeltLoopPlace1);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace2);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace3);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace4);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace5);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace6);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace7);
			// PANTS_ベルトループ_コード
			String wpBeltLoopPlaceCodeInDb = severalCodeInDb(wpBeltLoopPlaceList);
			order.setPtBeltloopCd(wpBeltLoopPlaceCodeInDb);
			// PANTS_ベルトループ_名
			Map<String, String> wpBeltLoopPlaceMap = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlaceMap();
			String wpBeltLoopPlaceNameInDb = severalNameInDb(wpBeltLoopPlaceList, wpBeltLoopPlaceMap);
			order.setPtBeltloopNm(wpBeltLoopPlaceNameInDb);
		}
		else {
			// PANTS_ベルトループ_コード
			order.setPtBeltloopCd(null);
			// PANTS_ベルトループ_名
			order.setPtBeltloopNm(null);
		}
		
		// ステッチ箇所変更
		String wpStitchModify = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModify();
		// ステッチ箇所変更:有り
		String wpStitchModifyYes = "0002002";
		
		if(wpStitchModifyYes.equals(wpStitchModify)) {
			// ウォッシャブルPANTSのステッチ箇所変更箇所
			String wpStitchModifyPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace1();
			String wpStitchModifyPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace2();
			String wpStitchModifyPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace3();
			String wpStitchModifyPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace4();
			
			List<String> wpStitchModifyPlaceList = new ArrayList<>();
			wpStitchModifyPlaceList.add(wpStitchModifyPlace1);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace2);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace3);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace4);
			// PANTS_ステッチ箇所変更_コード
			String wpStitchModifyPlaceCodeInDb = severalCodeInDb(wpStitchModifyPlaceList);
			order.setPtStitchPlcCd(wpStitchModifyPlaceCodeInDb);
			// PANTS_ステッチ箇所変更_名
			Map<String, String> wpStitchModifyPlaceMap = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlaceMap();
			String wpStitchModifyPlaceNameInDb = severalNameInDb(wpStitchModifyPlaceList, wpStitchModifyPlaceMap);
			order.setPtStitchPlcNm(wpStitchModifyPlaceNameInDb);
		}
		else {
			// PANTS_ステッチ箇所変更_コード
			order.setPtStitchPlcCd(null);
			// PANTS_ステッチ箇所変更_名
			order.setPtStitchPlcNm(null);
		}
		
		// ダブルステッチ
		String wpDStitch = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitch();
		// ダブルステッチ:有り
		String wpDStitchYes = "0002202";
		
		if(wpDStitchYes.equals(wpDStitch)) {
			// ウォッシャブルPANTSのダブルステッチ箇所
			String wpDStitchPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace1();
			String wpDStitchPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace2();
			String wpDStitchPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace3();
			String wpDStitchPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace4();
			
			List<String> wpDStitchPlaceList = new ArrayList<>();
			wpDStitchPlaceList.add(wpDStitchPlace1);
			wpDStitchPlaceList.add(wpDStitchPlace2);
			wpDStitchPlaceList.add(wpDStitchPlace3);
			wpDStitchPlaceList.add(wpDStitchPlace4);
			// PANTS_ダブルステッチ_コード
			String wpDStitchPlaceCodeInDb = severalCodeInDb(wpDStitchPlaceList);
			order.setPtDblstitchPlcCd(wpDStitchPlaceCodeInDb);
			// PANTS_ダブルステッチ_名
			Map<String, String> wpDStitchPlaceMap = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlaceMap();
			String wpDStitchPlaceNameInDb = severalNameInDb(wpDStitchPlaceList, wpDStitchPlaceMap);
			order.setPtDblstitchPlcNm(wpDStitchPlaceNameInDb);
		}
		else {
			// PANTS_ダブルステッチ_コード
			order.setPtDblstitchPlcCd(null);
			// PANTS_ダブルステッチ_名
			order.setPtDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String wpAmfColor = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor();
		// AMF色指定:有り
		String wpAmfColorYes = "0002402";
		
		if(wpAmfColorYes.equals(wpAmfColor)) {
			// ウォッシャブルPANTSのAMF色指定箇所
			String wpAmfColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace1();
			String wpAmfColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace2();
			String wpAmfColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace3();
			String wpAmfColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace4();
			
			List<String> wpAmfColorPlaceList = new ArrayList<>();
			wpAmfColorPlaceList.add(wpAmfColorPlace1);
			wpAmfColorPlaceList.add(wpAmfColorPlace2);
			wpAmfColorPlaceList.add(wpAmfColorPlace3);
			wpAmfColorPlaceList.add(wpAmfColorPlace4);
			// PANTS_AMF色指定_箇所コード
			String wpAmfColorPlaceCodeInDb = severalCodeInDb(wpAmfColorPlaceList);
			order.setPtAmfColorPlcCd(wpAmfColorPlaceCodeInDb);
			// PANTS_AMF色指定_箇所名
			Map<String, String> wpAmfColorPlaceMap = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlaceMap();
			String wpAmfColorPlaceNameInDb = severalNameInDb(wpAmfColorPlaceList, wpAmfColorPlaceMap);
			order.setPtAmfColorPlcNm(wpAmfColorPlaceNameInDb);
			
			String wpAmfColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor1();
			String wpAmfColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor2();
			String wpAmfColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor3();
			String wpAmfColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor4();
			
			List<String> wpAmfColorsList = new ArrayList<>();
			wpAmfColorsList.add(wpAmfColor1);
			wpAmfColorsList.add(wpAmfColor2);
			wpAmfColorsList.add(wpAmfColor3);
			wpAmfColorsList.add(wpAmfColor4);
			// PANTS_AMF色指定_色コード
			String wpAmfColorsCodeInDb = severalColorCodeInDb(wpAmfColorPlaceList,wpAmfColorsList);
			order.setPtAmfColorCd(wpAmfColorsCodeInDb);
			// PANTS_AMF色指定_色名
			Map<String, String> wpAmfColorsMap = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorsMap();
			String wpAmfColorsNameInDb = severalColorNameInDb(wpAmfColorPlaceList,wpAmfColorsList, wpAmfColorsMap);
			order.setPtAmfColorNm(wpAmfColorsNameInDb);
		}
		else {
			// PANTS_AMF色指定_箇所コード
			order.setPtAmfColorPlcCd(null);
			// PANTS_AMF色指定_箇所名
			order.setPtAmfColorPlcNm(null);
			// PANTS_AMF色指定_色コード
			order.setPtAmfColorCd(null);
			// PANTS_AMF色指定_色名
			order.setPtAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String wpBhColor = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor();
		// ボタンホール色指定:有り
		String wpBhColorYes = "0002702";
		
		if(wpBhColorYes.equals(wpBhColor)) {
			// ウォッシャブルPANTSのボタンホール色指定
			String wpBhColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace1();
			String wpBhColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace2();
			String wpBhColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace3();
			String wpBhColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace4();
			
			List<String> wpBhColorPlaceList = new ArrayList<>();
			wpBhColorPlaceList.add(wpBhColorPlace1);
			wpBhColorPlaceList.add(wpBhColorPlace2);
			wpBhColorPlaceList.add(wpBhColorPlace3);
			wpBhColorPlaceList.add(wpBhColorPlace4);
			// PANTS_ボタンホール色指定_箇所コード
			String wpBhColorPlaceCodeInDb = severalCodeInDb(wpBhColorPlaceList);
			order.setPtBtnholeColorPlcCd(wpBhColorPlaceCodeInDb);
			// PANTS_ボタンホール色指定_箇所名
			Map<String, String> wpBhColorPlaceMap = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlaceMap();
			String wpBhColorPlaceNameInDb = severalNameInDb(wpBhColorPlaceList, wpBhColorPlaceMap);
			order.setPtBtnholeColorPlcNm(wpBhColorPlaceNameInDb);
			
			String wpBhColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor1();
			String wpBhColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor2();
			String wpBhColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor3();
			String wpBhColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor4();
			
			List<String> wpBhColorsList = new ArrayList<>();
			wpBhColorsList.add(wpBhColor1);
			wpBhColorsList.add(wpBhColor2);
			wpBhColorsList.add(wpBhColor3);
			wpBhColorsList.add(wpBhColor4);
			// PANTS_ボタンホール色指定_色コード
			String wpBhColorsCodeInDb = severalColorCodeInDb(wpBhColorPlaceList,wpBhColorsList);
			order.setPtBtnholeColorCd(wpBhColorsCodeInDb);
			// PANTS_ボタンホール色指定_色名
			Map<String, String> wpBhColorsMap = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorsMap();
			String wpBhColorsNameInDb = severalColorNameInDb(wpBhColorPlaceList,wpBhColorsList, wpBhColorsMap);
			order.setPtBtnholeColorNm(wpBhColorsNameInDb);
		}
		else {
			// PANTS_ボタンホール色指定_箇所コード
			order.setPtBtnholeColorPlcCd(null);
			// PANTS_ボタンホール色指定_箇所名
			order.setPtBtnholeColorPlcNm(null);
			// PANTS_ボタンホール色指定_色コード
			order.setPtBtnholeColorCd(null);
			// PANTS_ボタンホール色指定_色名
			order.setPtBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String wpByColor = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor();
		// ボタン付け糸指定:有り
		String wpByColorYes = "0003002";
		
		if(wpByColorYes.equals(wpByColor)) {
			// ウォッシャブルPANTSのボタン付け糸指定箇所
			String wpByColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace1();
			String wpByColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace2();
			String wpByColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace3();
			String wpByColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace4();
			
			List<String> wpByColorPlaceList = new ArrayList<>();
			wpByColorPlaceList.add(wpByColorPlace1);
			wpByColorPlaceList.add(wpByColorPlace2);
			wpByColorPlaceList.add(wpByColorPlace3);
			wpByColorPlaceList.add(wpByColorPlace4);
			// PANTS_ボタン付け糸指定_箇所コード
			String wpByColorPlaceCodeInDb = severalCodeInDb(wpByColorPlaceList);
			order.setPtBtnthreadColorPlcCd(wpByColorPlaceCodeInDb);
			// PANTS_ボタン付け糸指定_箇所名
			Map<String, String> wpByColorPlaceMap = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlaceMap();
			String wpByColorPlaceNameInDb = severalNameInDb(wpByColorPlaceList, wpByColorPlaceMap);
			order.setPtBtnthreadColorPlcNm(wpByColorPlaceNameInDb);
			
			String wpByColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor1();
			String wpByColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor2();
			String wpByColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor3();
			String wpByColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor4();
			
			List<String> wpByColorsList = new ArrayList<>();
			wpByColorsList.add(wpByColor1);
			wpByColorsList.add(wpByColor2);
			wpByColorsList.add(wpByColor3);
			wpByColorsList.add(wpByColor4);
			// PANTS_ボタン付け糸指定_色コード
			String wpByColorsCodeInDb = severalColorCodeInDb(wpByColorPlaceList,wpByColorsList);
			order.setPtBtnthreadColorCd(wpByColorsCodeInDb);
			// PANTS_ボタン付け糸指定_色名
			Map<String, String> wpByColorsMap = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorsMap();
			String wpByColorsNameInDb = severalColorNameInDb(wpByColorPlaceList,wpByColorsList, wpByColorsMap);
			order.setPtBtnthreadColorNm(wpByColorsNameInDb);
		}
		else {
			// PANTS_ボタン付け糸指定_箇所コード
			order.setPtBtnthreadColorPlcCd(null);
			// PANTS_ボタン付け糸指定_箇所名
			order.setPtBtnthreadColorPlcNm(null);
			// PANTS_ボタン付け糸指定_色コード
			order.setPtBtnthreadColorCd(null);
			// PANTS_ボタン付け糸指定_色名
			order.setPtBtnthreadColorNm(null);
		}
		
	}
	
	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutWashablePants2CheckBoxInDb(OrderCoForm orderCoForm,Order order) {
		
		// ベルトループ
		String wp2BeltLoop = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoop();
		// ベルトループ:有り
		String wp2BeltLoopYes = "0000701";
		
		if(wp2BeltLoopYes.equals(wp2BeltLoop)) {
			// ウォッシャブルPANTSのベルトループ箇所 
			String wp2BeltLoopPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace1();
			String wp2BeltLoopPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace2();
			String wp2BeltLoopPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace3();
			String wp2BeltLoopPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace4();
			String wp2BeltLoopPlace5 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace5();
			String wp2BeltLoopPlace6 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace6();
			String wp2BeltLoopPlace7 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace7();
			
			List<String> wp2BeltLoopPlaceList = new ArrayList<>();
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace1);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace2);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace3);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace4);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace5);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace6);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace7);
			// PANTS2_ベルトループ_コード
			String wp2BeltLoopPlaceCodeInDb = severalCodeInDb(wp2BeltLoopPlaceList);
			order.setPt2BeltloopCd(wp2BeltLoopPlaceCodeInDb);
			// PANTS2_ベルトループ_名
			Map<String, String> wp2BeltLoopPlaceMap = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlaceMap();
			String wp2BeltLoopPlaceNameInDb = severalNameInDb(wp2BeltLoopPlaceList, wp2BeltLoopPlaceMap);
			order.setPt2BeltloopNm(wp2BeltLoopPlaceNameInDb);
		}
		else {
			// PANTS2_ベルトループ_コード
			order.setPt2BeltloopCd(null);
			// PANTS2_ベルトループ_名
			order.setPt2BeltloopNm(null);
		}
		
		// ステッチ箇所変更
		String wp2StitchModify = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModify();
		// ステッチ箇所変更：有り
		String wp2StitchModifyYes = "0002002";
		
		if(wp2StitchModifyYes.equals(wp2StitchModify)) {
			// ウォッシャブルPANTSのステッチ箇所変更箇所
			String wp2StitchModifyPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace1();
			String wp2StitchModifyPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace2();
			String wp2StitchModifyPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace3();
			String wp2StitchModifyPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace4();
			
			List<String> wp2StitchModifyPlaceList = new ArrayList<>();
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace1);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace2);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace3);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace4);
			// PANTS2_ステッチ箇所変更_コード
			String wp2StitchModifyPlaceCodeInDb = severalCodeInDb(wp2StitchModifyPlaceList);
			order.setPt2StitchPlcCd(wp2StitchModifyPlaceCodeInDb);
			// PANTS2_ステッチ箇所変更_名
			Map<String, String> wp2StitchModifyPlaceMap = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlaceMap();
			String wpStitchModifyPlaceNameInDb = severalNameInDb(wp2StitchModifyPlaceList, wp2StitchModifyPlaceMap);
			order.setPt2StitchPlcNm(wpStitchModifyPlaceNameInDb);
		}
		else {
			// PANTS2_ステッチ箇所変更_コード
			order.setPt2StitchPlcCd(null);
			// PANTS2_ステッチ箇所変更_名
			order.setPt2StitchPlcNm(null);
		}
		
		// ダブルステッチ
		String wp2dStitch = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitch();
		// ダブルステッチ:有り
		String wp2dStitchYes = "0002202";
		
		if(wp2dStitchYes.equals(wp2dStitch)) {
			// ウォッシャブルPANTSのダブルステッチ箇所
			String wp2DStitchPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace1();
			String wp2DStitchPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace2();
			String wp2DStitchPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace3();
			String wp2DStitchPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace4();
			
			List<String> wp2DStitchPlaceList = new ArrayList<>();
			wp2DStitchPlaceList.add(wp2DStitchPlace1);
			wp2DStitchPlaceList.add(wp2DStitchPlace2);
			wp2DStitchPlaceList.add(wp2DStitchPlace3);
			wp2DStitchPlaceList.add(wp2DStitchPlace4);
			// PANTS2_ダブルステッチ_コード
			String wp2DStitchPlaceCodeInDb = severalCodeInDb(wp2DStitchPlaceList);
			order.setPt2DblstitchPlcCd(wp2DStitchPlaceCodeInDb);
			// PANTS2_ダブルステッチ_名
			Map<String, String> wp2DStitchPlaceMap = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlaceMap();
			String wp2DStitchPlaceNameInDb = severalNameInDb(wp2DStitchPlaceList, wp2DStitchPlaceMap);
			order.setPt2DblstitchPlcNm(wp2DStitchPlaceNameInDb);
		}
		else {
			// PANTS2_ダブルステッチ_コード
			order.setPt2DblstitchPlcCd(null);
			// PANTS2_ダブルステッチ_名
			order.setPt2DblstitchPlcNm(null);
		}
		
		// AMF色指定
		String wp2AmfColor = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor();
		// AMF色指定:有り
		String wp2AmfColorYes = "0002402";
		
		if(wp2AmfColorYes.equals(wp2AmfColor)) {
			// ウォッシャブルPANTSのAMF色指定箇所
			String wp2AmfColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace1();
			String wp2AmfColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace2();
			String wp2AmfColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace3();
			String wp2AmfColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace4();
			
			List<String> wp2AmfColorPlaceList = new ArrayList<>();
			wp2AmfColorPlaceList.add(wp2AmfColorPlace1);
			wp2AmfColorPlaceList.add(wp2AmfColorPlace2);
			wp2AmfColorPlaceList.add(wp2AmfColorPlace3);
			wp2AmfColorPlaceList.add(wp2AmfColorPlace4);
			// PANTS2_AMF色指定_箇所コード
			String wp2AmfColorPlaceCodeInDb = severalCodeInDb(wp2AmfColorPlaceList);
			order.setPt2AmfColorPlcCd(wp2AmfColorPlaceCodeInDb);
			// PANTS2_AMF色指定_箇所名
			Map<String, String> wp2AmfColorPlaceMap = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceMap();
			String wp2AmfColorPlaceNameInDb = severalNameInDb(wp2AmfColorPlaceList, wp2AmfColorPlaceMap);
			order.setPt2AmfColorPlcNm(wp2AmfColorPlaceNameInDb);
			
			String wp2AmfColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor1();
			String wp2AmfColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor2();
			String wp2AmfColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor3();
			String wp2AmfColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor4();
			
			List<String> wp2AmfColorsList = new ArrayList<>();
			wp2AmfColorsList.add(wp2AmfColor1);
			wp2AmfColorsList.add(wp2AmfColor2);
			wp2AmfColorsList.add(wp2AmfColor3);
			wp2AmfColorsList.add(wp2AmfColor4);
			// PANTS2_AMF色指定_色コード
			String wp2AmfColorsCodeInDb = severalColorCodeInDb(wp2AmfColorPlaceList,wp2AmfColorsList);
			order.setPt2AmfColorCd(wp2AmfColorsCodeInDb);
			// PANTS2_AMF色指定_色名
			Map<String, String> wp2AmfColorsMap = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlaceAllMap();
			String wp2AmfColorsNameInDb = severalColorNameInDb(wp2AmfColorPlaceList,wp2AmfColorsList, wp2AmfColorsMap);
			order.setPt2AmfColorNm(wp2AmfColorsNameInDb);
		}
		else {
			// PANTS2_AMF色指定_箇所コード
			order.setPt2AmfColorPlcCd(null);
			// PANTS2_AMF色指定_箇所名
			order.setPt2AmfColorPlcNm(null);
			// PANTS2_AMF色指定_色コード
			order.setPt2AmfColorCd(null);
			// PANTS2_AMF色指定_色名
			order.setPt2AmfColorNm(null);
		}
		
		// ボタンホール色指定
		String wp2BhColor = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor();
		// ボタンホール色指定:有り
		String wp2BhColorYes = "0002702";
		
		if(wp2BhColorYes.equals(wp2BhColor)) {
			// ウォッシャブルPANTSのボタンホール色指定
			String wp2BhColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace1();
			String wp2BhColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace2();
			String wp2BhColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace3();
			String wp2BhColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace4();
			
			List<String> wp2BhColorPlaceList = new ArrayList<>();
			wp2BhColorPlaceList.add(wp2BhColorPlace1);
			wp2BhColorPlaceList.add(wp2BhColorPlace2);
			wp2BhColorPlaceList.add(wp2BhColorPlace3);
			wp2BhColorPlaceList.add(wp2BhColorPlace4);
			// PANTS2_ボタンホール色指定_箇所コード
			String wp2BhColorPlaceCodeInDb = severalCodeInDb(wp2BhColorPlaceList);
			order.setPt2BtnholeColorPlcCd(wp2BhColorPlaceCodeInDb);
			// PANTS2_ボタンホール色指定_箇所名
			Map<String, String> wp2BhColorPlaceMap = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceMap();
			String wp2BhColorPlaceNameInDb = severalNameInDb(wp2BhColorPlaceList, wp2BhColorPlaceMap);
			order.setPt2BtnholeColorPlcNm(wp2BhColorPlaceNameInDb);
			
			String wp2BhColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor1();
			String wp2BhColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor2();
			String wp2BhColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor3();
			String wp2BhColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor4();
			
			List<String> wp2BhColorsList = new ArrayList<>();
			wp2BhColorsList.add(wp2BhColor1);
			wp2BhColorsList.add(wp2BhColor2);
			wp2BhColorsList.add(wp2BhColor3);
			wp2BhColorsList.add(wp2BhColor4);
			// PANTS2_ボタンホール色指定_色コード
			String wp2BhColorsCodeInDb = severalColorCodeInDb(wp2BhColorPlaceList,wp2BhColorsList);
			order.setPt2BtnholeColorCd(wp2BhColorsCodeInDb);
			// PANTS2_ボタンホール色指定_色名
			Map<String, String> wp2BhColorsMap = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlaceAllMap();
			String wp2BhColorsNameInDb = severalColorNameInDb(wp2BhColorPlaceList,wp2BhColorsList, wp2BhColorsMap);
			order.setPt2BtnholeColorNm(wp2BhColorsNameInDb);
		}
		else {
			// PANTS2_ボタンホール色指定_箇所コード
			order.setPt2BtnholeColorPlcCd(null);
			// PANTS2_ボタンホール色指定_箇所名
			order.setPt2BtnholeColorPlcNm(null);
			// PANTS2_ボタンホール色指定_色コード
			order.setPt2BtnholeColorCd(null);
			// PANTS2_ボタンホール色指定_色名
			order.setPt2BtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String wp2ByColor = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor();
		// ボタン付け糸指定:有り
		String wp2ByColorYes = "0003002";
		
		if(wp2ByColorYes.equals(wp2ByColor)) {
			// ウォッシャブルPANTSのボタン付け糸指定箇所
			String wp2ByColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace1();
			String wp2ByColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace2();
			String wp2ByColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace3();
			String wp2ByColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace4();
			
			List<String> wp2ByColorPlaceList = new ArrayList<>();
			wp2ByColorPlaceList.add(wp2ByColorPlace1);
			wp2ByColorPlaceList.add(wp2ByColorPlace2);
			wp2ByColorPlaceList.add(wp2ByColorPlace3);
			wp2ByColorPlaceList.add(wp2ByColorPlace4);
			// PANTS2_ボタン付け糸指定_箇所コード
			String wp2ByColorPlaceCodeInDb = severalCodeInDb(wp2ByColorPlaceList);
			order.setPt2BtnthreadColorPlcCd(wp2ByColorPlaceCodeInDb);
			// PANTS2_ボタン付け糸指定_箇所名
			Map<String, String> wp2ByColorPlaceMap = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceMap();
			String wp2ByColorPlaceNameInDb = severalNameInDb(wp2ByColorPlaceList, wp2ByColorPlaceMap);
			order.setPt2BtnthreadColorPlcNm(wp2ByColorPlaceNameInDb);
			
			String wp2ByColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor1();
			String wp2ByColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor2();
			String wp2ByColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor3();
			String wp2ByColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor4();
			
			List<String> wp2ByColorsList = new ArrayList<>();
			wp2ByColorsList.add(wp2ByColor1);
			wp2ByColorsList.add(wp2ByColor2);
			wp2ByColorsList.add(wp2ByColor3);
			wp2ByColorsList.add(wp2ByColor4);
			// PANTS2_ボタン付け糸指定_色コード
			String wp2ByColorsCodeInDb = severalColorCodeInDb(wp2ByColorPlaceList,wp2ByColorsList);
			order.setPt2BtnthreadColorCd(wp2ByColorsCodeInDb);
			// PANTS2_ボタン付け糸指定_色名
			Map<String, String> wp2ByColorsMap = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlaceAllMap();
			String wp2ByColorsNameInDb = severalColorNameInDb(wp2ByColorPlaceList,wp2ByColorsList, wp2ByColorsMap);
			order.setPt2BtnthreadColorNm(wp2ByColorsNameInDb);
		}
		else {
			// PANTS2_ボタン付け糸指定_箇所コード
			order.setPt2BtnthreadColorPlcCd(null);
			// PANTS2_ボタン付け糸指定_箇所名
			order.setPt2BtnthreadColorPlcNm(null);
			// PANTS2_ボタン付け糸指定_色コード
			order.setPt2BtnthreadColorCd(null);
			// PANTS2_ボタン付け糸指定_色名
			order.setPt2BtnthreadColorNm(null);
		}
	}
	
	
	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutWashableJacketCheckBoxInDbOnlyCode(OrderCoForm orderCoForm, Order order) {
		
		// ステッチ変更
		String wjStitchModify = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModify();
		// ステッチ変更:有り
		String wjStitchModifyYes = "0002402";
		
		if(wjStitchModifyYes.equals(wjStitchModify)) {
			// ウォッシャブルJACKETのステッチ変更箇所
			String wjStitchModifyPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace1();
			String wjStitchModifyPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace2();
			String wjStitchModifyPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace3();
			String wjStitchModifyPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace4();
			String wjStitchModifyPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace5();
			String wjStitchModifyPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace6();
			String wjStitchModifyPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace7();
			String wjStitchModifyPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace8();
			String wjStitchModifyPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjStitchModifyPlace9();

			List<String> wjStitchModifyPlaceList = new ArrayList<>();
			wjStitchModifyPlaceList.add(wjStitchModifyPlace1);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace2);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace3);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace4);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace5);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace6);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace7);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace8);
			wjStitchModifyPlaceList.add(wjStitchModifyPlace9);
			wjStitchModifyPlaceList.removeAll(Collections.singleton(null));
			// JACKET_ステッチ箇所変更_コード
			String wjStitchModifyPlaceCodeInDb = severalCodeInDb(wjStitchModifyPlaceList);
			order.setJkStitchPlcCd(wjStitchModifyPlaceCodeInDb);
		}
		else {
			// JACKET_ステッチ箇所変更_コード
			order.setJkStitchPlcCd(null);
			// JACKET_ステッチ箇所変更_名
			order.setJkStitchPlcNm(null);
		}
		
		// ダブルステッチ変更
		String wjDStitchModify = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModify();
		// ダブルステッチ変更:有り
		String wjDStitchModifyYes = "0002602";
		
		if(wjDStitchModifyYes.equals(wjDStitchModify)) {
			// ウォッシャブルJACKETのダブルステッチ変更箇所
			String wjDStitchModifyPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace1();
			String wjDStitchModifyPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace2();
			String wjDStitchModifyPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace3();
			String wjDStitchModifyPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace4();
			String wjDStitchModifyPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace5();
			String wjDStitchModifyPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace6();
			String wjDStitchModifyPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace7();
			String wjDStitchModifyPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace8();
			String wjDStitchModifyPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjDStitchModifyPlace9();

			List<String> wjDStitchModifyPlaceList = new ArrayList<>();
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace1);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace2);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace3);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace4);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace5);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace6);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace7);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace8);
			wjDStitchModifyPlaceList.add(wjDStitchModifyPlace9);
			wjDStitchModifyPlaceList.removeAll(Collections.singleton(null));
			// JACKET_ダブルステッチ_コード
			String wjDStitchModifyPlaceCodeInDb = severalCodeInDb(wjDStitchModifyPlaceList);
			order.setJkDblstitchPlcCd(wjDStitchModifyPlaceCodeInDb);
		}
		else {
			// JACKET_ダブルステッチ_コード
			order.setJkDblstitchPlcCd(null);
			// JACKET_ダブルステッチ_名
			order.setJkDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String wjAmfColor = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor();
		// AMF色指定：有り
		String wjAmfColorYes = "0002802";
		
		if(wjAmfColorYes.equals(wjAmfColor)) {
			// ウォッシャブルJACKETのAMF色指定箇所
			String wjAmfColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace1();
			String wjAmfColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace2();
			String wjAmfColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace3();
			String wjAmfColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace4();
			String wjAmfColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace5();
			String wjAmfColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace6();
			String wjAmfColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace7();
			String wjAmfColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace8();
			String wjAmfColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace9();
			String wjAmfColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColorPlace10();

			List<String> wjAmfColorPlaceList = new ArrayList<>();
			wjAmfColorPlaceList.add(wjAmfColorPlace1);
			wjAmfColorPlaceList.add(wjAmfColorPlace2);
			wjAmfColorPlaceList.add(wjAmfColorPlace3);
			wjAmfColorPlaceList.add(wjAmfColorPlace4);
			wjAmfColorPlaceList.add(wjAmfColorPlace5);
			wjAmfColorPlaceList.add(wjAmfColorPlace6);
			wjAmfColorPlaceList.add(wjAmfColorPlace7);
			wjAmfColorPlaceList.add(wjAmfColorPlace8);
			wjAmfColorPlaceList.add(wjAmfColorPlace9);
			wjAmfColorPlaceList.add(wjAmfColorPlace10);
			// JACKET_AMF色指定_箇所コード
			String wjAmfColorPlaceCodeInDb = severalCodeInDb(wjAmfColorPlaceList);
			order.setJkAmfColorPlcCd(wjAmfColorPlaceCodeInDb);

			String wjAmfColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor1();
			String wjAmfColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor2();
			String wjAmfColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor3();
			String wjAmfColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor4();
			String wjAmfColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor5();
			String wjAmfColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor6();
			String wjAmfColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor7();
			String wjAmfColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor8();
			String wjAmfColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor9();
			String wjAmfColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjAmfColor10();

			List<String> wjAmfColorsList = new ArrayList<>();
			wjAmfColorsList.add(wjAmfColor1);
			wjAmfColorsList.add(wjAmfColor2);
			wjAmfColorsList.add(wjAmfColor3);
			wjAmfColorsList.add(wjAmfColor4);
			wjAmfColorsList.add(wjAmfColor5);
			wjAmfColorsList.add(wjAmfColor6);
			wjAmfColorsList.add(wjAmfColor7);
			wjAmfColorsList.add(wjAmfColor8);
			wjAmfColorsList.add(wjAmfColor9);
			wjAmfColorsList.add(wjAmfColor10);
			// JACKET_AMF色指定_色コード
			String wjAmfColorsCodeInDb = severalColorCodeInDb(wjAmfColorPlaceList,wjAmfColorsList);
			order.setJkAmfColorCd(wjAmfColorsCodeInDb);
		}
		else {
			// JACKET_AMF色指定_箇所コード
			order.setJkAmfColorPlcCd(null);
			// JACKET_AMF色指定_箇所名
			order.setJkAmfColorPlcNm(null);
			// JACKET_AMF色指定_色コード
			order.setJkAmfColorCd(null);
			// JACKET_AMF色指定_色名
			order.setJkAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String wjBhColor = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor();
		// ボタンホール色指定:有り
		String wjBhColorYes = "0003102";
		
		if(wjBhColorYes.equals(wjBhColor)) {
			// ウォッシャブルJACKETのボタンホール色指定箇所
			String wjBhColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace1();
			String wjBhColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace2();
			String wjBhColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace3();
			String wjBhColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace4();
			String wjBhColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace5();
			String wjBhColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace6();
			String wjBhColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace7();
			String wjBhColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace8();
			String wjBhColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace9();
			String wjBhColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace10();
			String wjBhColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace11();
			String wjBhColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace12();
			String wjBhColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace13();
			String wjBhColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace14();
			String wjBhColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace15();
			String wjBhColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace16();
			String wjBhColorPlace17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColorPlace17();

			List<String> wjBhColorPlaceList = new ArrayList<>();
			wjBhColorPlaceList.add(wjBhColorPlace1);
			wjBhColorPlaceList.add(wjBhColorPlace2);
			wjBhColorPlaceList.add(wjBhColorPlace3);
			wjBhColorPlaceList.add(wjBhColorPlace4);
			wjBhColorPlaceList.add(wjBhColorPlace5);
			wjBhColorPlaceList.add(wjBhColorPlace6);
			wjBhColorPlaceList.add(wjBhColorPlace7);
			wjBhColorPlaceList.add(wjBhColorPlace8);
			wjBhColorPlaceList.add(wjBhColorPlace9);
			wjBhColorPlaceList.add(wjBhColorPlace10);
			wjBhColorPlaceList.add(wjBhColorPlace11);
			wjBhColorPlaceList.add(wjBhColorPlace12);
			wjBhColorPlaceList.add(wjBhColorPlace13);
			wjBhColorPlaceList.add(wjBhColorPlace14);
			wjBhColorPlaceList.add(wjBhColorPlace15);
			wjBhColorPlaceList.add(wjBhColorPlace16);
			wjBhColorPlaceList.add(wjBhColorPlace17);
			// JACKET_ボタンホール色指定_箇所コード
			String wjBhColorPlaceCodeInDb = severalCodeInDb(wjBhColorPlaceList);
			order.setJkBtnholeColorPlcCd(wjBhColorPlaceCodeInDb);

			String wjBhColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor1();
			String wjBhColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor2();
			String wjBhColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor3();
			String wjBhColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor4();
			String wjBhColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor5();
			String wjBhColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor6();
			String wjBhColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor7();
			String wjBhColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor8();
			String wjBhColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor9();
			String wjBhColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor10();
			String wjBhColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor11();
			String wjBhColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor12();
			String wjBhColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor13();
			String wjBhColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor14();
			String wjBhColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor15();
			String wjBhColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor16();
			String wjBhColor17 = orderCoForm.getCoOptionJacketWashableInfo().getWjBhColor17();

			List<String> wjBhColorsList = new ArrayList<>();
			wjBhColorsList.add(wjBhColor1);
			wjBhColorsList.add(wjBhColor2);
			wjBhColorsList.add(wjBhColor3);
			wjBhColorsList.add(wjBhColor4);
			wjBhColorsList.add(wjBhColor5);
			wjBhColorsList.add(wjBhColor6);
			wjBhColorsList.add(wjBhColor7);
			wjBhColorsList.add(wjBhColor8);
			wjBhColorsList.add(wjBhColor9);
			wjBhColorsList.add(wjBhColor10);
			wjBhColorsList.add(wjBhColor11);
			wjBhColorsList.add(wjBhColor12);
			wjBhColorsList.add(wjBhColor13);
			wjBhColorsList.add(wjBhColor14);
			wjBhColorsList.add(wjBhColor15);
			wjBhColorsList.add(wjBhColor16);
			wjBhColorsList.add(wjBhColor17);
			// JACKET_ボタンホール色指定_色コード
			String wjBhColorsCodeInDb = severalColorCodeInDb(wjBhColorPlaceList,wjBhColorsList);
			order.setJkBtnholeColorCd(wjBhColorsCodeInDb);
		}
		else {
			// JACKET_ボタンホール色指定_箇所コード
			order.setJkBtnholeColorPlcCd(null);
			// JACKET_ボタンホール色指定_箇所名
			order.setJkBtnholeColorPlcN(null);
			// JACKET_ボタンホール色指定_色コード
			order.setJkBtnholeColorCd(null);
			// JACKET_ボタンホール色指定_色名
			order.setJkBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String wjByColor = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor();
		// ボタン付け糸指定:有り
		String wjByColorYes = "0003402";
		
		if(wjByColorYes.equals(wjByColor)) {
			// ウォッシャブルJACKETのボタン付け糸指定箇所
			String wjByColorPlace1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace1();
			String wjByColorPlace2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace2();
			String wjByColorPlace3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace3();
			String wjByColorPlace4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace4();
			String wjByColorPlace5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace5();
			String wjByColorPlace6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace6();
			String wjByColorPlace7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace7();
			String wjByColorPlace8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace8();
			String wjByColorPlace9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace9();
			String wjByColorPlace10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace10();
			String wjByColorPlace11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace11();
			String wjByColorPlace12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace12();
			String wjByColorPlace13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace13();
			String wjByColorPlace14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace14();
			String wjByColorPlace15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace15();
			String wjByColorPlace16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColorPlace16();
			
			List<String> wjByColorPlaceList = new ArrayList<>();
			wjByColorPlaceList.add(wjByColorPlace1);
			wjByColorPlaceList.add(wjByColorPlace2);
			wjByColorPlaceList.add(wjByColorPlace3);
			wjByColorPlaceList.add(wjByColorPlace4);
			wjByColorPlaceList.add(wjByColorPlace5);
			wjByColorPlaceList.add(wjByColorPlace6);
			wjByColorPlaceList.add(wjByColorPlace7);
			wjByColorPlaceList.add(wjByColorPlace8);
			wjByColorPlaceList.add(wjByColorPlace9);
			wjByColorPlaceList.add(wjByColorPlace10);
			wjByColorPlaceList.add(wjByColorPlace11);
			wjByColorPlaceList.add(wjByColorPlace12);
			wjByColorPlaceList.add(wjByColorPlace13);
			wjByColorPlaceList.add(wjByColorPlace14);
			wjByColorPlaceList.add(wjByColorPlace15);
			wjByColorPlaceList.add(wjByColorPlace16);
			//JACKET_ボタン付け糸指定_箇所コード
			String wjByColorPlaceCodeInDb = severalCodeInDb(wjByColorPlaceList);
			order.setJkBtnthreadColorPlcCd(wjByColorPlaceCodeInDb);
			
			String wjByColor1 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor1();
			String wjByColor2 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor2();
			String wjByColor3 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor3();
			String wjByColor4 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor4();
			String wjByColor5 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor5();
			String wjByColor6 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor6();
			String wjByColor7 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor7();
			String wjByColor8 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor8();
			String wjByColor9 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor9();
			String wjByColor10 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor10();
			String wjByColor11 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor11();
			String wjByColor12 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor12();
			String wjByColor13 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor13();
			String wjByColor14 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor14();
			String wjByColor15 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor15();
			String wjByColor16 = orderCoForm.getCoOptionJacketWashableInfo().getWjByColor16();
			List<String> wjByColorsList = new ArrayList<>();
			wjByColorsList.add(wjByColor1);
			wjByColorsList.add(wjByColor2);
			wjByColorsList.add(wjByColor3);
			wjByColorsList.add(wjByColor4);
			wjByColorsList.add(wjByColor5);
			wjByColorsList.add(wjByColor6);
			wjByColorsList.add(wjByColor7);
			wjByColorsList.add(wjByColor8);
			wjByColorsList.add(wjByColor9);
			wjByColorsList.add(wjByColor10);
			wjByColorsList.add(wjByColor11);
			wjByColorsList.add(wjByColor12);
			wjByColorsList.add(wjByColor13);
			wjByColorsList.add(wjByColor14);
			wjByColorsList.add(wjByColor15);
			wjByColorsList.add(wjByColor16);
			//JACKET_ボタン付け糸指定_色コード
			String wjByColorsCodeInDb = severalColorCodeInDb(wjByColorPlaceList,wjByColorsList);
			order.setJkBtnthreadColorCd(wjByColorsCodeInDb);
		}
		else {
			//JACKET_ボタン付け糸指定_箇所コード
			order.setJkBtnthreadColorPlcCd(null);
			//JACKET_ボタン付け糸指定_箇所名
			order.setJkBtnthreadColorPlcN(null);
			//JACKET_ボタン付け糸指定_色コード
			order.setJkBtnthreadColorCd(null);
			//JACKET_ボタン付け糸指定_色名
			order.setJkBtnthreadColorNm(null);
		}
		
	}
	
	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutWashableGiletCheckBoxInDbOnlyCode(OrderCoForm orderCoForm,Order order) {
		
		// ステッチ箇所変更
		String wgStitchModify = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModify();
		// ステッチ箇所変更：有り
		String wgStitchModifyYes = "0000602";
		
		if(wgStitchModifyYes.equals(wgStitchModify)) {
			// ウォッシャブルGILETのステッチ変更箇所
			String wgStitchModifyPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace1();
			String wgStitchModifyPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace2();
			String wgStitchModifyPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgStitchModifyPlace3();
			
			List<String> wgStitchModifyPlaceList = new ArrayList<>();
			wgStitchModifyPlaceList.add(wgStitchModifyPlace1);
			wgStitchModifyPlaceList.add(wgStitchModifyPlace2);
			wgStitchModifyPlaceList.add(wgStitchModifyPlace3);
			// GILET_ステッチ箇所変更 _コード
			String wgStitchModifyPlaceCodeInDb = severalCodeInDb(wgStitchModifyPlaceList);
			order.setGlStitchPlcCd(wgStitchModifyPlaceCodeInDb);
		}
		else {
			// GILET_ステッチ箇所変更 _コード
			order.setGlStitchPlcCd(null);
			// GILET_ステッチ箇所変更 _名
			order.setGlStitchPlcNm(null);
		}
		
		// ダブルステッチ変更
		String wgDStitchModify = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModify();
		// ダブルステッチ変更:有り
		String wgDStitchModifyYes = "0002602";
		
		if(wgDStitchModifyYes.equals(wgDStitchModify)) {
			// ウォッシャブルGILETのダブルステッチ変更箇所
			String wgDStitchModifyPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlace1();
			String wgDStitchModifyPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlace2();
			String wgDStitchModifyPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgDStitchModifyPlace3();
			
			List<String> wgDStitchModifyPlaceList = new ArrayList<>();
			wgDStitchModifyPlaceList.add(wgDStitchModifyPlace1);
			wgDStitchModifyPlaceList.add(wgDStitchModifyPlace2);
			wgDStitchModifyPlaceList.add(wgDStitchModifyPlace3);
			// GILET_ダブルステッチ変更_コード
			String wgDStitchModifyPlaceCodeInDb = severalCodeInDb(wgDStitchModifyPlaceList);
			order.setGlDblstitchPlcCd(wgDStitchModifyPlaceCodeInDb);
		}
		else {
			// GILET_ダブルステッチ変更_コード
			order.setGlDblstitchPlcCd(null);
			// GILET_ダブルステッチ変更_名
			order.setGlDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String wgAmfColor = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor();
		// AMF色指定:有り
		String wgAmfColorYes = "0000802";
		
		if(wgAmfColorYes.equals(wgAmfColor)) {
			// ウォッシャブルGILETのAMF色指定箇所
			String wgAmfColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace1();
			String wgAmfColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace2();
			String wgAmfColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColorPlace3();
			
			List<String> wgAmfColorPlaceList = new ArrayList<>();
			wgAmfColorPlaceList.add(wgAmfColorPlace1);
			wgAmfColorPlaceList.add(wgAmfColorPlace2);
			wgAmfColorPlaceList.add(wgAmfColorPlace3);
			// GILET_AMF色指定_箇所コード
			String wgAmfColorPlaceCodeInDb = severalCodeInDb(wgAmfColorPlaceList);
			order.setGlAmfColorPlcCd(wgAmfColorPlaceCodeInDb);
			
			String wgAmfColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor1();
			String wgAmfColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor2();
			String wgAmfColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgAmfColor3();
			
			List<String> wgAmfColorsList = new ArrayList<>();
			wgAmfColorsList.add(wgAmfColor1);
			wgAmfColorsList.add(wgAmfColor2);
			wgAmfColorsList.add(wgAmfColor3);
			// GILET_AMF色指定_色コード
			String wgAmfColorsCodeInDb = severalColorCodeInDb(wgAmfColorPlaceList,wgAmfColorsList);
			order.setGlAmfColorCd(wgAmfColorsCodeInDb);
		}
		else {
			// GILET_AMF色指定_箇所コード
			order.setGlAmfColorPlcCd(null);
			// GILET_AMF色指定_箇所名
			order.setGlAmfColorPlcNm(null);
			// GILET_AMF色指定_色コード
			order.setGlAmfColorCd(null);
			// GILET_AMF色指定_色名
			order.setGlAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String wgBhColor = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor();
		// ボタンホール色指定：有り
		String wgBhColorYes = "0001102";
		
		if(wgBhColorYes.equals(wgBhColor)) {
			// ウォッシャブルGILETのボタンホール色指定 箇所
			String wgBhColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace1();
			String wgBhColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace2();
			String wgBhColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace3();
			String wgBhColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace4();
			String wgBhColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace5();
			String wgBhColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColorPlace6();
			
			List<String> wgBhColorPlaceList = new ArrayList<>();
			wgBhColorPlaceList.add(wgBhColorPlace1);
			wgBhColorPlaceList.add(wgBhColorPlace2);
			wgBhColorPlaceList.add(wgBhColorPlace3);
			wgBhColorPlaceList.add(wgBhColorPlace4);
			wgBhColorPlaceList.add(wgBhColorPlace5);
			wgBhColorPlaceList.add(wgBhColorPlace6);
			// GILET_ボタンホール色指定_箇所コード
			String wgBhColorPlaceCodeInDb = severalCodeInDb(wgBhColorPlaceList);
			order.setGlBtnholeColorPlcCd(wgBhColorPlaceCodeInDb);
			
			String wgBhColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor1();
			String wgBhColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor2();
			String wgBhColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor3();
			String wgBhColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor4();
			String wgBhColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor5();
			String wgBhColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgBhColor6();
			
			List<String> wgBhColorsList = new ArrayList<>();
			wgBhColorsList.add(wgBhColor1);
			wgBhColorsList.add(wgBhColor2);
			wgBhColorsList.add(wgBhColor3);
			wgBhColorsList.add(wgBhColor4);
			wgBhColorsList.add(wgBhColor5);
			wgBhColorsList.add(wgBhColor6);
			// GILET_ボタンホール色指定_色コード
			String wgBhColorsCodeInDb = severalColorCodeInDb(wgBhColorPlaceList,wgBhColorsList);
			order.setGlBtnholeColorCd(wgBhColorsCodeInDb);
		}
		else {
			// GILET_ボタンホール色指定_箇所コード
			order.setGlBtnholeColorPlcCd(null);
			// GILET_ボタンホール色指定_箇所名
			order.setGlBtnholeColorPlcNm(null);
			// GILET_ボタンホール色指定_色コード
			order.setGlBtnholeColorCd(null);
			// GILET_ボタンホール色指定_色名
			order.setGlBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String wgByColor = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor();
		// ボタン付け糸指定:有り
		String wgByColorYes = "0001402";
		
		if(wgByColorYes.equals(wgByColor)) {
			// ウォッシャブルGILETのボタン付け糸指定 箇所
			String wgByColorPlace1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace1();
			String wgByColorPlace2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace2();
			String wgByColorPlace3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace3();
			String wgByColorPlace4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace4();
			String wgByColorPlace5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace5();
			String wgByColorPlace6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace6();
			String wgByColorPlace7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace7();
			String wgByColorPlace8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace8();
			String wgByColorPlace9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace9();
			String wgByColorPlace10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColorPlace10();
			
			List<String> wgByColorPlaceList = new ArrayList<>();
			wgByColorPlaceList.add(wgByColorPlace1);
			wgByColorPlaceList.add(wgByColorPlace2);
			wgByColorPlaceList.add(wgByColorPlace3);
			wgByColorPlaceList.add(wgByColorPlace4);
			wgByColorPlaceList.add(wgByColorPlace5);
			wgByColorPlaceList.add(wgByColorPlace6);
			wgByColorPlaceList.add(wgByColorPlace7);
			wgByColorPlaceList.add(wgByColorPlace8);
			wgByColorPlaceList.add(wgByColorPlace9);
			wgByColorPlaceList.add(wgByColorPlace10);
			// GILET_ボタン付け糸指定_箇所コード
			String wgByColorPlaceCodeInDb = severalCodeInDb(wgByColorPlaceList);
			order.setGlBtnthreadColorPlcCd(wgByColorPlaceCodeInDb);
			
			String wgByColor1 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor1();
			String wgByColor2 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor2();
			String wgByColor3 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor3();
			String wgByColor4 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor4();
			String wgByColor5 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor5();
			String wgByColor6 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor6();
			String wgByColor7 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor7();
			String wgByColor8 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor8();
			String wgByColor9 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor9();
			String wgByColor10 = orderCoForm.getCoOptionGiletWashableInfo().getWgByColor10();
			
			List<String> wgByColorsList = new ArrayList<>();
			wgByColorsList.add(wgByColor1);
			wgByColorsList.add(wgByColor2);
			wgByColorsList.add(wgByColor3);
			wgByColorsList.add(wgByColor4);
			wgByColorsList.add(wgByColor5);
			wgByColorsList.add(wgByColor6);
			wgByColorsList.add(wgByColor7);
			wgByColorsList.add(wgByColor8);
			wgByColorsList.add(wgByColor9);
			wgByColorsList.add(wgByColor10);
			// GILET_ボタン付け糸指定_色コード
			String wgByColorsCodeInDb = severalColorCodeInDb(wgByColorPlaceList,wgByColorsList);
			order.setGlBtnthreadColorCd(wgByColorsCodeInDb);
		}
		else {
			// GILET_ボタン付け糸指定_箇所コード
			order.setGlBtnthreadColorPlcCd(null);
			// GILET_ボタン付け糸指定_箇所名
			order.setGlBtnthreadColorPlcNm(null);
			// GILET_ボタン付け糸指定_色コード
			order.setGlBtnthreadColorCd(null);
			// GILET_ボタン付け糸指定_色名
			order.setGlBtnthreadColorNm(null);
		}
		
	}
	
	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutWashablePantsCheckBoxInDbOnlyCode(OrderCoForm orderCoForm,Order order) {
		
		// ベルトループ
		String wpBeltLoop = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoop();
		// ベルトループ:有り
		String wpBeltLoopYes = "0000701";
		
		if(wpBeltLoopYes.equals(wpBeltLoop)) {
			// ウォッシャブルPANTSのベルトループ箇所 
			String wpBeltLoopPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace1();
			String wpBeltLoopPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace2();
			String wpBeltLoopPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace3();
			String wpBeltLoopPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace4();
			String wpBeltLoopPlace5 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace5();
			String wpBeltLoopPlace6 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace6();
			String wpBeltLoopPlace7 = orderCoForm.getCoOptionPantsWashableInfo().getWpBeltLoopPlace7();
			
			List<String> wpBeltLoopPlaceList = new ArrayList<>();
			wpBeltLoopPlaceList.add(wpBeltLoopPlace1);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace2);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace3);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace4);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace5);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace6);
			wpBeltLoopPlaceList.add(wpBeltLoopPlace7);
			// PANTS_ベルトループ_コード
			String wpBeltLoopPlaceCodeInDb = severalCodeInDb(wpBeltLoopPlaceList);
			order.setPtBeltloopCd(wpBeltLoopPlaceCodeInDb);
		}
		else {
			// PANTS_ベルトループ_コード
			order.setPtBeltloopCd(null);
			// PANTS_ベルトループ_名
			order.setPtBeltloopNm(null);
		}
		
		// ステッチ箇所変更
		String wpStitchModify = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModify();
		// ステッチ箇所変更:有り
		String wpStitchModifyYes = "0002002";
		
		if(wpStitchModifyYes.equals(wpStitchModify)) {
			// ウォッシャブルPANTSのステッチ箇所変更箇所
			String wpStitchModifyPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace1();
			String wpStitchModifyPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace2();
			String wpStitchModifyPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace3();
			String wpStitchModifyPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpStitchModifyPlace4();
			
			List<String> wpStitchModifyPlaceList = new ArrayList<>();
			wpStitchModifyPlaceList.add(wpStitchModifyPlace1);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace2);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace3);
			wpStitchModifyPlaceList.add(wpStitchModifyPlace4);
			// PANTS_ステッチ箇所変更_コード
			String wpStitchModifyPlaceCodeInDb = severalCodeInDb(wpStitchModifyPlaceList);
			order.setPtStitchPlcCd(wpStitchModifyPlaceCodeInDb);
		}
		else {
			// PANTS_ステッチ箇所変更_コード
			order.setPtStitchPlcCd(null);
			// PANTS_ステッチ箇所変更_名
			order.setPtStitchPlcNm(null);
		}
		
		// ダブルステッチ
		String wpDStitch = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitch();
		// ダブルステッチ:有り
		String wpDStitchYes = "0002202";
		
		if(wpDStitchYes.equals(wpDStitch)) {
			// ウォッシャブルPANTSのダブルステッチ箇所
			String wpDStitchPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace1();
			String wpDStitchPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace2();
			String wpDStitchPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace3();
			String wpDStitchPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpDStitchPlace4();
			
			List<String> wpDStitchPlaceList = new ArrayList<>();
			wpDStitchPlaceList.add(wpDStitchPlace1);
			wpDStitchPlaceList.add(wpDStitchPlace2);
			wpDStitchPlaceList.add(wpDStitchPlace3);
			wpDStitchPlaceList.add(wpDStitchPlace4);
			// PANTS_ダブルステッチ_コード
			String wpDStitchPlaceCodeInDb = severalCodeInDb(wpDStitchPlaceList);
			order.setPtDblstitchPlcCd(wpDStitchPlaceCodeInDb);
		}
		else {
			// PANTS_ダブルステッチ_コード
			order.setPtDblstitchPlcCd(null);
			// PANTS_ダブルステッチ_名
			order.setPtDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String wpAmfColor = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor();
		// AMF色指定:有り
		String wpAmfColorYes = "0002402";
		
		if(wpAmfColorYes.equals(wpAmfColor)) {
			// ウォッシャブルPANTSのAMF色指定箇所
			String wpAmfColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace1();
			String wpAmfColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace2();
			String wpAmfColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace3();
			String wpAmfColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColorPlace4();
			
			List<String> wpAmfColorPlaceList = new ArrayList<>();
			wpAmfColorPlaceList.add(wpAmfColorPlace1);
			wpAmfColorPlaceList.add(wpAmfColorPlace2);
			wpAmfColorPlaceList.add(wpAmfColorPlace3);
			wpAmfColorPlaceList.add(wpAmfColorPlace4);
			// PANTS_AMF色指定_箇所コード
			String wpAmfColorPlaceCodeInDb = severalCodeInDb(wpAmfColorPlaceList);
			order.setPtAmfColorPlcCd(wpAmfColorPlaceCodeInDb);
			
			String wpAmfColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor1();
			String wpAmfColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor2();
			String wpAmfColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor3();
			String wpAmfColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpAmfColor4();
			
			List<String> wpAmfColorsList = new ArrayList<>();
			wpAmfColorsList.add(wpAmfColor1);
			wpAmfColorsList.add(wpAmfColor2);
			wpAmfColorsList.add(wpAmfColor3);
			wpAmfColorsList.add(wpAmfColor4);
			// PANTS_AMF色指定_色コード
			String wpAmfColorsCodeInDb = severalColorCodeInDb(wpAmfColorPlaceList,wpAmfColorsList);
			order.setPtAmfColorCd(wpAmfColorsCodeInDb);
		}
		else {
			// PANTS_AMF色指定_箇所コード
			order.setPtAmfColorPlcCd(null);
			// PANTS_AMF色指定_箇所名
			order.setPtAmfColorPlcNm(null);
			// PANTS_AMF色指定_色コード
			order.setPtAmfColorCd(null);
			// PANTS_AMF色指定_色名
			order.setPtAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String wpBhColor = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor();
		// ボタンホール色指定:有り
		String wpBhColorYes = "0002702";
		
		if(wpBhColorYes.equals(wpBhColor)) {
			// ウォッシャブルPANTSのボタンホール色指定
			String wpBhColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace1();
			String wpBhColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace2();
			String wpBhColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace3();
			String wpBhColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColorPlace4();
			
			List<String> wpBhColorPlaceList = new ArrayList<>();
			wpBhColorPlaceList.add(wpBhColorPlace1);
			wpBhColorPlaceList.add(wpBhColorPlace2);
			wpBhColorPlaceList.add(wpBhColorPlace3);
			wpBhColorPlaceList.add(wpBhColorPlace4);
			// PANTS_ボタンホール色指定_箇所コード
			String wpBhColorPlaceCodeInDb = severalCodeInDb(wpBhColorPlaceList);
			order.setPtBtnholeColorPlcCd(wpBhColorPlaceCodeInDb);
			
			String wpBhColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor1();
			String wpBhColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor2();
			String wpBhColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor3();
			String wpBhColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpBhColor4();
			
			List<String> wpBhColorsList = new ArrayList<>();
			wpBhColorsList.add(wpBhColor1);
			wpBhColorsList.add(wpBhColor2);
			wpBhColorsList.add(wpBhColor3);
			wpBhColorsList.add(wpBhColor4);
			// PANTS_ボタンホール色指定_色コード
			String wpBhColorsCodeInDb = severalColorCodeInDb(wpBhColorPlaceList,wpBhColorsList);
			order.setPtBtnholeColorCd(wpBhColorsCodeInDb);
		}
		else {
			// PANTS_ボタンホール色指定_箇所コード
			order.setPtBtnholeColorPlcCd(null);
			// PANTS_ボタンホール色指定_箇所名
			order.setPtBtnholeColorPlcNm(null);
			// PANTS_ボタンホール色指定_色コード
			order.setPtBtnholeColorCd(null);
			// PANTS_ボタンホール色指定_色名
			order.setPtBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String wpByColor = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor();
		// ボタン付け糸指定:有り
		String wpByColorYes = "0003002";
		
		if(wpByColorYes.equals(wpByColor)) {
			// ウォッシャブルPANTSのボタン付け糸指定箇所
			String wpByColorPlace1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace1();
			String wpByColorPlace2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace2();
			String wpByColorPlace3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace3();
			String wpByColorPlace4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColorPlace4();
			
			List<String> wpByColorPlaceList = new ArrayList<>();
			wpByColorPlaceList.add(wpByColorPlace1);
			wpByColorPlaceList.add(wpByColorPlace2);
			wpByColorPlaceList.add(wpByColorPlace3);
			wpByColorPlaceList.add(wpByColorPlace4);
			// PANTS_ボタン付け糸指定_箇所コード
			String wpByColorPlaceCodeInDb = severalCodeInDb(wpByColorPlaceList);
			order.setPtBtnthreadColorPlcCd(wpByColorPlaceCodeInDb);
			
			String wpByColor1 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor1();
			String wpByColor2 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor2();
			String wpByColor3 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor3();
			String wpByColor4 = orderCoForm.getCoOptionPantsWashableInfo().getWpByColor4();
			
			List<String> wpByColorsList = new ArrayList<>();
			wpByColorsList.add(wpByColor1);
			wpByColorsList.add(wpByColor2);
			wpByColorsList.add(wpByColor3);
			wpByColorsList.add(wpByColor4);
			// PANTS_ボタン付け糸指定_色コード
			String wpByColorsCodeInDb = severalColorCodeInDb(wpByColorPlaceList,wpByColorsList);
			order.setPtBtnthreadColorCd(wpByColorsCodeInDb);
		}
		else {
			// PANTS_ボタン付け糸指定_箇所コード
			order.setPtBtnthreadColorPlcCd(null);
			// PANTS_ボタン付け糸指定_箇所名
			order.setPtBtnthreadColorPlcNm(null);
			// PANTS_ボタン付け糸指定_色コード
			order.setPtBtnthreadColorCd(null);
			// PANTS_ボタン付け糸指定_色名
			order.setPtBtnthreadColorNm(null);
		}
		
	}
	
	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutWashablePants2CheckBoxInDbOnlyCode(OrderCoForm orderCoForm,Order order) {
		
		// ベルトループ
		String wp2BeltLoop = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoop();
		// ベルトループ:有り
		String wp2BeltLoopYes = "0000701";
		
		if(wp2BeltLoopYes.equals(wp2BeltLoop)) {
			// ウォッシャブルPANTSのベルトループ箇所 
			String wp2BeltLoopPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace1();
			String wp2BeltLoopPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace2();
			String wp2BeltLoopPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace3();
			String wp2BeltLoopPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace4();
			String wp2BeltLoopPlace5 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace5();
			String wp2BeltLoopPlace6 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace6();
			String wp2BeltLoopPlace7 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BeltLoopPlace7();
			
			List<String> wp2BeltLoopPlaceList = new ArrayList<>();
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace1);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace2);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace3);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace4);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace5);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace6);
			wp2BeltLoopPlaceList.add(wp2BeltLoopPlace7);
			// PANTS2_ベルトループ_コード
			String wp2BeltLoopPlaceCodeInDb = severalCodeInDb(wp2BeltLoopPlaceList);
			order.setPt2BeltloopCd(wp2BeltLoopPlaceCodeInDb);
		}
		else {
			// PANTS2_ベルトループ_コード
			order.setPt2BeltloopCd(null);
			// PANTS2_ベルトループ_名
			order.setPt2BeltloopNm(null);
		}
		
		// ステッチ箇所変更
		String wp2StitchModify = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModify();
		// ステッチ箇所変更：有り
		String wp2StitchModifyYes = "0002002";
		
		if(wp2StitchModifyYes.equals(wp2StitchModify)) {
			// ウォッシャブルPANTSのステッチ箇所変更箇所
			String wp2StitchModifyPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace1();
			String wp2StitchModifyPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace2();
			String wp2StitchModifyPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace3();
			String wp2StitchModifyPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchModifyPlace4();
			
			List<String> wp2StitchModifyPlaceList = new ArrayList<>();
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace1);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace2);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace3);
			wp2StitchModifyPlaceList.add(wp2StitchModifyPlace4);
			// PANTS2_ステッチ箇所変更_コード
			String wp2StitchModifyPlaceCodeInDb = severalCodeInDb(wp2StitchModifyPlaceList);
			order.setPt2StitchPlcCd(wp2StitchModifyPlaceCodeInDb);
		}
		else {
			// PANTS2_ステッチ箇所変更_コード
			order.setPt2StitchPlcCd(null);
			// PANTS2_ステッチ箇所変更_名
			order.setPtStitchPlcNm(null);
		}
		
		// ダブルステッチ
		String wp2dStitch = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitch();
		// ダブルステッチ:有り
		String wp2dStitchYes = "0002202";
		
		if(wp2dStitchYes.equals(wp2dStitch)) {
			// ウォッシャブルPANTSのダブルステッチ箇所
			String wp2DStitchPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace1();
			String wp2DStitchPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace2();
			String wp2DStitchPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace3();
			String wp2DStitchPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2DStitchPlace4();
			
			List<String> wp2DStitchPlaceList = new ArrayList<>();
			wp2DStitchPlaceList.add(wp2DStitchPlace1);
			wp2DStitchPlaceList.add(wp2DStitchPlace2);
			wp2DStitchPlaceList.add(wp2DStitchPlace3);
			wp2DStitchPlaceList.add(wp2DStitchPlace4);
			// PANTS2_ダブルステッチ_コード
			String wp2DStitchPlaceCodeInDb = severalCodeInDb(wp2DStitchPlaceList);
			order.setPt2DblstitchPlcCd(wp2DStitchPlaceCodeInDb);
		}
		else {
			// PANTS2_ダブルステッチ_コード
			order.setPt2DblstitchPlcCd(null);
			// PANTS2_ダブルステッチ_名
			order.setPt2DblstitchPlcNm(null);
		}
		
		// AMF色指定
		String wp2AmfColor = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor();
		// AMF色指定:有り
		String wp2AmfColorYes = "0002402";
		
		if(wp2AmfColorYes.equals(wp2AmfColor)) {
			// ウォッシャブルPANTSのAMF色指定箇所
			String wp2AmfColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace1();
			String wp2AmfColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace2();
			String wp2AmfColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace3();
			String wp2AmfColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColorPlace4();
			
			List<String> wp2AmfColorPlaceList = new ArrayList<>();
			wp2AmfColorPlaceList.add(wp2AmfColorPlace1);
			wp2AmfColorPlaceList.add(wp2AmfColorPlace2);
			wp2AmfColorPlaceList.add(wp2AmfColorPlace3);
			wp2AmfColorPlaceList.add(wp2AmfColorPlace4);
			// PANTS2_AMF色指定_箇所コード
			String wp2AmfColorPlaceCodeInDb = severalCodeInDb(wp2AmfColorPlaceList);
			order.setPt2AmfColorPlcCd(wp2AmfColorPlaceCodeInDb);
			
			String wp2AmfColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor1();
			String wp2AmfColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor2();
			String wp2AmfColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor3();
			String wp2AmfColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2AmfColor4();
			
			List<String> wp2AmfColorsList = new ArrayList<>();
			wp2AmfColorsList.add(wp2AmfColor1);
			wp2AmfColorsList.add(wp2AmfColor2);
			wp2AmfColorsList.add(wp2AmfColor3);
			wp2AmfColorsList.add(wp2AmfColor4);
			// PANTS2_AMF色指定_色コード
			String wp2AmfColorsCodeInDb = severalColorCodeInDb(wp2AmfColorPlaceList,wp2AmfColorsList);
			order.setPt2AmfColorCd(wp2AmfColorsCodeInDb);
		}
		else {
			// PANTS2_AMF色指定_箇所コード
			order.setPt2AmfColorPlcCd(null);
			// PANTS2_AMF色指定_箇所名
			order.setPt2AmfColorPlcNm(null);
			// PANTS2_AMF色指定_色コード
			order.setPt2AmfColorCd(null);
			// PANTS2_AMF色指定_色名
			order.setPt2AmfColorNm(null);
		}
		
		// ボタンホール色指定
		String wp2BhColor = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor();
		// ボタンホール色指定:有り
		String wp2BhColorYes = "0002702";
		
		if(wp2BhColorYes.equals(wp2BhColor)) {
			// ウォッシャブルPANTSのボタンホール色指定
			String wp2BhColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace1();
			String wp2BhColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace2();
			String wp2BhColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace3();
			String wp2BhColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColorPlace4();
			
			List<String> wp2BhColorPlaceList = new ArrayList<>();
			wp2BhColorPlaceList.add(wp2BhColorPlace1);
			wp2BhColorPlaceList.add(wp2BhColorPlace2);
			wp2BhColorPlaceList.add(wp2BhColorPlace3);
			wp2BhColorPlaceList.add(wp2BhColorPlace4);
			// PANTS2_ボタンホール色指定_箇所コード
			String wp2BhColorPlaceCodeInDb = severalCodeInDb(wp2BhColorPlaceList);
			order.setPt2BtnholeColorPlcCd(wp2BhColorPlaceCodeInDb);
			
			String wp2BhColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor1();
			String wp2BhColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor2();
			String wp2BhColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor3();
			String wp2BhColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2BhColor4();
			
			List<String> wp2BhColorsList = new ArrayList<>();
			wp2BhColorsList.add(wp2BhColor1);
			wp2BhColorsList.add(wp2BhColor2);
			wp2BhColorsList.add(wp2BhColor3);
			wp2BhColorsList.add(wp2BhColor4);
			// PANTS2_ボタンホール色指定_色コード
			String wp2BhColorsCodeInDb = severalColorCodeInDb(wp2BhColorPlaceList,wp2BhColorsList);
			order.setPt2BtnholeColorCd(wp2BhColorsCodeInDb);
		}
		else {
			// PANTS2_ボタンホール色指定_箇所コード
			order.setPt2BtnholeColorPlcCd(null);
			// PANTS2_ボタンホール色指定_箇所名
			order.setPt2BtnholeColorPlcNm(null);
			// PANTS2_ボタンホール色指定_色コード
			order.setPt2BtnholeColorCd(null);
			// PANTS2_ボタンホール色指定_色名
			order.setPt2BtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String wp2ByColor = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor();
		// ボタン付け糸指定:有り
		String wp2ByColorYes = "0003002";
		
		if(wp2ByColorYes.equals(wp2ByColor)) {
			// ウォッシャブルPANTSのボタン付け糸指定箇所
			String wp2ByColorPlace1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace1();
			String wp2ByColorPlace2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace2();
			String wp2ByColorPlace3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace3();
			String wp2ByColorPlace4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColorPlace4();
			
			List<String> wp2ByColorPlaceList = new ArrayList<>();
			wp2ByColorPlaceList.add(wp2ByColorPlace1);
			wp2ByColorPlaceList.add(wp2ByColorPlace2);
			wp2ByColorPlaceList.add(wp2ByColorPlace3);
			wp2ByColorPlaceList.add(wp2ByColorPlace4);
			// PANTS2_ボタン付け糸指定_箇所コード
			String wp2ByColorPlaceCodeInDb = severalCodeInDb(wp2ByColorPlaceList);
			order.setPt2BtnthreadColorPlcCd(wp2ByColorPlaceCodeInDb);
			
			String wp2ByColor1 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor1();
			String wp2ByColor2 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor2();
			String wp2ByColor3 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor3();
			String wp2ByColor4 = orderCoForm.getCoOptionPants2WashableInfo().getWp2ByColor4();
			
			List<String> wp2ByColorsList = new ArrayList<>();
			wp2ByColorsList.add(wp2ByColor1);
			wp2ByColorsList.add(wp2ByColor2);
			wp2ByColorsList.add(wp2ByColor3);
			wp2ByColorsList.add(wp2ByColor4);
			// PANTS2_ボタン付け糸指定_色コード
			String wp2ByColorsCodeInDb = severalColorCodeInDb(wp2ByColorPlaceList,wp2ByColorsList);
			order.setPt2BtnthreadColorCd(wp2ByColorsCodeInDb);
		}
		else {
			// PANTS2_ボタン付け糸指定_箇所コード
			order.setPt2BtnthreadColorPlcCd(null);
			// PANTS2_ボタン付け糸指定_箇所名
			order.setPt2BtnthreadColorPlcNm(null);
			// PANTS2_ボタン付け糸指定_色コード
			order.setPt2BtnthreadColorCd(null);
			// PANTS2_ボタン付け糸指定_色名
			order.setPt2BtnthreadColorNm(null);
		}
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutJacketCheckBoxInDb(OrderCoForm orderCoForm, Order order) {

		//内ポケット変更
		String ojInsidePktChange = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktChange();
		//内ポケット変更 ：有り
		String ojInsidePktChangeYes = "0002002";
		if(ojInsidePktChangeYes.equals(ojInsidePktChange)) {
			// 標準JACKETの内ポケット変更
			String ojInsidePktPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktPlace1();
			String ojInsidePktPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktPlace2();
			String ojInsidePktPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktPlace3();
			String ojInsidePktPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktPlace4();

			List<String> ojInsidePktPlaceList = new ArrayList<>();
			ojInsidePktPlaceList.add(ojInsidePktPlace1);
			ojInsidePktPlaceList.add(ojInsidePktPlace2);
			ojInsidePktPlaceList.add(ojInsidePktPlace3);
			ojInsidePktPlaceList.add(ojInsidePktPlace4);
			
			// JACKET_内ポケット変更_コード
			String severalCodeInDb = severalCodeInDb(ojInsidePktPlaceList);
			order.setJkInnerPktCd(severalCodeInDb);
			// JACKET_内ポケット変更_名
			Map<String, String> ojInsidePktPlaceMap = orderCoForm.getCoOptionJacketStandardInfo()
					.getOjInsidePktPlaceMap();
			String severalNameInDb = severalNameInDb(ojInsidePktPlaceList, ojInsidePktPlaceMap);
			order.setJkInnerPktNm(severalNameInDb);
		}
		else {
			// JACKET_内ポケット変更_コード
			order.setJkInnerPktCd(null);
			// JACKET_内ポケット変更_名
			order.setJkInnerPktNm(null);
		}

		// ステッチ変更
		String ojStitchModify = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModify();
		// ステッチ変更 : 有り
		String ojStitchModifyYes = "0002402";
		if(ojStitchModifyYes.equals(ojStitchModify)) {
			// 標準JACKETのステッチ箇所変更
			String ojStitchModifyPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace1();
			String ojStitchModifyPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace2();
			String ojStitchModifyPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace3();
			String ojStitchModifyPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace4();
			String ojStitchModifyPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace5();
			String ojStitchModifyPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace6();
			String ojStitchModifyPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace7();
			String ojStitchModifyPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace8();
			String ojStitchModifyPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace9();

			List<String> ojStitchModifyPlaceList = new ArrayList<>();
			ojStitchModifyPlaceList.add(ojStitchModifyPlace1);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace2);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace3);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace4);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace5);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace6);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace7);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace8);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace9);

			// JACKET_ステッチ箇所変更_コード
			String ojStitchModifyPlaceCodeInDb = severalCodeInDb(ojStitchModifyPlaceList);
			order.setJkStitchPlcCd(ojStitchModifyPlaceCodeInDb);
			// JACKET_ステッチ箇所変更_名
			Map<String, String> ojStitchModifyPlaceMap = orderCoForm.getCoOptionJacketStandardInfo()
					.getOjStitchModifyPlaceMap();
			String ojStitchModifyPlaceNameInDb = severalNameInDb(ojStitchModifyPlaceList, ojStitchModifyPlaceMap);
			order.setJkStitchPlcNm(ojStitchModifyPlaceNameInDb);
		}
		else {
			// JACKET_ステッチ箇所変更_コード
			order.setJkStitchPlcCd(null);
			// JACKET_ステッチ箇所変更_名
			order.setJkStitchPlcNm(null);	
		}

		// ダブルステッチ変更
		String ojDStitchModify = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModify();
		// ダブルステッチ変更 : 有り
		String ojDStitchModifyYes = "0002602";
		
		if(ojDStitchModifyYes.equals(ojDStitchModify)) {
			// 標準JACKETのダブルステッチ変更
			String ojDStitchModifyPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace1();
			String ojDStitchModifyPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace2();
			String ojDStitchModifyPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace3();
			String ojDStitchModifyPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace4();
			String ojDStitchModifyPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace5();
			String ojDStitchModifyPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace6();
			String ojDStitchModifyPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace7();
			String ojDStitchModifyPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace8();
			String ojDStitchModifyPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace9();

			List<String> ojDStitchModifyPlaceList = new ArrayList<>();
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace1);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace2);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace3);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace4);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace5);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace6);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace7);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace8);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace9);
			
			// JACKET_ダブルステッチ_コード
			String ojDStitchModifyPlaceCodeInDb = severalCodeInDb(ojDStitchModifyPlaceList);
			order.setJkDblstitchPlcCd(ojDStitchModifyPlaceCodeInDb);
			// JACKET_ダブルステッチ_名
			Map<String, String> ojDStitchModifyPlaceMap = orderCoForm.getCoOptionJacketStandardInfo()
					.getOjDStitchModifyPlaceMap();
			String ojDStitchModifyPlaceNameInDb = severalNameInDb(ojDStitchModifyPlaceList, ojDStitchModifyPlaceMap);
			order.setJkDblstitchPlcNm(ojDStitchModifyPlaceNameInDb);
		}
		else {
			// JACKET_ダブルステッチ_コード
			order.setJkDblstitchPlcCd(null);
			// JACKET_ダブルステッチ_名
			order.setJkDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String ojAmfColor = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor();
		// AMF色指定: 有り
		String ojAmfColorYes = "0002802";
		
		if(ojAmfColorYes.equals(ojAmfColor)) {
			// 標準JACKETのAMF色指定
			String ojAmfColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace1();
			String ojAmfColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace2();
			String ojAmfColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace3();
			String ojAmfColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace4();
			String ojAmfColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace5();
			String ojAmfColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace6();
			String ojAmfColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace7();
			String ojAmfColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace8();
			String ojAmfColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace9();

			List<String> ojAmfColorPlaceList = new ArrayList<>();
			ojAmfColorPlaceList.add(ojAmfColorPlace1);
			ojAmfColorPlaceList.add(ojAmfColorPlace2);
			ojAmfColorPlaceList.add(ojAmfColorPlace3);
			ojAmfColorPlaceList.add(ojAmfColorPlace4);
			ojAmfColorPlaceList.add(ojAmfColorPlace5);
			ojAmfColorPlaceList.add(ojAmfColorPlace6);
			ojAmfColorPlaceList.add(ojAmfColorPlace7);
			ojAmfColorPlaceList.add(ojAmfColorPlace8);
			ojAmfColorPlaceList.add(ojAmfColorPlace9);
			
			// JACKET_AMF色指定_箇所コード
			String ojAmfColorPlaceCodeInDb = severalCodeInDb(ojAmfColorPlaceList);
			order.setJkAmfColorPlcCd(ojAmfColorPlaceCodeInDb);
			// JACKET_AMF色指定_箇所名
			Map<String, String> ojAmfColorPlaceMap = orderCoForm.getCoOptionJacketStandardInfo()
					.getOjAmfColorPlaceMap();
			String ojAmfColorPlaceNameInDb = severalNameInDb(ojAmfColorPlaceList, ojAmfColorPlaceMap);
			order.setJkAmfColorPlcNm(ojAmfColorPlaceNameInDb);

			String ojAmfColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor1();
			String ojAmfColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor2();
			String ojAmfColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor3();
			String ojAmfColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor4();
			String ojAmfColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor5();
			String ojAmfColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor6();
			String ojAmfColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor7();
			String ojAmfColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor8();
			String ojAmfColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor9();

			List<String> ojAmfColorsList = new ArrayList<>();
			ojAmfColorsList.add(ojAmfColor1);
			ojAmfColorsList.add(ojAmfColor2);
			ojAmfColorsList.add(ojAmfColor3);
			ojAmfColorsList.add(ojAmfColor4);
			ojAmfColorsList.add(ojAmfColor5);
			ojAmfColorsList.add(ojAmfColor6);
			ojAmfColorsList.add(ojAmfColor7);
			ojAmfColorsList.add(ojAmfColor8);
			ojAmfColorsList.add(ojAmfColor9);
			
			// JACKET_AMF色指定_色コード
			String ojAmfColorsCodeInDb = severalColorCodeInDb(ojAmfColorPlaceList,ojAmfColorsList);
			order.setJkAmfColorCd(ojAmfColorsCodeInDb);
			// JACKET_AMF色指定_色名
			Map<String, String> ojAmfColorsMap = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorsMap();
			String ojAmfColorsNameInDb2 = severalColorNameInDb(ojAmfColorPlaceList,ojAmfColorsList, ojAmfColorsMap);
			order.setJkAmfColorNm(ojAmfColorsNameInDb2);
		}
		else {
			// JACKET_AMF色指定_箇所コード
			order.setJkAmfColorPlcCd(null);
			// JACKET_AMF色指定_箇所名
			order.setJkAmfColorPlcNm(null);
			// JACKET_AMF色指定_色コード
			order.setJkAmfColorCd(null);
			// JACKET_AMF色指定_色名
			order.setJkAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String ojBhColor = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor();		
		// ボタンホール色指定: 有り
		String ojBhColorYes = "0003102";
		
		if(ojBhColorYes.equals(ojBhColor)) {
			// 標準JACKETのボタンホール色指定
			String ojBhColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace1();
			String ojBhColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace2();
			String ojBhColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace3();
			String ojBhColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace4();
			String ojBhColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace5();
			String ojBhColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace6();
			String ojBhColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace7();
			String ojBhColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace8();
			String ojBhColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace9();
			String ojBhColorPlace10 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace10();
			String ojBhColorPlace11 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace11();
			String ojBhColorPlace12 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace12();
			String ojBhColorPlace13 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace13();
			String ojBhColorPlace14 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace14();
			String ojBhColorPlace15 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace15();
			String ojBhColorPlace16 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace16();
			String ojBhColorPlace17 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace17();

			List<String> ojBhColorPlaceList = new ArrayList<>();
			ojBhColorPlaceList.add(ojBhColorPlace1);
			ojBhColorPlaceList.add(ojBhColorPlace2);
			ojBhColorPlaceList.add(ojBhColorPlace3);
			ojBhColorPlaceList.add(ojBhColorPlace4);
			ojBhColorPlaceList.add(ojBhColorPlace5);
			ojBhColorPlaceList.add(ojBhColorPlace6);
			ojBhColorPlaceList.add(ojBhColorPlace7);
			ojBhColorPlaceList.add(ojBhColorPlace8);
			ojBhColorPlaceList.add(ojBhColorPlace9);
			ojBhColorPlaceList.add(ojBhColorPlace10);
			ojBhColorPlaceList.add(ojBhColorPlace11);
			ojBhColorPlaceList.add(ojBhColorPlace12);
			ojBhColorPlaceList.add(ojBhColorPlace13);
			ojBhColorPlaceList.add(ojBhColorPlace14);
			ojBhColorPlaceList.add(ojBhColorPlace15);
			ojBhColorPlaceList.add(ojBhColorPlace16);
			ojBhColorPlaceList.add(ojBhColorPlace17);
			
			// JACKET_ボタンホール色指定_箇所コード
			String ojBhColorPlaceCodeInDb = severalCodeInDb(ojBhColorPlaceList);
			order.setJkBtnholeColorPlcCd(ojBhColorPlaceCodeInDb);
			// JACKET_ボタンホール色指定_箇所名
			Map<String, String> ojBhColorPlaceMap = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlaceMap();
			String ojBhColorPlaceNameInDb = severalNameInDb(ojBhColorPlaceList, ojBhColorPlaceMap);
			order.setJkBtnholeColorPlcN(ojBhColorPlaceNameInDb);

			String ojBhColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor1();
			String ojBhColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor2();
			String ojBhColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor3();
			String ojBhColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor4();
			String ojBhColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor5();
			String ojBhColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor6();
			String ojBhColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor7();
			String ojBhColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor8();
			String ojBhColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor9();
			String ojBhColor10 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor10();
			String ojBhColor11 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor11();
			String ojBhColor12 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor12();
			String ojBhColor13 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor13();
			String ojBhColor14 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor14();
			String ojBhColor15 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor15();
			String ojBhColor16 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor16();
			String ojBhColor17 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor17();

			List<String> ojBhColorsList = new ArrayList<>();
			ojBhColorsList.add(ojBhColor1);
			ojBhColorsList.add(ojBhColor2);
			ojBhColorsList.add(ojBhColor3);
			ojBhColorsList.add(ojBhColor4);
			ojBhColorsList.add(ojBhColor5);
			ojBhColorsList.add(ojBhColor6);
			ojBhColorsList.add(ojBhColor7);
			ojBhColorsList.add(ojBhColor8);
			ojBhColorsList.add(ojBhColor9);
			ojBhColorsList.add(ojBhColor10);
			ojBhColorsList.add(ojBhColor11);
			ojBhColorsList.add(ojBhColor12);
			ojBhColorsList.add(ojBhColor13);
			ojBhColorsList.add(ojBhColor14);
			ojBhColorsList.add(ojBhColor15);
			ojBhColorsList.add(ojBhColor16);
			ojBhColorsList.add(ojBhColor17);
			
			// JACKET_ボタンホール色指定_色コード
			String ojBhColorsCodeInDb = severalColorCodeInDb(ojBhColorPlaceList,ojBhColorsList);
			order.setJkBtnholeColorCd(ojBhColorsCodeInDb);
			// JACKET_ボタンホール色指定_色名
			Map<String, String> ojBhColorsMap = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorsMap();
			String ojBhColorsNameInDb = severalColorNameInDb(ojBhColorPlaceList,ojBhColorsList, ojBhColorsMap);
			order.setJkBtnholeColorNm(ojBhColorsNameInDb);
		}
		else {
			// JACKET_ボタンホール色指定_箇所コード
			order.setJkBtnholeColorPlcCd(null);
			// JACKET_ボタンホール色指定_箇所名
			order.setJkBtnholeColorPlcN(null);
			// JACKET_ボタンホール色指定_色コード
			order.setJkBtnholeColorCd(null);
			// JACKET_ボタンホール色指定_色名
			order.setJkBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String ojByColor = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor();
		// ボタン付け糸指定:有り
		String ojByColorYes = "0003402";
		
		if(ojByColorYes.equals(ojByColor)) {
			// 標準JACKETのボタン付け糸指定
			String ojByColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace1();
			String ojByColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace2();
			String ojByColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace3();
			String ojByColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace4();
			String ojByColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace5();
			String ojByColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace6();
			String ojByColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace7();
			String ojByColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace8();
			String ojByColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace9();
			String ojByColorPlace10 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace10();
			String ojByColorPlace11 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace11();
			String ojByColorPlace12 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace12();
			String ojByColorPlace13 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace13();
			String ojByColorPlace14 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace14();
			String ojByColorPlace15 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace15();
			String ojByColorPlace16 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace16();

			List<String> ojByColorPlaceList = new ArrayList<>();
			ojByColorPlaceList.add(ojByColorPlace1);
			ojByColorPlaceList.add(ojByColorPlace2);
			ojByColorPlaceList.add(ojByColorPlace3);
			ojByColorPlaceList.add(ojByColorPlace4);
			ojByColorPlaceList.add(ojByColorPlace5);
			ojByColorPlaceList.add(ojByColorPlace6);
			ojByColorPlaceList.add(ojByColorPlace7);
			ojByColorPlaceList.add(ojByColorPlace8);
			ojByColorPlaceList.add(ojByColorPlace9);
			ojByColorPlaceList.add(ojByColorPlace10);
			ojByColorPlaceList.add(ojByColorPlace11);
			ojByColorPlaceList.add(ojByColorPlace12);
			ojByColorPlaceList.add(ojByColorPlace13);
			ojByColorPlaceList.add(ojByColorPlace14);
			ojByColorPlaceList.add(ojByColorPlace15);
			ojByColorPlaceList.add(ojByColorPlace16);
			
			// JACKET_ボタン付け糸指定_箇所コード
			String ojByColorPlaceCodeInDb = severalCodeInDb(ojByColorPlaceList);
			order.setJkBtnthreadColorPlcCd(ojByColorPlaceCodeInDb);
			// JACKET_ボタン付け糸指定_箇所名
			Map<String, String> ojByColorPlaceMap = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlaceMap();
			String ojByColorPlaceNameInDb = severalNameInDb(ojByColorPlaceList, ojByColorPlaceMap);
			order.setJkBtnthreadColorPlcN(ojByColorPlaceNameInDb);

			String ojByColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor1();
			String ojByColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor2();
			String ojByColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor3();
			String ojByColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor4();
			String ojByColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor5();
			String ojByColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor6();
			String ojByColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor7();
			String ojByColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor8();
			String ojByColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor9();
			String ojByColor10 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor10();
			String ojByColor11 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor11();
			String ojByColor12 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor12();
			String ojByColor13 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor13();
			String ojByColor14 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor14();
			String ojByColor15 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor15();
			String ojByColor16 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor16();

			List<String> ojByColorsList = new ArrayList<>();
			ojByColorsList.add(ojByColor1);
			ojByColorsList.add(ojByColor2);
			ojByColorsList.add(ojByColor3);
			ojByColorsList.add(ojByColor4);
			ojByColorsList.add(ojByColor5);
			ojByColorsList.add(ojByColor6);
			ojByColorsList.add(ojByColor7);
			ojByColorsList.add(ojByColor8);
			ojByColorsList.add(ojByColor9);
			ojByColorsList.add(ojByColor10);
			ojByColorsList.add(ojByColor11);
			ojByColorsList.add(ojByColor12);
			ojByColorsList.add(ojByColor13);
			ojByColorsList.add(ojByColor14);
			ojByColorsList.add(ojByColor15);
			ojByColorsList.add(ojByColor16);
			
			// JACKET_ボタン付け糸指定_色コード
			String ojByColorsCodeInDb = severalColorCodeInDb(ojByColorPlaceList,ojByColorsList);
			order.setJkBtnthreadColorCd(ojByColorsCodeInDb);
			// JACKET_ボタン付け糸指定_色名
			Map<String, String> ojByColorsMap = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorsMap();
			String ojByColorsNameInDb = severalColorNameInDb(ojByColorPlaceList,ojByColorsList, ojByColorsMap);
			order.setJkBtnthreadColorNm(ojByColorsNameInDb);
		}
		else {
			// JACKET_ボタン付け糸指定_箇所コード
			order.setJkBtnthreadColorPlcCd(null);
			// JACKET_ボタン付け糸指定_箇所名
			order.setJkBtnthreadColorPlcN(null);
			// JACKET_ボタン付け糸指定_色コード
			order.setJkBtnthreadColorCd(null);
			// JACKET_ボタン付け糸指定_色名
			order.setJkBtnthreadColorNm(null);
		}
		
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutGiletCheckBoxInDb(OrderCoForm orderCoForm, Order order) {

		// ステッチ箇所変更
		String ogStitchModify = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModify();
		// ステッチ箇所変更
		String ogStitchModifyYes = "0000602";
		
		if(ogStitchModifyYes.equals(ogStitchModify)) {
			// 標準GILETのステッチ箇所変更
			String ogStitchModifyPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace1();
			String ogStitchModifyPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace2();
			String ogStitchModifyPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace3();

			List<String> ogStitchModifyPlaceList = new ArrayList<>();
			ogStitchModifyPlaceList.add(ogStitchModifyPlace1);
			ogStitchModifyPlaceList.add(ogStitchModifyPlace2);
			ogStitchModifyPlaceList.add(ogStitchModifyPlace3);
			// GILET_ステッチ箇所変更 _コード
			String ogStitchModifyPlaceCodeInDb = severalCodeInDb(ogStitchModifyPlaceList);
			order.setGlStitchPlcCd(ogStitchModifyPlaceCodeInDb);
			// GILET_ステッチ箇所変更 _名
			Map<String, String> ogStitchModifyPlaceMap = orderCoForm.getCoOptionGiletStandardInfo()
					.getOgStitchModifyPlaceMap();
			String ogStitchModifyPlaceNameInDb = severalNameInDb(ogStitchModifyPlaceList, ogStitchModifyPlaceMap);
			order.setGlStitchPlcNm(ogStitchModifyPlaceNameInDb);
		}
		else {
			// GILET_ステッチ箇所変更 _コード
			order.setGlStitchPlcCd(null);
			// GILET_ステッチ箇所変更 _名
			order.setGlStitchPlcNm(null);
		}
		
		// ダブルステッチ変更
		String ogDStitchModify = orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModify();
		// ダブルステッチ変更:有り
		String ogDStitchModifyYes = "0002602";
		
		if(ogDStitchModifyYes.equals(ogDStitchModify)) {
			// 標準GILETのダブルステッチ
			String ogDStitchModifyPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModifyPlace1();
			String ogDStitchModifyPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModifyPlace2();
			String ogDStitchModifyPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModifyPlace3();

			List<String> ogDStitchModifyPlaceList = new ArrayList<>();
			ogDStitchModifyPlaceList.add(ogDStitchModifyPlace1);
			ogDStitchModifyPlaceList.add(ogDStitchModifyPlace2);
			ogDStitchModifyPlaceList.add(ogDStitchModifyPlace3);
			// GILET_ダブルステッチ変更_コード
			String ogDStitchModifyPlaceCodeInDb = severalCodeInDb(ogDStitchModifyPlaceList);
			order.setGlDblstitchPlcCd(ogDStitchModifyPlaceCodeInDb);
			// GILET_ダブルステッチ変更_名
			Map<String, String> ogDStitchModifyPlaceMap = orderCoForm.getCoOptionGiletStandardInfo()
					.getOgDStitchModifyPlaceMap();
			String ogDStitchModifyPlaceNameInDb = severalNameInDb(ogDStitchModifyPlaceList, ogDStitchModifyPlaceMap);
			order.setGlDblstitchPlcNm(ogDStitchModifyPlaceNameInDb);
		}
		else {
			// GILET_ダブルステッチ変更_コード
			order.setGlDblstitchPlcCd(null);
			// GILET_ダブルステッチ変更_名
			order.setGlDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String ogAmfColor = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor();
		// AMF色指定
		String ogAmfColorYes = "0000802";
		
		if(ogAmfColorYes.equals(ogAmfColor)) {
			// 標準GILETのAMF色指定
			String ogAmfColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace1();
			String ogAmfColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace2();
			String ogAmfColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace3();

			List<String> ogAmfColorPlaceList = new ArrayList<>();
			ogAmfColorPlaceList.add(ogAmfColorPlace1);
			ogAmfColorPlaceList.add(ogAmfColorPlace2);
			ogAmfColorPlaceList.add(ogAmfColorPlace3);
			// GILET_AMF色指定_箇所コード
			String ogAmfColorPlaceCodeInDb = severalCodeInDb(ogAmfColorPlaceList);
			order.setGlAmfColorPlcCd(ogAmfColorPlaceCodeInDb);
			// GILET_AMF色指定_箇所名
			Map<String, String> ogAmfColorPlaceMap = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlaceMap();
			String ogAmfColorPlaceNameInDb = severalNameInDb(ogAmfColorPlaceList, ogAmfColorPlaceMap);
			order.setGlAmfColorPlcNm(ogAmfColorPlaceNameInDb);

			String ogAmfColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor1();
			String ogAmfColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor2();
			String ogAmfColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor3();
			List<String> ogAmfColorList = new ArrayList<>();
			ogAmfColorList.add(ogAmfColor1);
			ogAmfColorList.add(ogAmfColor2);
			ogAmfColorList.add(ogAmfColor3);
			// GILET_AMF色指定_色コード
			String ogAmfColorsCodeInDb = severalColorCodeInDb(ogAmfColorPlaceList,ogAmfColorList);
			order.setGlAmfColorCd(ogAmfColorsCodeInDb);
			// GILET_AMF色指定_色名
			Map<String, String> ogAmfColorsMap = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorsMap();
			String ogAmfColorsNameInDb = severalColorNameInDb(ogAmfColorPlaceList,ogAmfColorList, ogAmfColorsMap);
			order.setGlAmfColorNm(ogAmfColorsNameInDb);
		}
		else {
			// GILET_AMF色指定_箇所コード
			order.setGlAmfColorPlcCd(null);
			// GILET_AMF色指定_箇所名
			order.setGlAmfColorPlcNm(null);
			// GILET_AMF色指定_色コード
			order.setGlAmfColorCd(null);
			// GILET_AMF色指定_色名
			order.setGlAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String ogBhColor = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor();
		// ボタンホール色指定:有り
		String ogBhColorYes = "0001102";
		
		if(ogBhColorYes.equals(ogBhColor)) {
			// 標準GILETのボタンホール色指定
			String ogBhColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace1();
			String ogBhColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace2();
			String ogBhColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace3();
			String ogBhColorPlace4 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace4();
			String ogBhColorPlace5 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace5();
			String ogBhColorPlace6 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace6();

			List<String> ogBhColorPlaceList = new ArrayList<>();
			ogBhColorPlaceList.add(ogBhColorPlace1);
			ogBhColorPlaceList.add(ogBhColorPlace2);
			ogBhColorPlaceList.add(ogBhColorPlace3);
			ogBhColorPlaceList.add(ogBhColorPlace4);
			ogBhColorPlaceList.add(ogBhColorPlace5);
			ogBhColorPlaceList.add(ogBhColorPlace6);
			// GILET_ボタンホール色指定_箇所コード
			String ogBhColorPlaceCodeInDb = severalCodeInDb(ogBhColorPlaceList);
			order.setGlBtnholeColorPlcCd(ogBhColorPlaceCodeInDb);
			// GILET_ボタンホール色指定_箇所名
			Map<String, String> ogBhColorPlaceMap = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlaceMap();
			String ogBhColorPlaceNameInDb = severalNameInDb(ogBhColorPlaceList, ogBhColorPlaceMap);
			order.setGlBtnholeColorPlcNm(ogBhColorPlaceNameInDb);

			String ogBhColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor1();
			String ogBhColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor2();
			String ogBhColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor3();
			String ogBhColor4 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor4();
			String ogBhColor5 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor5();
			String ogBhColor6 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor6();

			List<String> ogBhColorsList = new ArrayList<>();
			ogBhColorsList.add(ogBhColor1);
			ogBhColorsList.add(ogBhColor2);
			ogBhColorsList.add(ogBhColor3);
			ogBhColorsList.add(ogBhColor4);
			ogBhColorsList.add(ogBhColor5);
			ogBhColorsList.add(ogBhColor6);
			// GILET_ボタンホール色指定_色コード
			String ogBhColorsCodeInDb = severalColorCodeInDb(ogBhColorPlaceList,ogBhColorsList);
			order.setGlBtnholeColorCd(ogBhColorsCodeInDb);
			// GILET_ボタンホール色指定_色名
			Map<String, String> ogBhColorsMap = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorsMap();
			String ogBhColorsNameInDb = severalColorNameInDb(ogBhColorPlaceList,ogBhColorsList, ogBhColorsMap);
			order.setGlBtnholeColorNm(ogBhColorsNameInDb);
		}
		else {
			// GILET_ボタンホール色指定_箇所コード
			order.setGlBtnholeColorPlcCd(null);
			// GILET_ボタンホール色指定_箇所名
			order.setGlBtnholeColorPlcNm(null);
			// GILET_ボタンホール色指定_色コード
			order.setGlBtnholeColorCd(null);
			// GILET_ボタンホール色指定_色名
			order.setGlBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String ogByColor = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor();
		// ボタン付け糸指定:有り
		String ogByColorYes = "0001402";

		if(ogByColorYes.equals(ogByColor)) {
			// 標準GILETのボタン付け糸指定
			String ogByColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace1();
			String ogByColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace2();
			String ogByColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace3();
			String ogByColorPlace4 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace4();
			String ogByColorPlace5 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace5();
			String ogByColorPlace6 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace6();
			String ogByColorPlace7 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace7();
			String ogByColorPlace8 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace8();
			String ogByColorPlace9 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace9();
			String ogByColorPlace10 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace10();

			List<String> ogByColorPlaceList = new ArrayList<>();
			ogByColorPlaceList.add(ogByColorPlace1);
			ogByColorPlaceList.add(ogByColorPlace2);
			ogByColorPlaceList.add(ogByColorPlace3);
			ogByColorPlaceList.add(ogByColorPlace4);
			ogByColorPlaceList.add(ogByColorPlace5);
			ogByColorPlaceList.add(ogByColorPlace6);
			ogByColorPlaceList.add(ogByColorPlace7);
			ogByColorPlaceList.add(ogByColorPlace8);
			ogByColorPlaceList.add(ogByColorPlace9);
			ogByColorPlaceList.add(ogByColorPlace10);
			// GILET_ボタン付け糸指定_箇所コード
			String ogByColorPlaceCodeInDb = severalCodeInDb(ogByColorPlaceList);
			order.setGlBtnthreadColorPlcCd(ogByColorPlaceCodeInDb);
			// GILET_ボタン付け糸指定_箇所名
			Map<String, String> ogByColorPlaceMap = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlaceMap();
			String ogByColorPlaceNameInDb = severalNameInDb(ogByColorPlaceList, ogByColorPlaceMap);
			order.setGlBtnthreadColorPlcNm(ogByColorPlaceNameInDb);

			String ogByColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor1();
			String ogByColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor2();
			String ogByColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor3();
			String ogByColor4 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor4();
			String ogByColor5 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor5();
			String ogByColor6 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor6();
			String ogByColor7 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor7();
			String ogByColor8 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor8();
			String ogByColor9 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor9();
			String ogByColor10 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor10();

			List<String> ogByColorsList = new ArrayList<>();
			ogByColorsList.add(ogByColor1);
			ogByColorsList.add(ogByColor2);
			ogByColorsList.add(ogByColor3);
			ogByColorsList.add(ogByColor4);
			ogByColorsList.add(ogByColor5);
			ogByColorsList.add(ogByColor6);
			ogByColorsList.add(ogByColor7);
			ogByColorsList.add(ogByColor8);
			ogByColorsList.add(ogByColor9);
			ogByColorsList.add(ogByColor10);
			// GILET_ボタン付け糸指定_色コード
			String ogByColorsCodeInDb = severalColorCodeInDb(ogByColorPlaceList,ogByColorsList);
			order.setGlBtnthreadColorCd(ogByColorsCodeInDb);
			// GILET_ボタン付け糸指定_色名
			Map<String, String> ogByColorsMap = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorsMap();
			String ogByColorsNameInDb = severalColorNameInDb(ogByColorPlaceList,ogByColorsList, ogByColorsMap);
			order.setGlBtnthreadColorNm(ogByColorsNameInDb);
		}
		else {
			// GILET_ボタン付け糸指定_箇所コード
			order.setGlBtnthreadColorPlcCd(null);
			// GILET_ボタン付け糸指定_箇所名
			order.setGlBtnthreadColorPlcNm(null);
			// GILET_ボタン付け糸指定_色コード
			order.setGlBtnthreadColorCd(null);
			// GILET_ボタン付け糸指定_色名
			order.setGlBtnthreadColorNm(null);
		}
		
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutPantsCheckBoxInDb(OrderCoForm orderCoForm, Order order) {
		
		// ベルトループ
		String opBeltLoop = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoop();
		// ベルトループ:有り
		String opBeltLoopYes = "0000701";
		
		if(opBeltLoopYes.equals(opBeltLoop)) {
			// 標準PANTSのベルトループ
			String opBeltLoopPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace1();
			String opBeltLoopPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace2();
			String opBeltLoopPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace3();
			String opBeltLoopPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace4();
			String opBeltLoopPlace5 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace5();
			String opBeltLoopPlace6 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace6();
			String opBeltLoopPlace7 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace7();
			List<String> opBeltLoopPlaceList = new ArrayList<>();
			opBeltLoopPlaceList.add(opBeltLoopPlace1);
			opBeltLoopPlaceList.add(opBeltLoopPlace2);
			opBeltLoopPlaceList.add(opBeltLoopPlace3);
			opBeltLoopPlaceList.add(opBeltLoopPlace4);
			opBeltLoopPlaceList.add(opBeltLoopPlace5);
			opBeltLoopPlaceList.add(opBeltLoopPlace6);
			opBeltLoopPlaceList.add(opBeltLoopPlace7);
			// PANTS_ベルトループ_コード
			String opBeltLoopPlaceCodeInDb = severalCodeInDb(opBeltLoopPlaceList);
			order.setPtBeltloopCd(opBeltLoopPlaceCodeInDb);
			// PANTS_ベルトループ_名
			Map<String, String> opBeltLoopPlaceMap = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlaceMap();
			String opBeltLoopPlaceNameInDb = severalNameInDb(opBeltLoopPlaceList, opBeltLoopPlaceMap);
			order.setPtBeltloopNm(opBeltLoopPlaceNameInDb);
		}
		else {
			// PANTS_ベルトループ_コード
			order.setPtBeltloopCd(null);
			// PANTS_ベルトループ_名
			order.setPtBeltloopNm(null);
		}
		
		// ステッチ箇所変更
		String opStitchModify = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModify();
		// ステッチ箇所変更:有り
		String opStitchModifyYes = "0002002";
		
		if(opStitchModifyYes.equals(opStitchModify)) {
			// 標準PANTSのステッチ箇所変更
			String opStitchModifyPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace1();
			String opStitchModifyPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace2();
			String opStitchModifyPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace3();
			String opStitchModifyPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace4();
			List<String> opStitchModifyPlaceList = new ArrayList<>();
			opStitchModifyPlaceList.add(opStitchModifyPlace1);
			opStitchModifyPlaceList.add(opStitchModifyPlace2);
			opStitchModifyPlaceList.add(opStitchModifyPlace3);
			opStitchModifyPlaceList.add(opStitchModifyPlace4);
			// PANTS_ステッチ箇所変更_コード
			String opStitchModifyPlaceCodeInDb = severalCodeInDb(opStitchModifyPlaceList);
			order.setPtStitchPlcCd(opStitchModifyPlaceCodeInDb);
			// PANTS_ステッチ箇所変更_名
			Map<String, String> opStitchModifyPlaceMap = orderCoForm.getCoOptionPantsStandardInfo()
					.getOpStitchModifyPlaceMap();
			String opStitchModifyPlaceNameInDb = severalNameInDb(opStitchModifyPlaceList, opStitchModifyPlaceMap);
			order.setPtStitchPlcNm(opStitchModifyPlaceNameInDb);
		}
		else {
			// PANTS_ステッチ箇所変更_コード
			order.setPtStitchPlcCd(null);
			// PANTS_ステッチ箇所変更_名
			order.setPtStitchPlcNm(null);
		}
		
		// ダブルステッチ
		String opDStitch = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitch();
		// ダブルステッチ:有り
		String opDStitchYes = "0002202";

		if(opDStitchYes.equals(opDStitch)) {
			// 標準PANTSのダブルステッチ
			String opDStitchPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchPlace1();
			String opDStitchPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchPlace2();
			String opDStitchPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchPlace3();
			String opDStitchPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchPlace4();
			List<String> opDStitchPlaceList = new ArrayList<>();
			opDStitchPlaceList.add(opDStitchPlace1);
			opDStitchPlaceList.add(opDStitchPlace2);
			opDStitchPlaceList.add(opDStitchPlace3);
			opDStitchPlaceList.add(opDStitchPlace4);
			// PANTS_ダブルステッチ_コード
			String opDStitchPlaceCodeInDb = severalCodeInDb(opDStitchPlaceList);
			order.setPtDblstitchPlcCd(opDStitchPlaceCodeInDb);
			// PANTS_ダブルステッチ_名
			Map<String, String> opDStitchPlaceMap = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchPlaceMap();
			String opDStitchPlaceNameInDb = severalNameInDb(opDStitchPlaceList, opDStitchPlaceMap);
			order.setPtDblstitchPlcNm(opDStitchPlaceNameInDb);
		}
		else {
			// PANTS_ダブルステッチ_コード
			order.setPtDblstitchPlcCd(null);
			// PANTS_ダブルステッチ_名
			order.setPtDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String opAmfColor = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor();
		// AMF色指定:有り
		String opAmfColorYes = "0002402";
		
		if(opAmfColorYes.equals(opAmfColor)) {
			// 標準PANTSのAMF色指定
			String opAmfColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace1();
			String opAmfColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace2();
			String opAmfColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace3();
			String opAmfColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace4();
			List<String> opAmfColorPlaceList = new ArrayList<>();
			opAmfColorPlaceList.add(opAmfColorPlace1);
			opAmfColorPlaceList.add(opAmfColorPlace2);
			opAmfColorPlaceList.add(opAmfColorPlace3);
			opAmfColorPlaceList.add(opAmfColorPlace4);
			// PANTS_AMF色指定_箇所コード
			String opAmfColorPlaceCodeInDb = severalCodeInDb(opAmfColorPlaceList);
			order.setPtAmfColorPlcCd(opAmfColorPlaceCodeInDb);
			// PANTS_AMF色指定_箇所名
			Map<String, String> opAmfColorPlaceMap = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlaceMap();
			String opAmfColorPlaceNameInDb = severalNameInDb(opAmfColorPlaceList, opAmfColorPlaceMap);
			order.setPtAmfColorPlcNm(opAmfColorPlaceNameInDb);

			String opAmfColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor1();
			String opAmfColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor2();
			String opAmfColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor3();
			String opAmfColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor4();
			List<String> opAmfColorsList = new ArrayList<>();
			opAmfColorsList.add(opAmfColor1);
			opAmfColorsList.add(opAmfColor2);
			opAmfColorsList.add(opAmfColor3);
			opAmfColorsList.add(opAmfColor4);
			// PANTS_AMF色指定_色コード
			String opAmfColorsCodeInDb = severalColorCodeInDb(opAmfColorPlaceList,opAmfColorsList);
			order.setPtAmfColorCd(opAmfColorsCodeInDb);
			// PANTS_AMF色指定_色名
			Map<String, String> opAmfColorsMap = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorsMap();
			String opAmfColorsNameInDb = severalColorNameInDb(opAmfColorPlaceList,opAmfColorsList, opAmfColorsMap);
			order.setPtAmfColorNm(opAmfColorsNameInDb);
		}
		else {
			// PANTS_AMF色指定_箇所コード
			order.setPtAmfColorPlcCd(null);
			// PANTS_AMF色指定_箇所名
			order.setPtAmfColorPlcNm(null);
			// PANTS_AMF色指定_色コード
			order.setPtAmfColorCd(null);
			// PANTS_AMF色指定_色名
			order.setPtAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String opBhColor = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor();
		// ボタンホール色指定:有り
		String opBhColorYes = "0002702";
		if(opBhColorYes.equals(opBhColor)) {
			// 標準PANTSのボタンホール色指定
			String opBhColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace1();
			String opBhColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace2();
			String opBhColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace3();
			String opBhColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace4();
			List<String> opBhColorPlaceList = new ArrayList<>();
			opBhColorPlaceList.add(opBhColorPlace1);
			opBhColorPlaceList.add(opBhColorPlace2);
			opBhColorPlaceList.add(opBhColorPlace3);
			opBhColorPlaceList.add(opBhColorPlace4);
			// PANTS_ボタンホール色指定_箇所コード
			String opBhColorPlaceCodeInDb = severalCodeInDb(opBhColorPlaceList);
			order.setPtBtnholeColorPlcCd(opBhColorPlaceCodeInDb);
			// PANTS_ボタンホール色指定_箇所名
			Map<String, String> opBhColorPlaceMap = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlaceMap();
			String opBhColorPlaceNameInDb = severalNameInDb(opBhColorPlaceList, opBhColorPlaceMap);
			order.setPtBtnholeColorPlcNm(opBhColorPlaceNameInDb);

			String opBhColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor1();
			String opBhColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor2();
			String opBhColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor3();
			String opBhColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor4();
			List<String> opBhColorsList = new ArrayList<>();
			opBhColorsList.add(opBhColor1);
			opBhColorsList.add(opBhColor2);
			opBhColorsList.add(opBhColor3);
			opBhColorsList.add(opBhColor4);
			// PANTS_ボタンホール色指定_色コード
			String opBhColorsCodeInDb = severalColorCodeInDb(opBhColorPlaceList,opBhColorsList);
			order.setPtBtnholeColorCd(opBhColorsCodeInDb);
			// PANTS_ボタンホール色指定_色名
			Map<String, String> opBhColorsMap = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorsMap();
			String opBhColorsNameInDb = severalColorNameInDb(opBhColorPlaceList,opBhColorsList, opBhColorsMap);
			order.setPtBtnholeColorNm(opBhColorsNameInDb);
		}
		else {
			// PANTS_ボタンホール色指定_箇所コード
			order.setPtBtnholeColorPlcCd(null);
			// PANTS_ボタンホール色指定_箇所名
			order.setPtBtnholeColorPlcNm(null);
			// PANTS_ボタンホール色指定_色コード
			order.setPtBtnholeColorCd(null);
			// PANTS_ボタンホール色指定_色名
			order.setPtBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String opByColor = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor();
		// ボタン付け糸指定:有り
		String opByColorYes = "0003002";

		if(opByColorYes.equals(opByColor)) {
			// 標準PANTSのボタン付け糸指定
			String opByColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace1();
			String opByColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace2();
			String opByColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace3();
			String opByColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace4();
			List<String> opByColorPlaceList = new ArrayList<>();
			opByColorPlaceList.add(opByColorPlace1);
			opByColorPlaceList.add(opByColorPlace2);
			opByColorPlaceList.add(opByColorPlace3);
			opByColorPlaceList.add(opByColorPlace4);
			// PANTS_ボタン付け糸指定_箇所コード
			String opByColorPlaceCodeInDb = severalCodeInDb(opByColorPlaceList);
			order.setPtBtnthreadColorPlcCd(opByColorPlaceCodeInDb);
			// PANTS_ボタン付け糸指定_箇所名
			Map<String, String> opByColorPlaceMap = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlaceMap();
			String opByColorPlaceNameInDb = severalNameInDb(opByColorPlaceList, opByColorPlaceMap);
			order.setPtBtnthreadColorPlcNm(opByColorPlaceNameInDb);

			String opByColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor1();
			String opByColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor2();
			String opByColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor3();
			String opByColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor4();
			List<String> opByColorsList = new ArrayList<>();
			opByColorsList.add(opByColor1);
			opByColorsList.add(opByColor2);
			opByColorsList.add(opByColor3);
			opByColorsList.add(opByColor4);
				// PANTS_ボタン付け糸指定_色コード
				String opByColorsCodeInDb = severalColorCodeInDb(opByColorPlaceList,opByColorsList);
				order.setPtBtnthreadColorCd(opByColorsCodeInDb);
				// PANTS_ボタン付け糸指定_色名
				Map<String, String> opByColorsMap = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorsMap();
				String opByColorsNameInDb = severalColorNameInDb(opByColorPlaceList,opByColorsList, opByColorsMap);
				order.setPtBtnthreadColorNm(opByColorsNameInDb);
		}
		else {
			// PANTS_ボタン付け糸指定_箇所コード
			order.setPt2BtnthreadColorPlcCd(null);
			// PANTS_ボタン付け糸指定_箇所名
			order.setPtBtnthreadColorPlcNm(null);
			// PANTS_ボタン付け糸指定_色コード
			order.setPtBtnthreadColorCd(null);
			// PANTS_ボタン付け糸指定_色名
			order.setPtBtnthreadColorNm(null);
		}
		
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutPants2CheckBoxInDb(OrderCoForm orderCoForm, Order order) {
		
		// ベルトループ
		String op2BeltLoop = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoop();
		// ベルトループ:有り
		String op2BeltLoopYes = "0000701";
		
		if(op2BeltLoopYes.equals(op2BeltLoop)) {
			// 標準2PANTSのベルトループ
			String op2BeltLoopPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace1();
			String op2BeltLoopPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace2();
			String op2BeltLoopPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace3();
			String op2BeltLoopPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace4();
			String op2BeltLoopPlace5 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace5();
			String op2BeltLoopPlace6 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace6();
			String op2BeltLoopPlace7 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace7();
			List<String> op2BeltLoopPlaceList = new ArrayList<>();
			op2BeltLoopPlaceList.add(op2BeltLoopPlace1);
			op2BeltLoopPlaceList.add(op2BeltLoopPlace2);
			op2BeltLoopPlaceList.add(op2BeltLoopPlace3);
			op2BeltLoopPlaceList.add(op2BeltLoopPlace4);
			op2BeltLoopPlaceList.add(op2BeltLoopPlace5);
			op2BeltLoopPlaceList.add(op2BeltLoopPlace6);
			op2BeltLoopPlaceList.add(op2BeltLoopPlace7);
			// 2PANTS_ベルトループ_コード
			String op2BeltLoopPlaceCodeInDb = severalCodeInDb(op2BeltLoopPlaceList);
			order.setPt2BeltloopCd(op2BeltLoopPlaceCodeInDb);
			// 2PANTS_ベルトループ_名
			Map<String, String> op2BeltLoopPlaceMap = orderCoForm.getCoOptionPants2StandardInfo()
					.getOp2BeltLoopPlaceMap();
			String op2BeltLoopPlaceNameInDb = severalNameInDb(op2BeltLoopPlaceList, op2BeltLoopPlaceMap);
			order.setPt2BeltloopNm(op2BeltLoopPlaceNameInDb);
		}
		else {
			// 2PANTS_ベルトループ_コード
			order.setPt2BeltloopCd(null);
			// 2PANTS_ベルトループ_名
			order.setPt2BeltloopNm(null);
		}
		
		// ステッチ箇所変更
		String op2StitchModify = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModify();
		// ステッチ箇所変更:有り
		String op2StitchModifyYes = "0002002";
		
		if(op2StitchModifyYes.equals(op2StitchModify)) {
			// 標準2PANTSのステッチ箇所変更
			String op2StitchModifyPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace1();
			String op2StitchModifyPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace2();
			String op2StitchModifyPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace3();
			String op2StitchModifyPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace4();
			List<String> op2StitchModifyPlaceList = new ArrayList<>();
			op2StitchModifyPlaceList.add(op2StitchModifyPlace1);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace2);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace3);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace4);
			// 2PANTS_ステッチ箇所変更_コード
			String op2StitchModifyPlaceCodeInDb = severalCodeInDb(op2StitchModifyPlaceList);
			order.setPt2StitchPlcCd(op2StitchModifyPlaceCodeInDb);
			// 2PANTS_ステッチ箇所変更_名
			Map<String, String> op2StitchModifyPlaceMap = orderCoForm.getCoOptionPants2StandardInfo()
					.getOp2StitchModifyPlaceMap();
			String op2StitchModifyPlaceNameInDb = severalNameInDb(op2StitchModifyPlaceList, op2StitchModifyPlaceMap);
			order.setPt2StitchPlcNm(op2StitchModifyPlaceNameInDb);
		}
		else {
			// 2PANTS_ステッチ箇所変更_コード
			order.setPt2StitchPlcCd(null);
			// 2PANTS_ステッチ箇所変更_名
			order.setPt2StitchPlcNm(null);
		}
		
		// ダブルステッチ
		String op2dStitch = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitch();
		// ダブルステッチ:有り
		String op2dStitchYes = "0002202";
		
		if(op2dStitchYes.equals(op2dStitch)) {
			// 標準2PANTSのダブルステッチ
			String op2dStitchPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitchPlace1();
			String op2dStitchPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitchPlace2();
			String op2dStitchPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitchPlace3();
			String op2dStitchPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitchPlace4();
			List<String> p2dStitchPlaceList = new ArrayList<>();
			p2dStitchPlaceList.add(op2dStitchPlace1);
			p2dStitchPlaceList.add(op2dStitchPlace2);
			p2dStitchPlaceList.add(op2dStitchPlace3);
			p2dStitchPlaceList.add(op2dStitchPlace4);
			// 2PANTS_ダブルステッチ_コード
			String p2dStitchPlaceCodeInDb = severalCodeInDb(p2dStitchPlaceList);
			order.setPt2DblstitchPlcCd(p2dStitchPlaceCodeInDb);
			// 2PANTS_ダブルステッチ_名
			Map<String, String> op2dStitchPlaceMap = orderCoForm.getCoOptionPants2StandardInfo()
					.getOp2DStitchPlaceMap();
			String op2dStitchPlaceNameInDb = severalNameInDb(p2dStitchPlaceList, op2dStitchPlaceMap);
			order.setPt2DblstitchPlcNm(op2dStitchPlaceNameInDb);
		}
		else {
			// 2PANTS_ダブルステッチ_コード
			order.setPt2DblstitchPlcCd(null);
			// 2PANTS_ダブルステッチ_名
			order.setPt2DblstitchPlcNm(null);
		}

		// AMF色指定 
		 String op2AmfColor = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor();
		// AMF色指定 :有り
		 String op2AmfColorYes = "0002402";
		 
		 if(op2AmfColorYes.equals(op2AmfColor)) {
			// 標準2PANTSのAMF色指定
				String op2AmfColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace1();
				String op2AmfColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace2();
				String op2AmfColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace3();
				String op2AmfColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace4();
				List<String> op2AmfColorPlaceList = new ArrayList<>();
				op2AmfColorPlaceList.add(op2AmfColorPlace1);
				op2AmfColorPlaceList.add(op2AmfColorPlace2);
				op2AmfColorPlaceList.add(op2AmfColorPlace3);
				op2AmfColorPlaceList.add(op2AmfColorPlace4);
				// 2PANTS_AMF色指定_箇所コード
				String op2AmfColorPlaceCodeInDb = severalCodeInDb(op2AmfColorPlaceList);
				order.setPt2AmfColorPlcCd(op2AmfColorPlaceCodeInDb);
				// 2PANTS_AMF色指定_箇所名
				Map<String, String> op2AmfColorPlaceMap = orderCoForm.getCoOptionPants2StandardInfo()
						.getOp2AmfColorPlaceMap();
				String op2AmfColorPlaceNameInDb = severalNameInDb(op2AmfColorPlaceList, op2AmfColorPlaceMap);
				order.setPt2AmfColorPlcNm(op2AmfColorPlaceNameInDb);

				String op2AmfColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor1();
				String op2AmfColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor2();
				String op2AmfColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor3();
				String op2AmfColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor4();
				List<String> op2AmfColorsList = new ArrayList<>();
				op2AmfColorsList.add(op2AmfColor1);
				op2AmfColorsList.add(op2AmfColor2);
				op2AmfColorsList.add(op2AmfColor3);
				op2AmfColorsList.add(op2AmfColor4);
				// 2PANTS_AMF色指定_色コード
				String op2AmfColorsCodeInDb = severalColorCodeInDb(op2AmfColorPlaceList,op2AmfColorsList);
				order.setPt2AmfColorCd(op2AmfColorsCodeInDb);
				// 2PANTS_AMF色指定_色名
				Map<String, String> op2AmfColorsMap = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorsMap();
				String op2AmfColorsNameInDb = severalColorNameInDb(op2AmfColorPlaceList,op2AmfColorsList, op2AmfColorsMap);
				order.setPt2AmfColorNm(op2AmfColorsNameInDb);
		 }
		 else {
			// 2PANTS_AMF色指定_箇所コード
				order.setPt2AmfColorPlcCd(null);
				// 2PANTS_AMF色指定_箇所名
				order.setPt2AmfColorPlcCd(null);
				// 2PANTS_AMF色指定_色コード
				order.setPt2AmfColorCd(null);
				// 2PANTS_AMF色指定_色名
				order.setPt2AmfColorNm(null);
		 }
		
		// ボタンホール色指定
		String op2BhColor = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor();
		// ボタンホール色指定:有り
		String op2BhColorYes = "0002702";
		
		if(op2BhColorYes.equals(op2BhColor)) {
			// 標準2PANTSのボタンホール色指定
			String op2BhColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace1();
			String op2BhColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace2();
			String op2BhColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace3();
			String op2BhColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace4();
			List<String> op2BhColorPlaceList = new ArrayList<>();
			op2BhColorPlaceList.add(op2BhColorPlace1);
			op2BhColorPlaceList.add(op2BhColorPlace2);
			op2BhColorPlaceList.add(op2BhColorPlace3);
			op2BhColorPlaceList.add(op2BhColorPlace4);
			// 2PANTS_ボタンホール色指定_箇所コード
			String op2BhColorPlaceCodeInDb = severalCodeInDb(op2BhColorPlaceList);
			order.setPt2BtnholeColorPlcCd(op2BhColorPlaceCodeInDb);
			// 2PANTS_ボタンホール色指定_箇所名
			Map<String, String> op2BhColorPlaceMap = orderCoForm.getCoOptionPants2StandardInfo()
					.getOp2BhColorPlaceMap();
			String op2BhColorPlaceNameInDb = severalNameInDb(op2BhColorPlaceList, op2BhColorPlaceMap);
			order.setPt2BtnholeColorPlcNm(op2BhColorPlaceNameInDb);

			String op2BhColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor1();
			String op2BhColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor2();
			String op2BhColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor3();
			String op2BhColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor4();
			List<String> op2BhColorsList = new ArrayList<>();
			op2BhColorsList.add(op2BhColor1);
			op2BhColorsList.add(op2BhColor2);
			op2BhColorsList.add(op2BhColor3);
			op2BhColorsList.add(op2BhColor4);
			// 2PANTS_ボタンホール色指定_色コード
			String op2BhColorsCodeInDb = severalColorCodeInDb(op2BhColorPlaceList,op2BhColorsList);
			order.setPt2BtnholeColorCd(op2BhColorsCodeInDb);
			// 2PANTS_ボタンホール色指定_色名
			Map<String, String> op2BhColorsMap = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorsMap();
			String op2BhColorsNameInDb = severalColorNameInDb(op2BhColorPlaceList,op2BhColorsList, op2BhColorsMap);
			order.setPt2BtnholeColorNm(op2BhColorsNameInDb);
		}
		else {
			// 2PANTS_ボタンホール色指定_箇所コード
			order.setPt2BtnholeColorPlcCd(null);
			// 2PANTS_ボタンホール色指定_箇所名
			order.setPt2BtnholeColorPlcNm(null);
			// 2PANTS_ボタンホール色指定_色コード
			order.setPt2BtnholeColorCd(null);
			// 2PANTS_ボタンホール色指定_色名
			order.setPt2BtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String op2ByColor = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor();
		// ボタン付け糸指定:有り
		String op2ByColorYes = "0003002";

		if(op2ByColorYes.equals(op2ByColor)) {
			// 標準2PANTSのボタン付け糸指定
			String op2ByColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace1();
			String op2ByColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace2();
			String op2ByColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace3();
			String op2ByColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace4();
			List<String> op2ByColorPlaceList = new ArrayList<>();
			op2ByColorPlaceList.add(op2ByColorPlace1);
			op2ByColorPlaceList.add(op2ByColorPlace2);
			op2ByColorPlaceList.add(op2ByColorPlace3);
			op2ByColorPlaceList.add(op2ByColorPlace4);
			// 2PANTS_ボタン付け糸指定_箇所コード
			String op2ByColorPlaceCodeInDb = severalCodeInDb(op2ByColorPlaceList);
			order.setPt2BtnthreadColorPlcCd(op2ByColorPlaceCodeInDb);
			// 2PANTS_ボタン付け糸指定_箇所名
			Map<String, String> op2ByColorPlaceMap = orderCoForm.getCoOptionPants2StandardInfo()
					.getOp2ByColorPlaceMap();
			String op2ByColorPlaceNameInDb = severalNameInDb(op2ByColorPlaceList, op2ByColorPlaceMap);
			order.setPt2BtnthreadColorPlcNm(op2ByColorPlaceNameInDb);

			String op2ByColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor1();
			String op2ByColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor2();
			String op2ByColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor3();
			String op2ByColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor4();
			List<String> op2ByColorsList = new ArrayList<>();
			op2ByColorsList.add(op2ByColor1);
			op2ByColorsList.add(op2ByColor2);
			op2ByColorsList.add(op2ByColor3);
			op2ByColorsList.add(op2ByColor4);
			// 2PANTS_ボタン付け糸指定_色コード
			String op2ByColorsCodeInDb = severalColorCodeInDb(op2ByColorPlaceList,op2ByColorsList);
			order.setPt2BtnthreadColorCd(op2ByColorsCodeInDb);
			// 2PANTS_ボタン付け糸指定_色名
			Map<String, String> op2ByColorsMap = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorsMap();
			String op2ByColorsNameInDb = severalColorNameInDb(op2ByColorPlaceList,op2ByColorsList, op2ByColorsMap);
			order.setPt2BtnthreadColorNm(op2ByColorsNameInDb);
		}
		else {
			// 2PANTS_ボタン付け糸指定_箇所コード
			order.setPt2BtnthreadColorPlcCd(null);
			// 2PANTS_ボタン付け糸指定_箇所名
			order.setPt2BtnthreadColorPlcNm(null);
			// 2PANTS_ボタン付け糸指定_色コード
			order.setPt2BtnthreadColorCd(null);
			// 2PANTS_ボタン付け糸指定_色名
			order.setPt2BtnthreadColorNm(null);
		}

	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutJacketCheckBoxInDbOnlyCode(OrderCoForm orderCoForm, Order order) {

		//内ポケット変更
		String ojInsidePktChange = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktChange();
		//内ポケット変更 ：有り
		String ojInsidePktChangeYes = "0002002";
		if(ojInsidePktChangeYes.equals(ojInsidePktChange)) {
			// 標準JACKETの内ポケット変更
			String ojInsidePktPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktPlace1();
			String ojInsidePktPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktPlace2();
			String ojInsidePktPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktPlace3();
			String ojInsidePktPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjInsidePktPlace4();

			List<String> ojInsidePktPlaceList = new ArrayList<>();
			ojInsidePktPlaceList.add(ojInsidePktPlace1);
			ojInsidePktPlaceList.add(ojInsidePktPlace2);
			ojInsidePktPlaceList.add(ojInsidePktPlace3);
			ojInsidePktPlaceList.add(ojInsidePktPlace4);
			// JACKET_内ポケット変更_コード
			String severalCodeInDb = severalCodeInDb(ojInsidePktPlaceList);
			order.setJkInnerPktCd(severalCodeInDb);
		}
		else {
			// JACKET_内ポケット変更_コード
			order.setJkInnerPktCd(null);
			// JACKET_内ポケット変更_名
			order.setJkInnerPktNm(null);
		}

		// ステッチ変更
		String ojStitchModify = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModify();
		// ステッチ変更 : 有り
		String ojStitchModifyYes = "0002402";
		if(ojStitchModifyYes.equals(ojStitchModify)) {
			// 標準JACKETのステッチ箇所変更
			String ojStitchModifyPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace1();
			String ojStitchModifyPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace2();
			String ojStitchModifyPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace3();
			String ojStitchModifyPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace4();
			String ojStitchModifyPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace5();
			String ojStitchModifyPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace6();
			String ojStitchModifyPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace7();
			String ojStitchModifyPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace8();
			String ojStitchModifyPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjStitchModifyPlace9();

			List<String> ojStitchModifyPlaceList = new ArrayList<>();
			ojStitchModifyPlaceList.add(ojStitchModifyPlace1);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace2);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace3);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace4);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace5);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace6);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace7);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace8);
			ojStitchModifyPlaceList.add(ojStitchModifyPlace9);
			ojStitchModifyPlaceList.removeAll(Collections.singleton(null));

			// JACKET_ステッチ箇所変更_コード
			String ojStitchModifyPlaceCodeInDb = severalCodeInDb(ojStitchModifyPlaceList);
			order.setJkStitchPlcCd(ojStitchModifyPlaceCodeInDb);
		}
		else {
			// JACKET_ステッチ箇所変更_コード
			order.setJkStitchPlcCd(null);
			// JACKET_ステッチ箇所変更_名
			order.setJkStitchPlcNm(null);	
		}

		// ダブルステッチ変更
		String ojDStitchModify = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModify();
		// ダブルステッチ変更 : 有り
		String ojDStitchModifyYes = "0002602";
		
		if(ojDStitchModifyYes.equals(ojDStitchModify)) {
			// 標準JACKETのダブルステッチ変更
			String ojDStitchModifyPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace1();
			String ojDStitchModifyPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace2();
			String ojDStitchModifyPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace3();
			String ojDStitchModifyPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace4();
			String ojDStitchModifyPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace5();
			String ojDStitchModifyPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace6();
			String ojDStitchModifyPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace7();
			String ojDStitchModifyPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace8();
			String ojDStitchModifyPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjDStitchModifyPlace9();

			List<String> ojDStitchModifyPlaceList = new ArrayList<>();
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace1);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace2);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace3);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace4);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace5);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace6);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace7);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace8);
			ojDStitchModifyPlaceList.add(ojDStitchModifyPlace9);
			// JACKET_ダブルステッチ_コード
			String ojDStitchModifyPlaceCodeInDb = severalCodeInDb(ojDStitchModifyPlaceList);
			order.setJkDblstitchPlcCd(ojDStitchModifyPlaceCodeInDb);
		}
		else {
			// JACKET_ダブルステッチ_コード
			order.setJkDblstitchPlcCd(null);
			// JACKET_ダブルステッチ_名
			order.setJkDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String ojAmfColor = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor();
		// AMF色指定: 有り
		String ojAmfColorYes = "0002802";
		
		if(ojAmfColorYes.equals(ojAmfColor)) {
			// 標準JACKETのAMF色指定
			String ojAmfColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace1();
			String ojAmfColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace2();
			String ojAmfColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace3();
			String ojAmfColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace4();
			String ojAmfColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace5();
			String ojAmfColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace6();
			String ojAmfColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace7();
			String ojAmfColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace8();
			String ojAmfColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColorPlace9();

			List<String> ojAmfColorPlaceList = new ArrayList<>();
			ojAmfColorPlaceList.add(ojAmfColorPlace1);
			ojAmfColorPlaceList.add(ojAmfColorPlace2);
			ojAmfColorPlaceList.add(ojAmfColorPlace3);
			ojAmfColorPlaceList.add(ojAmfColorPlace4);
			ojAmfColorPlaceList.add(ojAmfColorPlace5);
			ojAmfColorPlaceList.add(ojAmfColorPlace6);
			ojAmfColorPlaceList.add(ojAmfColorPlace7);
			ojAmfColorPlaceList.add(ojAmfColorPlace8);
			ojAmfColorPlaceList.add(ojAmfColorPlace9);
			// JACKET_AMF色指定_箇所コード
			String ojAmfColorPlaceCodeInDb = severalCodeInDb(ojAmfColorPlaceList);
			order.setJkAmfColorPlcCd(ojAmfColorPlaceCodeInDb);

			String ojAmfColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor1();
			String ojAmfColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor2();
			String ojAmfColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor3();
			String ojAmfColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor4();
			String ojAmfColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor5();
			String ojAmfColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor6();
			String ojAmfColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor7();
			String ojAmfColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor8();
			String ojAmfColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjAmfColor9();

			List<String> ojAmfColorsList = new ArrayList<>();
			ojAmfColorsList.add(ojAmfColor1);
			ojAmfColorsList.add(ojAmfColor2);
			ojAmfColorsList.add(ojAmfColor3);
			ojAmfColorsList.add(ojAmfColor4);
			ojAmfColorsList.add(ojAmfColor5);
			ojAmfColorsList.add(ojAmfColor6);
			ojAmfColorsList.add(ojAmfColor7);
			ojAmfColorsList.add(ojAmfColor8);
			ojAmfColorsList.add(ojAmfColor9);
			// JACKET_AMF色指定_色コード
			String ojAmfColorsCodeInDb = severalColorCodeInDb(ojAmfColorPlaceList,ojAmfColorsList);
			order.setJkAmfColorCd(ojAmfColorsCodeInDb);
		}
		else {
			// JACKET_AMF色指定_箇所コード
			order.setJkAmfColorPlcCd(null);
			// JACKET_AMF色指定_箇所名
			order.setJkAmfColorPlcNm(null);
			// JACKET_AMF色指定_色コード
			order.setJkAmfColorCd(null);
			// JACKET_AMF色指定_色名
			order.setJkAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String ojBhColor = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor();		
		// ボタンホール色指定: 有り
		String ojBhColorYes = "0003102";
		
		if(ojBhColorYes.equals(ojBhColor)) {
			// 標準JACKETのボタンホール色指定
			String ojBhColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace1();
			String ojBhColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace2();
			String ojBhColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace3();
			String ojBhColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace4();
			String ojBhColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace5();
			String ojBhColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace6();
			String ojBhColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace7();
			String ojBhColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace8();
			String ojBhColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace9();
			String ojBhColorPlace10 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace10();
			String ojBhColorPlace11 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace11();
			String ojBhColorPlace12 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace12();
			String ojBhColorPlace13 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace13();
			String ojBhColorPlace14 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace14();
			String ojBhColorPlace15 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace15();
			String ojBhColorPlace16 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace16();
			String ojBhColorPlace17 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColorPlace17();

			List<String> ojBhColorPlaceList = new ArrayList<>();
			ojBhColorPlaceList.add(ojBhColorPlace1);
			ojBhColorPlaceList.add(ojBhColorPlace2);
			ojBhColorPlaceList.add(ojBhColorPlace3);
			ojBhColorPlaceList.add(ojBhColorPlace4);
			ojBhColorPlaceList.add(ojBhColorPlace5);
			ojBhColorPlaceList.add(ojBhColorPlace6);
			ojBhColorPlaceList.add(ojBhColorPlace7);
			ojBhColorPlaceList.add(ojBhColorPlace8);
			ojBhColorPlaceList.add(ojBhColorPlace9);
			ojBhColorPlaceList.add(ojBhColorPlace10);
			ojBhColorPlaceList.add(ojBhColorPlace11);
			ojBhColorPlaceList.add(ojBhColorPlace12);
			ojBhColorPlaceList.add(ojBhColorPlace13);
			ojBhColorPlaceList.add(ojBhColorPlace14);
			ojBhColorPlaceList.add(ojBhColorPlace15);
			ojBhColorPlaceList.add(ojBhColorPlace16);
			ojBhColorPlaceList.add(ojBhColorPlace17);
			// JACKET_ボタンホール色指定_箇所コード
			String ojBhColorPlaceCodeInDb = severalCodeInDb(ojBhColorPlaceList);
			order.setJkBtnholeColorPlcCd(ojBhColorPlaceCodeInDb);

			String ojBhColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor1();
			String ojBhColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor2();
			String ojBhColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor3();
			String ojBhColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor4();
			String ojBhColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor5();
			String ojBhColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor6();
			String ojBhColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor7();
			String ojBhColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor8();
			String ojBhColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor9();
			String ojBhColor10 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor10();
			String ojBhColor11 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor11();
			String ojBhColor12 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor12();
			String ojBhColor13 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor13();
			String ojBhColor14 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor14();
			String ojBhColor15 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor15();
			String ojBhColor16 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor16();
			String ojBhColor17 = orderCoForm.getCoOptionJacketStandardInfo().getOjBhColor17();

			List<String> ojBhColorsList = new ArrayList<>();
			ojBhColorsList.add(ojBhColor1);
			ojBhColorsList.add(ojBhColor2);
			ojBhColorsList.add(ojBhColor3);
			ojBhColorsList.add(ojBhColor4);
			ojBhColorsList.add(ojBhColor5);
			ojBhColorsList.add(ojBhColor6);
			ojBhColorsList.add(ojBhColor7);
			ojBhColorsList.add(ojBhColor8);
			ojBhColorsList.add(ojBhColor9);
			ojBhColorsList.add(ojBhColor10);
			ojBhColorsList.add(ojBhColor11);
			ojBhColorsList.add(ojBhColor12);
			ojBhColorsList.add(ojBhColor13);
			ojBhColorsList.add(ojBhColor14);
			ojBhColorsList.add(ojBhColor15);
			ojBhColorsList.add(ojBhColor16);
			ojBhColorsList.add(ojBhColor17);
			// JACKET_ボタンホール色指定_色コード
			String ojBhColorsCodeInDb = severalColorCodeInDb(ojBhColorPlaceList,ojBhColorsList);
			order.setJkBtnholeColorCd(ojBhColorsCodeInDb);
		}
		else {
			// JACKET_ボタンホール色指定_箇所コード
			order.setJkBtnholeColorPlcCd(null);
			// JACKET_ボタンホール色指定_箇所名
			order.setJkBtnholeColorPlcN(null);
			// JACKET_ボタンホール色指定_色コード
			order.setJkBtnholeColorCd(null);
			// JACKET_ボタンホール色指定_色名
			order.setJkBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String ojByColor = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor();
		// ボタン付け糸指定:有り
		String ojByColorYes = "0003402";
		
		if(ojByColorYes.equals(ojByColor)) {
			// 標準JACKETのボタン付け糸指定
			String ojByColorPlace1 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace1();
			String ojByColorPlace2 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace2();
			String ojByColorPlace3 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace3();
			String ojByColorPlace4 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace4();
			String ojByColorPlace5 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace5();
			String ojByColorPlace6 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace6();
			String ojByColorPlace7 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace7();
			String ojByColorPlace8 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace8();
			String ojByColorPlace9 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace9();
			String ojByColorPlace10 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace10();
			String ojByColorPlace11 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace11();
			String ojByColorPlace12 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace12();
			String ojByColorPlace13 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace13();
			String ojByColorPlace14 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace14();
			String ojByColorPlace15 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace15();
			String ojByColorPlace16 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColorPlace16();

			List<String> ojByColorPlaceList = new ArrayList<>();
			ojByColorPlaceList.add(ojByColorPlace1);
			ojByColorPlaceList.add(ojByColorPlace2);
			ojByColorPlaceList.add(ojByColorPlace3);
			ojByColorPlaceList.add(ojByColorPlace4);
			ojByColorPlaceList.add(ojByColorPlace5);
			ojByColorPlaceList.add(ojByColorPlace6);
			ojByColorPlaceList.add(ojByColorPlace7);
			ojByColorPlaceList.add(ojByColorPlace8);
			ojByColorPlaceList.add(ojByColorPlace9);
			ojByColorPlaceList.add(ojByColorPlace10);
			ojByColorPlaceList.add(ojByColorPlace11);
			ojByColorPlaceList.add(ojByColorPlace12);
			ojByColorPlaceList.add(ojByColorPlace13);
			ojByColorPlaceList.add(ojByColorPlace14);
			ojByColorPlaceList.add(ojByColorPlace15);
			ojByColorPlaceList.add(ojByColorPlace16);
			// JACKET_ボタン付け糸指定_箇所コード
			String ojByColorPlaceCodeInDb = severalCodeInDb(ojByColorPlaceList);
			order.setJkBtnthreadColorPlcCd(ojByColorPlaceCodeInDb);

			String ojByColor1 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor1();
			String ojByColor2 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor2();
			String ojByColor3 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor3();
			String ojByColor4 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor4();
			String ojByColor5 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor5();
			String ojByColor6 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor6();
			String ojByColor7 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor7();
			String ojByColor8 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor8();
			String ojByColor9 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor9();
			String ojByColor10 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor10();
			String ojByColor11 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor11();
			String ojByColor12 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor12();
			String ojByColor13 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor13();
			String ojByColor14 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor14();
			String ojByColor15 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor15();
			String ojByColor16 = orderCoForm.getCoOptionJacketStandardInfo().getOjByColor16();

			List<String> ojByColorsList = new ArrayList<>();
			ojByColorsList.add(ojByColor1);
			ojByColorsList.add(ojByColor2);
			ojByColorsList.add(ojByColor3);
			ojByColorsList.add(ojByColor4);
			ojByColorsList.add(ojByColor5);
			ojByColorsList.add(ojByColor6);
			ojByColorsList.add(ojByColor7);
			ojByColorsList.add(ojByColor8);
			ojByColorsList.add(ojByColor9);
			ojByColorsList.add(ojByColor10);
			ojByColorsList.add(ojByColor11);
			ojByColorsList.add(ojByColor12);
			ojByColorsList.add(ojByColor13);
			ojByColorsList.add(ojByColor14);
			ojByColorsList.add(ojByColor15);
			ojByColorsList.add(ojByColor16);
			// JACKET_ボタン付け糸指定_色コード
			String ojByColorsCodeInDb = severalColorCodeInDb(ojByColorPlaceList,ojByColorsList);
			order.setJkBtnthreadColorCd(ojByColorsCodeInDb);
		}
		else {
			// JACKET_ボタン付け糸指定_箇所コード
			order.setJkBtnthreadColorPlcCd(null);
			// JACKET_ボタン付け糸指定_箇所名
			order.setJkBtnthreadColorPlcN(null);
			// JACKET_ボタン付け糸指定_色コード
			order.setJkBtnthreadColorCd(null);
			// JACKET_ボタン付け糸指定_色名
			order.setJkBtnthreadColorNm(null);
		}
		
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutGiletCheckBoxInDbOnlyCode(OrderCoForm orderCoForm, Order order) {

		// ステッチ箇所変更
		String ogStitchModify = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModify();
		// ステッチ箇所変更
		String ogStitchModifyYes = "0000602";
		
		if(ogStitchModifyYes.equals(ogStitchModify)) {
			// 標準GILETのステッチ箇所変更
			String ogStitchModifyPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace1();
			String ogStitchModifyPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace2();
			String ogStitchModifyPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgStitchModifyPlace3();

			List<String> ogStitchModifyPlaceList = new ArrayList<>();
			ogStitchModifyPlaceList.add(ogStitchModifyPlace1);
			ogStitchModifyPlaceList.add(ogStitchModifyPlace2);
			ogStitchModifyPlaceList.add(ogStitchModifyPlace3);
			// GILET_ステッチ箇所変更 _コード
			String ogStitchModifyPlaceCodeInDb = severalCodeInDb(ogStitchModifyPlaceList);
			order.setGlStitchPlcCd(ogStitchModifyPlaceCodeInDb);
		}
		else {
			// GILET_ステッチ箇所変更 _コード
			order.setGlStitchPlcCd(null);
			// GILET_ステッチ箇所変更 _名
			order.setGlStitchPlcNm(null);
		}
		
		// ダブルステッチ変更
		String ogDStitchModify = orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModify();
		// ダブルステッチ変更:有り
		String ogDStitchModifyYes = "0002602";
		
		if(ogDStitchModifyYes.equals(ogDStitchModify)) {
			// 標準GILETのダブルステッチ
			String ogDStitchModifyPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModifyPlace1();
			String ogDStitchModifyPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModifyPlace2();
			String ogDStitchModifyPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgDStitchModifyPlace3();

			List<String> ogDStitchModifyPlaceList = new ArrayList<>();
			ogDStitchModifyPlaceList.add(ogDStitchModifyPlace1);
			ogDStitchModifyPlaceList.add(ogDStitchModifyPlace2);
			ogDStitchModifyPlaceList.add(ogDStitchModifyPlace3);
			ogDStitchModifyPlaceList.removeAll(Collections.singleton(null));
			// GILET_ダブルステッチ変更_コード
			String ogDStitchModifyPlaceCodeInDb = severalCodeInDb(ogDStitchModifyPlaceList);
			order.setGlDblstitchPlcCd(ogDStitchModifyPlaceCodeInDb);
		}
		else {
			// GILET_ダブルステッチ変更_コード
			order.setGlDblstitchPlcCd(null);
			// GILET_ダブルステッチ変更_名
			order.setGlDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String ogAmfColor = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor();
		// AMF色指定
		String ogAmfColorYes = "0000802";
		
		if(ogAmfColorYes.equals(ogAmfColor)) {
			// 標準GILETのAMF色指定
			String ogAmfColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace1();
			String ogAmfColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace2();
			String ogAmfColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColorPlace3();

			List<String> ogAmfColorPlaceList = new ArrayList<>();
			ogAmfColorPlaceList.add(ogAmfColorPlace1);
			ogAmfColorPlaceList.add(ogAmfColorPlace2);
			ogAmfColorPlaceList.add(ogAmfColorPlace3);
			ogAmfColorPlaceList.removeAll(Collections.singleton(null));
			if (!ogAmfColorPlaceList.isEmpty()) {
				// GILET_AMF色指定_箇所コード
				String ogAmfColorPlaceCodeInDb = severalCodeInDb(ogAmfColorPlaceList);
				order.setGlAmfColorPlcCd(ogAmfColorPlaceCodeInDb);
			}

			String ogAmfColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor1();
			String ogAmfColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor2();
			String ogAmfColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgAmfColor3();
			List<String> ogAmfColorList = new ArrayList<>();
			ogAmfColorList.add(ogAmfColor1);
			ogAmfColorList.add(ogAmfColor2);
			ogAmfColorList.add(ogAmfColor3);
			// GILET_AMF色指定_色コード
			String ogAmfColorsCodeInDb = severalColorCodeInDb(ogAmfColorPlaceList,ogAmfColorList);
			order.setGlAmfColorCd(ogAmfColorsCodeInDb);
		}
		else {
			// GILET_AMF色指定_箇所コード
			order.setGlAmfColorPlcCd(null);
			// GILET_AMF色指定_箇所名
			order.setGlAmfColorPlcNm(null);
			// GILET_AMF色指定_色コード
			order.setGlAmfColorCd(null);
			// GILET_AMF色指定_色名
			order.setGlAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String ogBhColor = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor();
		// ボタンホール色指定:有り
		String ogBhColorYes = "0001102";
		
		if(ogBhColorYes.equals(ogBhColor)) {
			// 標準GILETのボタンホール色指定
			String ogBhColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace1();
			String ogBhColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace2();
			String ogBhColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace3();
			String ogBhColorPlace4 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace4();
			String ogBhColorPlace5 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace5();
			String ogBhColorPlace6 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColorPlace6();

			List<String> ogBhColorPlaceList = new ArrayList<>();
			ogBhColorPlaceList.add(ogBhColorPlace1);
			ogBhColorPlaceList.add(ogBhColorPlace2);
			ogBhColorPlaceList.add(ogBhColorPlace3);
			ogBhColorPlaceList.add(ogBhColorPlace4);
			ogBhColorPlaceList.add(ogBhColorPlace5);
			ogBhColorPlaceList.add(ogBhColorPlace6);
			// GILET_ボタンホール色指定_箇所コード
			String ogBhColorPlaceCodeInDb = severalCodeInDb(ogBhColorPlaceList);
			order.setGlBtnholeColorPlcCd(ogBhColorPlaceCodeInDb);

			String ogBhColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor1();
			String ogBhColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor2();
			String ogBhColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor3();
			String ogBhColor4 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor4();
			String ogBhColor5 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor5();
			String ogBhColor6 = orderCoForm.getCoOptionGiletStandardInfo().getOgBhColor6();

			List<String> ogBhColorsList = new ArrayList<>();
			ogBhColorsList.add(ogBhColor1);
			ogBhColorsList.add(ogBhColor2);
			ogBhColorsList.add(ogBhColor3);
			ogBhColorsList.add(ogBhColor4);
			ogBhColorsList.add(ogBhColor5);
			ogBhColorsList.add(ogBhColor6);
			ogBhColorsList.removeAll(Collections.singleton(null));
			// GILET_ボタンホール色指定_色コード
			String ogBhColorsCodeInDb = severalColorCodeInDb(ogBhColorPlaceList,ogBhColorsList);
			order.setGlBtnholeColorCd(ogBhColorsCodeInDb);
		}
		else {
			// GILET_ボタンホール色指定_箇所コード
			order.setGlBtnholeColorPlcCd(null);
			// GILET_ボタンホール色指定_箇所名
			order.setGlBtnholeColorPlcNm(null);
			// GILET_ボタンホール色指定_色コード
			order.setGlBtnholeColorCd(null);
			// GILET_ボタンホール色指定_色名
			order.setGlBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String ogByColor = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor();
		// ボタン付け糸指定:有り
		String ogByColorYes = "0001402";

		if(ogByColorYes.equals(ogByColor)) {
			// 標準GILETのボタン付け糸指定
			String ogByColorPlace1 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace1();
			String ogByColorPlace2 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace2();
			String ogByColorPlace3 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace3();
			String ogByColorPlace4 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace4();
			String ogByColorPlace5 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace5();
			String ogByColorPlace6 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace6();
			String ogByColorPlace7 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace7();
			String ogByColorPlace8 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace8();
			String ogByColorPlace9 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace9();
			String ogByColorPlace10 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColorPlace10();

			List<String> ogByColorPlaceList = new ArrayList<>();
			ogByColorPlaceList.add(ogByColorPlace1);
			ogByColorPlaceList.add(ogByColorPlace2);
			ogByColorPlaceList.add(ogByColorPlace3);
			ogByColorPlaceList.add(ogByColorPlace4);
			ogByColorPlaceList.add(ogByColorPlace5);
			ogByColorPlaceList.add(ogByColorPlace6);
			ogByColorPlaceList.add(ogByColorPlace7);
			ogByColorPlaceList.add(ogByColorPlace8);
			ogByColorPlaceList.add(ogByColorPlace9);
			ogByColorPlaceList.add(ogByColorPlace10);
			// GILET_ボタン付け糸指定_箇所コード
			String ogByColorPlaceCodeInDb = severalCodeInDb(ogByColorPlaceList);
			order.setGlBtnthreadColorPlcCd(ogByColorPlaceCodeInDb);

			String ogByColor1 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor1();
			String ogByColor2 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor2();
			String ogByColor3 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor3();
			String ogByColor4 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor4();
			String ogByColor5 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor5();
			String ogByColor6 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor6();
			String ogByColor7 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor7();
			String ogByColor8 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor8();
			String ogByColor9 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor9();
			String ogByColor10 = orderCoForm.getCoOptionGiletStandardInfo().getOgByColor10();

			List<String> ogByColorsList = new ArrayList<>();
			ogByColorsList.add(ogByColor1);
			ogByColorsList.add(ogByColor2);
			ogByColorsList.add(ogByColor3);
			ogByColorsList.add(ogByColor4);
			ogByColorsList.add(ogByColor5);
			ogByColorsList.add(ogByColor6);
			ogByColorsList.add(ogByColor7);
			ogByColorsList.add(ogByColor8);
			ogByColorsList.add(ogByColor9);
			ogByColorsList.add(ogByColor10);
			// GILET_ボタン付け糸指定_色コード
			String ogByColorsCodeInDb = severalColorCodeInDb(ogByColorPlaceList,ogByColorsList);
			order.setGlBtnthreadColorCd(ogByColorsCodeInDb);
		}
		else {
			// GILET_ボタン付け糸指定_箇所コード
			order.setGlBtnthreadColorPlcCd(null);
			// GILET_ボタン付け糸指定_箇所名
			order.setGlBtnthreadColorPlcNm(null);
			// GILET_ボタン付け糸指定_色コード
			order.setGlBtnthreadColorCd(null);
			// GILET_ボタン付け糸指定_色名
			order.setGlBtnthreadColorNm(null);
		}
		
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutPantsCheckBoxInDbOnlyCode(OrderCoForm orderCoForm, Order order) {
		
		// ベルトループ
		String opBeltLoop = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoop();
		// ベルトループ:有り
		String opBeltLoopYes = "0000701";
		
		if(opBeltLoopYes.equals(opBeltLoop)) {
			// 標準PANTSのベルトループ
			String opBeltLoopPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace1();
			String opBeltLoopPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace2();
			String opBeltLoopPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace3();
			String opBeltLoopPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace4();
			String opBeltLoopPlace5 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace5();
			String opBeltLoopPlace6 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace6();
			String opBeltLoopPlace7 = orderCoForm.getCoOptionPantsStandardInfo().getOpBeltLoopPlace7();
			List<String> opBeltLoopPlaceList = new ArrayList<>();
			opBeltLoopPlaceList.add(opBeltLoopPlace1);
			opBeltLoopPlaceList.add(opBeltLoopPlace2);
			opBeltLoopPlaceList.add(opBeltLoopPlace3);
			opBeltLoopPlaceList.add(opBeltLoopPlace4);
			opBeltLoopPlaceList.add(opBeltLoopPlace5);
			opBeltLoopPlaceList.add(opBeltLoopPlace6);
			opBeltLoopPlaceList.add(opBeltLoopPlace7);
			// PANTS_ベルトループ_コード
			String opBeltLoopPlaceCodeInDb = severalCodeInDb(opBeltLoopPlaceList);
			order.setPtBeltloopCd(opBeltLoopPlaceCodeInDb);
		}
		else {
			// PANTS_ベルトループ_コード
			order.setPtBeltloopCd(null);
			// PANTS_ベルトループ_名
			order.setPtBeltloopNm(null);
		}
		
		// ステッチ箇所変更
		String opStitchModify = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModify();
		// ステッチ箇所変更:有り
		String opStitchModifyYes = "0002002";
		
		if(opStitchModifyYes.equals(opStitchModify)) {
			// 標準PANTSのステッチ箇所変更
			String opStitchModifyPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace1();
			String opStitchModifyPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace2();
			String opStitchModifyPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace3();
			String opStitchModifyPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpStitchModifyPlace4();
			List<String> opStitchModifyPlaceList = new ArrayList<>();
			opStitchModifyPlaceList.add(opStitchModifyPlace1);
			opStitchModifyPlaceList.add(opStitchModifyPlace2);
			opStitchModifyPlaceList.add(opStitchModifyPlace3);
			opStitchModifyPlaceList.add(opStitchModifyPlace4);
			// PANTS_ステッチ箇所変更_コード
			String opStitchModifyPlaceCodeInDb = severalCodeInDb(opStitchModifyPlaceList);
			order.setPtStitchPlcCd(opStitchModifyPlaceCodeInDb);
		}
		else {
			// PANTS_ステッチ箇所変更_コード
			order.setPtStitchPlcCd(null);
			// PANTS_ステッチ箇所変更_名
			order.setPtStitchPlcNm(null);
		}
		
		// ダブルステッチ
		String opDStitch = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitch();
		// ダブルステッチ:有り
		String opDStitchYes = "0002202";

		if(opDStitchYes.equals(opDStitch)) {
			// 標準PANTSのダブルステッチ
			String opDStitchPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchPlace1();
			String opDStitchPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchPlace2();
			String opDStitchPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchPlace3();
			String opDStitchPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpDStitchPlace4();
			List<String> opDStitchPlaceList = new ArrayList<>();
			opDStitchPlaceList.add(opDStitchPlace1);
			opDStitchPlaceList.add(opDStitchPlace2);
			opDStitchPlaceList.add(opDStitchPlace3);
			opDStitchPlaceList.add(opDStitchPlace4);
			// PANTS_ダブルステッチ_コード
			String opDStitchPlaceCodeInDb = severalCodeInDb(opDStitchPlaceList);
			order.setPtDblstitchPlcCd(opDStitchPlaceCodeInDb);
		}
		else {
			// PANTS_ダブルステッチ_コード
			order.setPtDblstitchPlcCd(null);
			// PANTS_ダブルステッチ_名
			order.setPtDblstitchPlcNm(null);
		}
		
		// AMF色指定
		String opAmfColor = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor();
		// AMF色指定:有り
		String opAmfColorYes = "0002402";
		
		if(opAmfColorYes.equals(opAmfColor)) {
			// 標準PANTSのAMF色指定
			String opAmfColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace1();
			String opAmfColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace2();
			String opAmfColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace3();
			String opAmfColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColorPlace4();
			List<String> opAmfColorPlaceList = new ArrayList<>();
			opAmfColorPlaceList.add(opAmfColorPlace1);
			opAmfColorPlaceList.add(opAmfColorPlace2);
			opAmfColorPlaceList.add(opAmfColorPlace3);
			opAmfColorPlaceList.add(opAmfColorPlace4);
			// PANTS_AMF色指定_箇所コード
			String opAmfColorPlaceCodeInDb = severalCodeInDb(opAmfColorPlaceList);
			order.setPtAmfColorPlcCd(opAmfColorPlaceCodeInDb);

			String opAmfColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor1();
			String opAmfColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor2();
			String opAmfColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor3();
			String opAmfColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpAmfColor4();
			List<String> opAmfColorsList = new ArrayList<>();
			opAmfColorsList.add(opAmfColor1);
			opAmfColorsList.add(opAmfColor2);
			opAmfColorsList.add(opAmfColor3);
			opAmfColorsList.add(opAmfColor4);
			// PANTS_AMF色指定_色コード
			String opAmfColorsCodeInDb = severalColorCodeInDb(opAmfColorPlaceList,opAmfColorsList);
			order.setPtAmfColorCd(opAmfColorsCodeInDb);
		}
		else {
			// PANTS_AMF色指定_箇所コード
			order.setPtAmfColorPlcCd(null);
			// PANTS_AMF色指定_箇所名
			order.setPtAmfColorPlcNm(null);
			// PANTS_AMF色指定_色コード
			order.setPtAmfColorCd(null);
			// PANTS_AMF色指定_色名
			order.setPtAmfColorNm(null);
		}
		
		// ボタンホール色指定
		String opBhColor = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor();
		// ボタンホール色指定:有り
		String opBhColorYes = "0002702";
		if(opBhColorYes.equals(opBhColor)) {
			// 標準PANTSのボタンホール色指定
			String opBhColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace1();
			String opBhColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace2();
			String opBhColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace3();
			String opBhColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColorPlace4();
			List<String> opBhColorPlaceList = new ArrayList<>();
			opBhColorPlaceList.add(opBhColorPlace1);
			opBhColorPlaceList.add(opBhColorPlace2);
			opBhColorPlaceList.add(opBhColorPlace3);
			opBhColorPlaceList.add(opBhColorPlace4);
			// PANTS_ボタンホール色指定_箇所コード
			String opBhColorPlaceCodeInDb = severalCodeInDb(opBhColorPlaceList);
			order.setPtBtnholeColorPlcCd(opBhColorPlaceCodeInDb);

			String opBhColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor1();
			String opBhColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor2();
			String opBhColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor3();
			String opBhColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpBhColor4();
			List<String> opBhColorsList = new ArrayList<>();
			opBhColorsList.add(opBhColor1);
			opBhColorsList.add(opBhColor2);
			opBhColorsList.add(opBhColor3);
			opBhColorsList.add(opBhColor4);
			// PANTS_ボタンホール色指定_色コード
			String opBhColorsCodeInDb = severalColorCodeInDb(opBhColorPlaceList,opBhColorsList);
			order.setPtBtnholeColorCd(opBhColorsCodeInDb);
		}
		else {
			// PANTS_ボタンホール色指定_箇所コード
			order.setPtBtnholeColorPlcCd(null);
			// PANTS_ボタンホール色指定_箇所名
			order.setPtBtnholeColorPlcNm(null);
			// PANTS_ボタンホール色指定_色コード
			order.setPtBtnholeColorCd(null);
			// PANTS_ボタンホール色指定_色名
			order.setPtBtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String opByColor = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor();
		// ボタン付け糸指定:有り
		String opByColorYes = "0003002";

		if(opByColorYes.equals(opByColor)) {
			// 標準PANTSのボタン付け糸指定
			String opByColorPlace1 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace1();
			String opByColorPlace2 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace2();
			String opByColorPlace3 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace3();
			String opByColorPlace4 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColorPlace4();
			List<String> opByColorPlaceList = new ArrayList<>();
			opByColorPlaceList.add(opByColorPlace1);
			opByColorPlaceList.add(opByColorPlace2);
			opByColorPlaceList.add(opByColorPlace3);
			opByColorPlaceList.add(opByColorPlace4);
			// PANTS_ボタン付け糸指定_箇所コード
			String opByColorPlaceCodeInDb = severalCodeInDb(opByColorPlaceList);
			order.setPtBtnthreadColorPlcNm(opByColorPlaceCodeInDb);

			String opByColor1 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor1();
			String opByColor2 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor2();
			String opByColor3 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor3();
			String opByColor4 = orderCoForm.getCoOptionPantsStandardInfo().getOpByColor4();
			List<String> opByColorsList = new ArrayList<>();
			opByColorsList.add(opByColor1);
			opByColorsList.add(opByColor2);
			opByColorsList.add(opByColor3);
			opByColorsList.add(opByColor4);
			// PANTS_ボタン付け糸指定_色コード
			String opByColorsCodeInDb = severalColorCodeInDb(opByColorPlaceList,opByColorsList);
			order.setPtBtnthreadColorCd(opByColorsCodeInDb);
		}
		else {
			// PANTS_ボタン付け糸指定_箇所コード
			order.setPtBtnthreadColorPlcNm(null);
			// PANTS_ボタン付け糸指定_箇所名
			order.setPtBtnthreadColorPlcNm(null);
			// PANTS_ボタン付け糸指定_色コード
			order.setPtBtnthreadColorCd(null);
			// PANTS_ボタン付け糸指定_色名
			order.setPtBtnthreadColorNm(null);
		}
		
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void aboutPants2CheckBoxInDbOnlyCode(OrderCoForm orderCoForm, Order order) {
		
		// ベルトループ
		String op2BeltLoop = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoop();
		// ベルトループ:有り
		String op2BeltLoopYes = "0000701";
		
		if(op2BeltLoopYes.equals(op2BeltLoop)) {
			// 標準2PANTSのベルトループ
			String op2BeltLoopPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace1();
			String op2BeltLoopPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace2();
			String op2BeltLoopPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace3();
			String op2BeltLoopPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BeltLoopPlace4();
			List<String> op2BeltLoopPlaceList = new ArrayList<>();
			op2BeltLoopPlaceList.add(op2BeltLoopPlace1);
			op2BeltLoopPlaceList.add(op2BeltLoopPlace2);
			op2BeltLoopPlaceList.add(op2BeltLoopPlace3);
			op2BeltLoopPlaceList.add(op2BeltLoopPlace4);
			// 2PANTS_ベルトループ_コード
			String op2BeltLoopPlaceCodeInDb = severalCodeInDb(op2BeltLoopPlaceList);
			order.setPt2BeltloopCd(op2BeltLoopPlaceCodeInDb);
		}
		else {
			// 2PANTS_ベルトループ_コード
			order.setPt2BeltloopCd(null);
			// 2PANTS_ベルトループ_名
			order.setPt2BeltloopNm(null);
		}
		
		// ステッチ箇所変更
		String op2StitchModify = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModify();
		// ステッチ箇所変更:有り
		String op2StitchModifyYes = "0002002";
		
		if(op2StitchModifyYes.equals(op2StitchModify)) {
			// 標準2PANTSのステッチ箇所変更
			String op2StitchModifyPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace1();
			String op2StitchModifyPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace2();
			String op2StitchModifyPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace3();
			String op2StitchModifyPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchModifyPlace4();
			List<String> op2StitchModifyPlaceList = new ArrayList<>();
			op2StitchModifyPlaceList.add(op2StitchModifyPlace1);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace2);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace3);
			op2StitchModifyPlaceList.add(op2StitchModifyPlace4);
			op2StitchModifyPlaceList.removeAll(Collections.singleton(null));
			// 2PANTS_ステッチ箇所変更_コード
			String op2StitchModifyPlaceCodeInDb = severalCodeInDb(op2StitchModifyPlaceList);
			order.setPt2StitchPlcCd(op2StitchModifyPlaceCodeInDb);
		}
		else {
			// 2PANTS_ステッチ箇所変更_コード
			order.setPt2StitchPlcCd(null);
			// 2PANTS_ステッチ箇所変更_名
			order.setPt2StitchPlcNm(null);
		}
		
		// ダブルステッチ
		String op2dStitch = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitch();
		// ダブルステッチ:有り
		String op2dStitchYes = "0002202";
		
		if(op2dStitchYes.equals(op2dStitch)) {
			// 標準2PANTSのダブルステッチ
			String op2dStitchPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitchPlace1();
			String op2dStitchPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitchPlace2();
			String op2dStitchPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitchPlace3();
			String op2dStitchPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2DStitchPlace4();
			List<String> p2dStitchPlaceList = new ArrayList<>();
			p2dStitchPlaceList.add(op2dStitchPlace1);
			p2dStitchPlaceList.add(op2dStitchPlace2);
			p2dStitchPlaceList.add(op2dStitchPlace3);
			p2dStitchPlaceList.add(op2dStitchPlace4);
			p2dStitchPlaceList.removeAll(Collections.singleton(null));
			// 2PANTS_ダブルステッチ_コード
			String p2dStitchPlaceCodeInDb = severalCodeInDb(p2dStitchPlaceList);
			order.setPt2DblstitchPlcCd(p2dStitchPlaceCodeInDb);
		}
		else {
			// 2PANTS_ダブルステッチ_コード
			order.setPt2DblstitchPlcCd(null);
			// 2PANTS_ダブルステッチ_名
			order.setPt2DblstitchPlcNm(null);
		}

		// AMF色指定 
		 String op2AmfColor = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor();
		// AMF色指定 :有り
		 String op2AmfColorYes = "0002402";
		 
		 if(op2AmfColorYes.equals(op2AmfColor)) {
			// 標準2PANTSのAMF色指定
				String op2AmfColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace1();
				String op2AmfColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace2();
				String op2AmfColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace3();
				String op2AmfColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColorPlace4();
				List<String> op2AmfColorPlaceList = new ArrayList<>();
				op2AmfColorPlaceList.add(op2AmfColorPlace1);
				op2AmfColorPlaceList.add(op2AmfColorPlace2);
				op2AmfColorPlaceList.add(op2AmfColorPlace3);
				op2AmfColorPlaceList.add(op2AmfColorPlace4);
				op2AmfColorPlaceList.removeAll(Collections.singleton(null));
				// 2PANTS_AMF色指定_箇所コード
				String op2AmfColorPlaceCodeInDb = severalCodeInDb(op2AmfColorPlaceList);
				order.setPt2AmfColorPlcCd(op2AmfColorPlaceCodeInDb);

				String op2AmfColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor1();
				String op2AmfColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor2();
				String op2AmfColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor3();
				String op2AmfColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2AmfColor4();
				List<String> op2AmfColorsList = new ArrayList<>();
				op2AmfColorsList.add(op2AmfColor1);
				op2AmfColorsList.add(op2AmfColor2);
				op2AmfColorsList.add(op2AmfColor3);
				op2AmfColorsList.add(op2AmfColor4);
				// 2PANTS_AMF色指定_色コード
				String op2AmfColorsCodeInDb = severalColorCodeInDb(op2AmfColorPlaceList,op2AmfColorsList);
				order.setPt2AmfColorCd(op2AmfColorsCodeInDb);
		 }
		 else {
			// 2PANTS_AMF色指定_箇所コード
				order.setPt2AmfColorPlcCd(null);
				// 2PANTS_AMF色指定_箇所名
				order.setPt2AmfColorPlcCd(null);
				// 2PANTS_AMF色指定_色コード
				order.setPt2AmfColorCd(null);
				// 2PANTS_AMF色指定_色名
				order.setPt2AmfColorNm(null);
		 }
		
		// ボタンホール色指定
		String op2BhColor = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor();
		// ボタンホール色指定:有り
		String op2BhColorYes = "0002702";
		
		if(op2BhColorYes.equals(op2BhColor)) {
			// 標準2PANTSのボタンホール色指定
			String op2BhColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace1();
			String op2BhColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace2();
			String op2BhColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace3();
			String op2BhColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColorPlace4();
			List<String> op2BhColorPlaceList = new ArrayList<>();
			op2BhColorPlaceList.add(op2BhColorPlace1);
			op2BhColorPlaceList.add(op2BhColorPlace2);
			op2BhColorPlaceList.add(op2BhColorPlace3);
			op2BhColorPlaceList.add(op2BhColorPlace4);
			// 2PANTS_ボタンホール色指定_箇所コード
			String op2BhColorPlaceCodeInDb = severalCodeInDb(op2BhColorPlaceList);
			order.setPt2BtnholeColorPlcCd(op2BhColorPlaceCodeInDb);

			String op2BhColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor1();
			String op2BhColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor2();
			String op2BhColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor3();
			String op2BhColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2BhColor4();
			List<String> op2BhColorsList = new ArrayList<>();
			op2BhColorsList.add(op2BhColor1);
			op2BhColorsList.add(op2BhColor2);
			op2BhColorsList.add(op2BhColor3);
			op2BhColorsList.add(op2BhColor4);
			// 2PANTS_ボタンホール色指定_色コード
			String op2BhColorsCodeInDb = severalColorCodeInDb(op2BhColorPlaceList,op2BhColorsList);
			order.setPt2BtnholeColorCd(op2BhColorsCodeInDb);
		}
		else {
			// 2PANTS_ボタンホール色指定_箇所コード
			order.setPt2BtnholeColorPlcCd(null);
			// 2PANTS_ボタンホール色指定_箇所名
			order.setPt2BtnholeColorPlcNm(null);
			// 2PANTS_ボタンホール色指定_色コード
			order.setPt2BtnholeColorCd(null);
			// 2PANTS_ボタンホール色指定_色名
			order.setPt2BtnholeColorNm(null);
		}
		
		// ボタン付け糸指定
		String op2ByColor = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor();
		// ボタン付け糸指定:有り
		String op2ByColorYes = "0003002";

		if(op2ByColorYes.equals(op2ByColor)) {
			// 標準2PANTSのボタン付け糸指定
			String op2ByColorPlace1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace1();
			String op2ByColorPlace2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace2();
			String op2ByColorPlace3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace3();
			String op2ByColorPlace4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColorPlace4();
			List<String> op2ByColorPlaceList = new ArrayList<>();
			op2ByColorPlaceList.add(op2ByColorPlace1);
			op2ByColorPlaceList.add(op2ByColorPlace2);
			op2ByColorPlaceList.add(op2ByColorPlace3);
			op2ByColorPlaceList.add(op2ByColorPlace4);
			// 2PANTS_ボタン付け糸指定_箇所コード
			String op2ByColorPlaceCodeInDb = severalCodeInDb(op2ByColorPlaceList);
			order.setPt2BtnthreadColorPlcCd(op2ByColorPlaceCodeInDb);

			String op2ByColor1 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor1();
			String op2ByColor2 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor2();
			String op2ByColor3 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor3();
			String op2ByColor4 = orderCoForm.getCoOptionPants2StandardInfo().getOp2ByColor4();
			List<String> op2ByColorsList = new ArrayList<>();
			op2ByColorsList.add(op2ByColor1);
			op2ByColorsList.add(op2ByColor2);
			op2ByColorsList.add(op2ByColor3);
			op2ByColorsList.add(op2ByColor4);
			// 2PANTS_ボタン付け糸指定_色コード
			String op2ByColorsCodeInDb = severalColorCodeInDb(op2ByColorPlaceList,op2ByColorsList);
			order.setPt2BtnthreadColorCd(op2ByColorsCodeInDb);
		}
		else {
			// 2PANTS_ボタン付け糸指定_箇所コード
			order.setPt2BtnthreadColorPlcCd(null);
			// 2PANTS_ボタン付け糸指定_箇所名
			order.setPt2BtnthreadColorPlcNm(null);
			// 2PANTS_ボタン付け糸指定_色コード
			order.setPt2BtnthreadColorCd(null);
			// 2PANTS_ボタン付け糸指定_色名
			order.setPt2BtnthreadColorNm(null);
		}

	}
	
	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param jacketUpperPrice
	 */
	public void standardJacketUpperPriceInDb(OrderCoForm orderCoForm, Order order,
			Map<String, String> jacketUpperPrice) {
		JacketCoOptionStandardUpperPriceEnum[] jacketCoOptionStandardUpperPriceEnum = JacketCoOptionStandardUpperPriceEnum
				.values();
		for (JacketCoOptionStandardUpperPriceEnum jacketCoOptionStandardUpperPrice : jacketCoOptionStandardUpperPriceEnum) {
			String keyValue = jacketCoOptionStandardUpperPrice.getValueThree();
			String valueFour = jacketCoOptionStandardUpperPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodT = getMethod(cls, valueFour);
				String jacketUpperPriceValue = deteleSomeSysmbol(jacketUpperPrice.get(keyValue));
				int jacketUpperPriceParseInt = 0;
				if (!"無料".equals(jacketUpperPriceValue)) {
					jacketUpperPriceParseInt = Integer.parseInt(jacketUpperPriceValue);
				}
				Object[] argsDetailValue = { jacketUpperPriceParseInt };
				if (myMethodT != null) {
					ReflectionUtils.invoke(myMethodT, order, argsDetailValue);
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param giletUpperPrice
	 */
	public void standardGiletUpperPriceInDb(OrderCoForm orderCoForm, Order order, Map<String, String> giletUpperPrice) {
		GiletCoOptionStandardNextUpperPriceEnum[] giletCoOptionStandardNextUpperPriceEnum = GiletCoOptionStandardNextUpperPriceEnum
				.values();
		for (GiletCoOptionStandardNextUpperPriceEnum giletCoOptionStandardNextUpperPrice : giletCoOptionStandardNextUpperPriceEnum) {
			String keyValue = giletCoOptionStandardNextUpperPrice.getValueThree();
			String valueFour = giletCoOptionStandardNextUpperPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodT = getMethod(cls, valueFour);
				String giletUpperPriceValue = deteleSomeSysmbol(giletUpperPrice.get(keyValue));
				int giletUpperPriceParseInt = 0;
				if (!"無料".equals(giletUpperPriceValue)) {
					giletUpperPriceParseInt = Integer.parseInt(giletUpperPriceValue);
				}
				Object[] argsDetailValue = { giletUpperPriceParseInt };
				if (myMethodT != null) {
					ReflectionUtils.invoke(myMethodT, order, argsDetailValue);
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param pantsUpperPrice
	 */
	public void standardPants2UpperPriceInDb(OrderCoForm orderCoForm, Order order,
			Map<String, String> pants2UpperPrice) {
		Pants2CoOptionStandardUpperPriceEnum[] pants2CoOptionStandardUpperPriceEnum = Pants2CoOptionStandardUpperPriceEnum
				.values();
		for (Pants2CoOptionStandardUpperPriceEnum pants2CoOptionStandardUpperPrice : pants2CoOptionStandardUpperPriceEnum) {
			String keyValue = pants2CoOptionStandardUpperPrice.getValueThree();
			String valueFour = pants2CoOptionStandardUpperPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodT = getMethod(cls, valueFour);
				String pants2UpperPriceValue = deteleSomeSysmbol(pants2UpperPrice.get(keyValue));
				int pants2UpperPriceParseInt = 0;
				if (!"無料".equals(pants2UpperPriceValue)) {
					pants2UpperPriceParseInt = Integer.parseInt(pants2UpperPriceValue);
				}
				Object[] argsDetailValue = { pants2UpperPriceParseInt };
				if (myMethodT != null) {
					ReflectionUtils.invoke(myMethodT, order, argsDetailValue);
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param pantsUpperPrice
	 */
	public void standardPantsUpperPriceInDb(OrderCoForm orderCoForm, Order order, Map<String, String> pantsUpperPrice) {
		PantsCoOptionStandardUpperPriceEnum[] pantsCoOptionStandardUpperPriceEnum = PantsCoOptionStandardUpperPriceEnum
				.values();
		for (PantsCoOptionStandardUpperPriceEnum pantsCoOptionStandardUpperPrice : pantsCoOptionStandardUpperPriceEnum) {
			String keyValue = pantsCoOptionStandardUpperPrice.getValueThree();
			String valueFour = pantsCoOptionStandardUpperPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodT = getMethod(cls, valueFour);
				String pantsUpperPriceValue = deteleSomeSysmbol(pantsUpperPrice.get(keyValue));
				int pantsUpperPriceParseInt = 0;
				if (!"無料".equals(pantsUpperPriceValue)) {
					pantsUpperPriceParseInt = Integer.parseInt(pantsUpperPriceValue);
				}
				Object[] argsDetailValue = { pantsUpperPriceParseInt };
				if (myMethodT != null) {
					ReflectionUtils.invoke(myMethodT, order, argsDetailValue);
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param shirtUpperPrice
	 */
	public void standardShirtUpperPriceInDb(OrderCoForm orderCoForm, Order order, Map<String, String> shirtUpperPrice) {
		ShirtCoOptionStandardUpperPriceEnum[] shirtCoOptionStandardUpperPriceEnum = ShirtCoOptionStandardUpperPriceEnum
				.values();
		for (ShirtCoOptionStandardUpperPriceEnum shirtCoOptionStandardUpperPrice : shirtCoOptionStandardUpperPriceEnum) {
			String keyValue = shirtCoOptionStandardUpperPrice.getValueTwo();
			String valueThree = shirtCoOptionStandardUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodT = getMethod(cls, valueThree);
				String shirtUpperPriceValue = deteleSomeSysmbol(shirtUpperPrice.get(keyValue));
				int shirtUpperPriceParseInt = 0;
				if (!"無料".equals(shirtUpperPriceValue)) {
					shirtUpperPriceParseInt = Integer.parseInt(shirtUpperPriceValue);
				}
				Object[] argsDetailValue = { shirtUpperPriceParseInt };
				if (myMethodT != null) {
					ReflectionUtils.invoke(myMethodT, order, argsDetailValue);
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}

	/**
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param coatUpperPrice
	 */
	public void standardCoatUpperPriceInDb(OrderCoForm orderCoForm, Order order, Map<String, String> coatUpperPrice) {
		CoatCoOptionStandardUpperPriceEnum[] coatCoOptionStandardUpperPriceEnum = CoatCoOptionStandardUpperPriceEnum
				.values();
		for (CoatCoOptionStandardUpperPriceEnum coatCoOptionStandardUpperPrice : coatCoOptionStandardUpperPriceEnum) {
			String keyValue = coatCoOptionStandardUpperPrice.getValueThree();
			String valueFour = coatCoOptionStandardUpperPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
				Method myMethodT = getMethod(cls, valueFour);
				String coatUpperPriceValue = deteleSomeSysmbol(coatUpperPrice.get(keyValue));
				int coatUpperPriceParseInt = 0;
				if (!"無料".equals(coatUpperPriceValue)) {
					coatUpperPriceParseInt = Integer.parseInt(coatUpperPriceValue);
				}
				Object[] argsDetailValue = { coatUpperPriceParseInt };
				if (myMethodT != null) {
					ReflectionUtils.invoke(myMethodT, order, argsDetailValue);
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}

	/**
	 * オーダー内容確認画面標準のSHIRT上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> standardShirtUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// SHIRTのsubItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_SHIRTS.getKey();
		// SHIRTのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionShirtStandardInfo().getOsShirtModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionShirtStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_SHIRTS.getValue();

		Map<String, String> shirtUpperPriceMap = new HashMap<String, String>();

		ShirtCoOptionStandardUpperPriceEnum[] shirtCoOptionStandardUpperPriceEnum = ShirtCoOptionStandardUpperPriceEnum
				.values();

		for (ShirtCoOptionStandardUpperPriceEnum shirtCoOptionStandardUpperPrice : shirtCoOptionStandardUpperPriceEnum) {
			String optionCode = shirtCoOptionStandardUpperPrice.getKey();
			String optionBranchCode = shirtCoOptionStandardUpperPrice.getValueOne();
			String mapOfKey = shirtCoOptionStandardUpperPrice.getValueTwo();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionShirtStandardInfo(), args);
				}

				String priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
							shirtUpperPriceMap.put(mapOfKey, "無料");
						} else {
							shirtUpperPriceMap.put(mapOfKey, "￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
						}
						break;
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return shirtUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面タキシードのjacket上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> tuxedoJacketUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {

		Map<String, String> tuxedoJacketUpperPriceMap = new HashMap<String, String>();

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// JACKETのsubItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_JACKET.getKey();
		// JACKETのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionJacketTuxedoInfo().getTjJacketModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionJacketStandardInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_JACKET.getValue();
		// フロント釦数
		String tjFrontBtnCnt = orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt();
		// 0000105(ダブル6つボタン)
		String tjFrontBtnCntdoubleSixButton = "0000105";
		// 0000106(ダブル4つボタン)
		String tjFrontBtnCntdoubleFourButton = "0000106";

		JacketCoOptionTuxedoUpperPriceEnum[] jacketCoOptionTuxedoUpperPriceEnum = JacketCoOptionTuxedoUpperPriceEnum
				.values();

		for (JacketCoOptionTuxedoUpperPriceEnum jacketCoOptionTuxedoUpperPrice : jacketCoOptionTuxedoUpperPriceEnum) {
			String optionCode = jacketCoOptionTuxedoUpperPrice.getKey();
			String optionBranchCode = jacketCoOptionTuxedoUpperPrice.getValueOne();
			String optionBranchDetailCode = jacketCoOptionTuxedoUpperPrice.getValueTwo();
			String mapOfKey = jacketCoOptionTuxedoUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketTuxedoInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionJacketTuxedoInfo(), argsT);
				}

				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}
				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (tjFrontBtnCntdoubleSixButton.equals(tjFrontBtnCnt)
							|| tjFrontBtnCntdoubleFourButton.equals(tjFrontBtnCnt)) {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDoublePrice())) {
								tuxedoJacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								tuxedoJacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDoublePrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailDoublePrice())) {
								tuxedoJacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								tuxedoJacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailDoublePrice()));
							}
							break;
						}
					} else {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
								tuxedoJacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								tuxedoJacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
								tuxedoJacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								tuxedoJacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
							}
							break;
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return tuxedoJacketUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面タキシードのGILET上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> tuxedoGiletUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// GILETのsubItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_GILET.getKey();
		// GILETのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletStandardInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_GILET.getValue();
		// GILETモデル
		String tgGiletModel = orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModelMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel());
		// BS01-D
		String bs01dModel = "BS01-D";
		// ET15-D
		String et15dModel = "ET15-D";

		Map<String, String> tuxedoGiletUpperPriceMap = new HashMap<String, String>();

		GiletCoOptionTuxedoUpperPriceEnum[] giletCoOptionTuxedoUpperPriceEnum = GiletCoOptionTuxedoUpperPriceEnum
				.values();

		for (GiletCoOptionTuxedoUpperPriceEnum giletCoOptionTuxedoUpperPrice : giletCoOptionTuxedoUpperPriceEnum) {
			String optionCode = giletCoOptionTuxedoUpperPrice.getKey();
			String optionBranchCode = giletCoOptionTuxedoUpperPrice.getValueOne();
			String optionBranchDetailCode = giletCoOptionTuxedoUpperPrice.getValueTwo();
			String mapOfKey = giletCoOptionTuxedoUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletTuxedoInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionGiletTuxedoInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (bs01dModel.equals(tgGiletModel) || et15dModel.equals(tgGiletModel)) {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDoublePrice())) {
								tuxedoGiletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								tuxedoGiletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDoublePrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailDoublePrice())) {
								tuxedoGiletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								tuxedoGiletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailDoublePrice()));
							}
							break;
						}
					} else {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
								tuxedoGiletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								tuxedoGiletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
								tuxedoGiletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								tuxedoGiletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
							}
							break;
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return tuxedoGiletUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面タキシードのPANTS上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> tuxedoPantsUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// PANTSのsubItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_PANTS.getKey();
		// PANTSのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionPantsTuxedoInfo().getTpPantsModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionPantsStandardInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_PANTS.getValue();

		Map<String, String> tuxedoPantsUpperPriceMap = new HashMap<String, String>();

		PantsCoOptionTuxedoUpperPriceEnum[] pantsCoOptionTuxedoUpperPriceEnum = PantsCoOptionTuxedoUpperPriceEnum
				.values();

		for (PantsCoOptionTuxedoUpperPriceEnum pantsCoOptionTuxedoUpperPrice : pantsCoOptionTuxedoUpperPriceEnum) {
			String optionCode = pantsCoOptionTuxedoUpperPrice.getKey();
			String optionBranchCode = pantsCoOptionTuxedoUpperPrice.getValueOne();
			String optionBranchDetailCode = pantsCoOptionTuxedoUpperPrice.getValueTwo();
			String mapOfKey = pantsCoOptionTuxedoUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPantsTuxedoInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionPantsTuxedoInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
							tuxedoPantsUpperPriceMap.put(mapOfKey, "無料");
						} else {
							tuxedoPantsUpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
						}
						break;
					} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
							tuxedoPantsUpperPriceMap.put(mapOfKey, "無料");
						} else {
							tuxedoPantsUpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
						}
						break;
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return tuxedoPantsUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面タキシードの2PANTS上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> tuxedoPants2UpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// PANTSのsubItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_PANTS2.getKey();
		// PANTSのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2PantsModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionPantsStandardInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_PANTS2.getValue();

		Map<String, String> tuxedoPants2UpperPriceMap = new HashMap<String, String>();

		Pants2CoOptionTuxedoUpperPriceEnum[] pants2CoOptionTuxedoUpperPriceEnum = Pants2CoOptionTuxedoUpperPriceEnum
				.values();

		for (Pants2CoOptionTuxedoUpperPriceEnum pants2CoOptionTuxedoUpperPrice : pants2CoOptionTuxedoUpperPriceEnum) {
			String optionCode = pants2CoOptionTuxedoUpperPrice.getKey();
			String optionBranchCode = pants2CoOptionTuxedoUpperPrice.getValueOne();
			String optionBranchDetailCode = pants2CoOptionTuxedoUpperPrice.getValueTwo();
			String mapOfKey = pants2CoOptionTuxedoUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPants2TuxedoInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionPants2TuxedoInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
							tuxedoPants2UpperPriceMap.put(mapOfKey, "無料");
						} else {
							tuxedoPants2UpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
						}
						break;
					} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
							tuxedoPants2UpperPriceMap.put(mapOfKey, "無料");
						} else {
							tuxedoPants2UpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
						}
						break;
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return tuxedoPants2UpperPriceMap;
	}

	/**
	 * オーダー内容確認画面ウォッシャブルのjacket上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> washableJacketUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {

		Map<String, String> washableJacketUpperPriceMap = new HashMap<String, String>();

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// JACKETのsubItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_JACKET.getKey();
		// JACKETのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionJacketWashableInfo().getWjJacketModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionJacketStandardInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_JACKET.getValue();
		// フロント釦数
		String WjFrontBtnCnt = orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt();
		// 0000105(ダブル6つボタン)
		String wjFrontBtnCntdoubleSixButton = "0000105";
		// 0000106(ダブル4つボタン)
		String wjFrontBtnCntdoubleFourButton = "0000106";

		JacketCoOptionWashableUpperPriceEnum[] jacketCoOptionWashableUpperPriceEnum = JacketCoOptionWashableUpperPriceEnum
				.values();

		for (JacketCoOptionWashableUpperPriceEnum jacketCoOptionWashableUpperPrice : jacketCoOptionWashableUpperPriceEnum) {
			String optionCode = jacketCoOptionWashableUpperPrice.getKey();
			String optionBranchCode = jacketCoOptionWashableUpperPrice.getValueOne();
			String optionBranchDetailCode = jacketCoOptionWashableUpperPrice.getValueTwo();
			String mapOfKey = jacketCoOptionWashableUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketWashableInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionJacketWashableInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}
				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (wjFrontBtnCntdoubleSixButton.equals(WjFrontBtnCnt)
							|| wjFrontBtnCntdoubleFourButton.equals(WjFrontBtnCnt)) {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDoublePrice())) {
								washableJacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								washableJacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDoublePrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailDoublePrice())) {
								washableJacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								washableJacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailDoublePrice()));
							}
							break;
						}
					} else {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
								washableJacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								washableJacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
								washableJacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								washableJacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
							}
							break;
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return washableJacketUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面ウォッシャブルのGILET上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> washableGiletUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// GILETのsubItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_GILET.getKey();
		// GILETのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletStandardInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_GILET.getValue();
		// GILETモデル
		String wgGiletModel = orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModelMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel());
		// BS01-D
		String bs01dModel = "BS01-D";
		// ET15-D
		String et15dModel = "ET15-D";

		Map<String, String> washableGiletUpperPriceMap = new HashMap<String, String>();

		GiletCoOptionWashableUpperPriceEnum[] giletCoOptionWashableUpperPriceEnum = GiletCoOptionWashableUpperPriceEnum
				.values();

		for (GiletCoOptionWashableUpperPriceEnum giletCoOptionWashableUpperPrice : giletCoOptionWashableUpperPriceEnum) {
			String optionCode = giletCoOptionWashableUpperPrice.getKey();
			String optionBranchCode = giletCoOptionWashableUpperPrice.getValueOne();
			String optionBranchDetailCode = giletCoOptionWashableUpperPrice.getValueTwo();
			String mapOfKey = giletCoOptionWashableUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletWashableInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionGiletWashableInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (bs01dModel.equals(wgGiletModel) || et15dModel.equals(wgGiletModel)) {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDoublePrice())) {
								washableGiletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								washableGiletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDoublePrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailDoublePrice())) {
								washableGiletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								washableGiletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailDoublePrice()));
							}
							break;
						}
					} else {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
								washableGiletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								washableGiletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
								washableGiletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								washableGiletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
							}
							break;
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return washableGiletUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面ウォッシャブルのPANTS上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> washablePantsUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// PANTSのsubItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_PANTS.getKey();
		// PANTSのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionPantsWashableInfo().getWpPantsModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionPantsStandardInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_PANTS.getValue();

		Map<String, String> washablePantsUpperPriceMap = new HashMap<String, String>();

		PantsCoOptionWashableUpperPriceEnum[] pantsCoOptionWashableUpperPriceEnum = PantsCoOptionWashableUpperPriceEnum
				.values();

		for (PantsCoOptionWashableUpperPriceEnum pantsCoOptionWashableUpperPrice : pantsCoOptionWashableUpperPriceEnum) {
			String optionCode = pantsCoOptionWashableUpperPrice.getKey();
			String optionBranchCode = pantsCoOptionWashableUpperPrice.getValueOne();
			String optionBranchDetailCode = pantsCoOptionWashableUpperPrice.getValueTwo();
			String mapOfKey = pantsCoOptionWashableUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPantsWashableInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionPantsWashableInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
							washablePantsUpperPriceMap.put(mapOfKey, "無料");
						} else {
							washablePantsUpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
						}
						break;
					} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
							washablePantsUpperPriceMap.put(mapOfKey, "無料");
						} else {
							washablePantsUpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
						}
						break;
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return washablePantsUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面ウォッシャブルの2PANTS上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> washablePants2UpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// PANTSのsubItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_PANTS2.getKey();
		// PANTSのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionPants2WashableInfo().getWp2PantsModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionPantsStandardInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_PANTS2.getValue();

		Map<String, String> washablePants2UpperPriceMap = new HashMap<String, String>();

		Pants2CoOptionWashableUpperPriceEnum[] pants2CoOptionWashableUpperPriceEnum = Pants2CoOptionWashableUpperPriceEnum
				.values();

		for (Pants2CoOptionWashableUpperPriceEnum pants2CoOptionWashableUpperPrice : pants2CoOptionWashableUpperPriceEnum) {
			String optionCode = pants2CoOptionWashableUpperPrice.getKey();
			String optionBranchCode = pants2CoOptionWashableUpperPrice.getValueOne();
			String optionBranchDetailCode = pants2CoOptionWashableUpperPrice.getValueTwo();
			String mapOfKey = pants2CoOptionWashableUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPants2WashableInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionPants2WashableInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
							washablePants2UpperPriceMap.put(mapOfKey, "無料");
						} else {
							washablePants2UpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
						}
						break;
					} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
							washablePants2UpperPriceMap.put(mapOfKey, "無料");
						} else {
							washablePants2UpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
						}
						break;
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return washablePants2UpperPriceMap;
	}

	/**
	 * 標準JACKET素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectStandardJkMaterialName(List<OptionBranchDetail> mateList,
			OrderCoForm orderCoForm) {
		Map<String, String> standardJkMaterialMap = new HashMap<String, String>();
		// JK胴裏素材
		String ojBodyBackMateStkNo = orderCoForm.getCoOptionJacketStandardInfo().getOjBodyBackMateStkNo();
		String ojBodyBackMateName = orderCoForm.getCoOptionJacketStandardInfo().getOjBodyBackMateMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjBodyBackMate());
		// JK袖裏素材 
		String ojCuffBackMateStkNo = orderCoForm.getCoOptionJacketStandardInfo().getOjCuffBackMateStkNo();
		String ojCuffBackMateName = orderCoForm.getCoOptionJacketStandardInfo().getOjCuffBackMateMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjCuffBackMate());
		// JK釦素材
		String ojBtnMateStkNo = orderCoForm.getCoOptionJacketStandardInfo().getOjBtnMateStkNo();
		String ojBtnMateName = orderCoForm.getCoOptionJacketStandardInfo().getOjBtnMateMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjBtnMate());
		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (ojBodyBackMateStkNo != null && ojBodyBackMateStkNo.equals(optionBranchDetailCode)) {
				standardJkMaterialMap.put("ojBodyBackMateStkNo", ojBodyBackMateName + "　　" + optionBranchDetailName);
			} else if (ojCuffBackMateStkNo != null && ojCuffBackMateStkNo.equals(optionBranchDetailCode)) {
				standardJkMaterialMap.put("ojCuffBackMateStkNo", ojCuffBackMateName + "　　" + optionBranchDetailName);
			} else if (ojBtnMateStkNo != null && ojBtnMateStkNo.equals(optionBranchDetailCode)) {
				standardJkMaterialMap.put("ojBtnMateStkNo", ojBtnMateName + "　　" + optionBranchDetailName);
			}
		}
		return standardJkMaterialMap;
	}

	/**
	 * 標準GILET素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectStandardGlMaterialName(List<OptionBranchDetail> mateList,
			OrderCoForm orderCoForm) {
		Map<String, String> standardGlMaterialMap = new HashMap<String, String>();
		// GL背裏地素材
		String ogBackLiningMateStkNo = orderCoForm.getCoOptionGiletStandardInfo().getOgBackLiningMateStkNo();
		String ogBackLiningMateName = orderCoForm.getCoOptionGiletStandardInfo().getOgBackLiningMateMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgBackLiningMate());
		// GL内側裏地素材
		String ogInsideLiningMateStkNo = orderCoForm.getCoOptionGiletStandardInfo().getOgInsideLiningMateStkNo();
		String ogInsideLiningMateName = orderCoForm.getCoOptionGiletStandardInfo().getOgInsideLiningMateMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgInsideLiningMate());
		// GLフロント釦
		String ogFrontBtnMateStkNo = orderCoForm.getCoOptionGiletStandardInfo().getOgFrontBtnMateStkNo();
		String ogFrontBtnMateName = orderCoForm.getCoOptionGiletStandardInfo().getOgFrontBtnMateMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgFrontBtnMate());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (ogBackLiningMateStkNo != null && ogBackLiningMateStkNo.equals(optionBranchDetailCode)) {
				standardGlMaterialMap.put("ogBackLiningMateStkNo", ogBackLiningMateName + "　　" + optionBranchDetailName);
			}
			if (ogInsideLiningMateStkNo != null && ogInsideLiningMateStkNo.equals(optionBranchDetailCode)) {
				standardGlMaterialMap.put("ogInsideLiningMateStkNo",
						ogInsideLiningMateName + "　　" + optionBranchDetailName);
			}
			if (ogFrontBtnMateStkNo != null && ogFrontBtnMateStkNo.equals(optionBranchDetailCode)) {
				standardGlMaterialMap.put("ogFrontBtnMateStkNo", ogFrontBtnMateName + "　　" + optionBranchDetailName);
			}
		}
		return standardGlMaterialMap;
	}

	/**
	 * 標準COAT素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectStandardCtMaterialName(List<OptionBranchDetail> mateList,
			OrderCoForm orderCoForm) {
		Map<String, String> standardCtMaterialMap = new HashMap<String, String>();
		// CT胴裏素材
		String ocBodyBackMateStkNo = orderCoForm.getCoOptionCoatStandardInfo().getOcBodyBackMateStkNo();
		String ocBodyBackMateName = orderCoForm.getCoOptionCoatStandardInfo().getOcBodyBackMateMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcBodyBackMate());
		// CT袖裏素材
		String ocCuffBackMateStkNo = orderCoForm.getCoOptionCoatStandardInfo().getOcCuffBackMateStkNo();
		String ocCuffBackMateName = orderCoForm.getCoOptionCoatStandardInfo().getOcCuffBackMateMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcCuffBackMate());
		// CT釦素材
		String ocFrontBtnMateStkNo = orderCoForm.getCoOptionCoatStandardInfo().getOcFrontBtnMateStkNo();
		String OcFrontBtnMateName = orderCoForm.getCoOptionCoatStandardInfo().getOcFrontBtnMateMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcFrontBtnMate());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (ocBodyBackMateStkNo != null && ocBodyBackMateStkNo.equals(optionBranchDetailCode)) {
				standardCtMaterialMap.put("ocBodyBackMateStkNo", ocBodyBackMateName + "　　" + optionBranchDetailName);
			} else if (ocCuffBackMateStkNo != null && ocCuffBackMateStkNo.equals(optionBranchDetailCode)) {
				standardCtMaterialMap.put("ocCuffBackMateStkNo", ocCuffBackMateName + "　　" + optionBranchDetailName);
			} else if (ocFrontBtnMateStkNo != null && ocFrontBtnMateStkNo.equals(optionBranchDetailCode)) {
				standardCtMaterialMap.put("ocFrontBtnMateStkNo", OcFrontBtnMateName + "　　" + optionBranchDetailName);
			}
		}
		return standardCtMaterialMap;
	}

	/**
	 * 標準PANTS素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectStandardPtMaterialName(List<OptionBranchDetail> mateList,
			OrderCoForm orderCoForm) {
		Map<String, String> standardPtMaterialMap = new HashMap<String, String>();
		// PT釦素材
		String opBtnMateStkNo = orderCoForm.getCoOptionPantsStandardInfo().getOpBtnMateStkNo();
		String opButtonName = orderCoForm.getCoOptionPantsStandardInfo().getOpButtonMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpButton());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (opBtnMateStkNo != null && opBtnMateStkNo.equals(optionBranchDetailCode)) {
				standardPtMaterialMap.put("opBtnMateStkNo", opButtonName + "　　" + optionBranchDetailName);
				break;
			}
		}
		return standardPtMaterialMap;
	}

	/**
	 * 標準2PANTS素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectStandardPt2MaterialName(List<OptionBranchDetail> mateList,
			OrderCoForm orderCoForm) {
		Map<String, String> standardPt2MaterialMap = new HashMap<String, String>();
		// PT2釦素材
		String op2BtnMateStkNo = orderCoForm.getCoOptionPants2StandardInfo().getOp2BtnMateStkNo();
		String op2ButtonName = orderCoForm.getCoOptionPants2StandardInfo().getOp2ButtonMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2Button());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (op2BtnMateStkNo != null && op2BtnMateStkNo.equals(optionBranchDetailCode)) {
				standardPt2MaterialMap.put("op2BtnMateStkNo", op2ButtonName + "　　" + optionBranchDetailName);
				break;
			}
		}
		return standardPt2MaterialMap;
	}

	/**
	 * タキシードJACKET素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectTuxedoJkMaterialName(List<OptionBranchDetail> mateList, OrderCoForm orderCoForm) {
		Map<String, String> tuxedoJkMaterialMap = new HashMap<String, String>();
		// JK胴裏素材
		String tjBodyBackMateStkNo = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBodyBackMateStkNo();
		String tjBodyBackMateName = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBodyBackMateMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBodyBackMate());
		// JK袖裏素材
		String tjCuffBackMateStkNo = orderCoForm.getCoOptionJacketTuxedoInfo().getTjCuffBackMateStkNo();
		String tjCuffBackMateName = orderCoForm.getCoOptionJacketTuxedoInfo().getTjCuffBackMateMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjCuffBackMate());
		// JK釦素材
		String tjBtnMateStkNo = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBtnMateStkNo();
		String tjBtnMateName = orderCoForm.getCoOptionJacketTuxedoInfo().getTjBtnMateMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBtnMate());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (tjBodyBackMateStkNo != null && tjBodyBackMateStkNo.equals(optionBranchDetailCode)) {
				tuxedoJkMaterialMap.put("tjBodyBackMateStkNo", tjBodyBackMateName + "　　" + optionBranchDetailName);
			} else if (tjCuffBackMateStkNo != null && tjCuffBackMateStkNo.equals(optionBranchDetailCode)) {
				tuxedoJkMaterialMap.put("tjCuffBackMateStkNo", tjCuffBackMateName + "　　" + optionBranchDetailName);
			} else if (tjBtnMateStkNo != null && tjBtnMateStkNo.equals(optionBranchDetailCode)) {
				tuxedoJkMaterialMap.put("tjBtnMateStkNo", tjBtnMateName + "　　" + optionBranchDetailName);
			}
		}
		return tuxedoJkMaterialMap;
	}

	/**
	 * タキシードGILET素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectTuxedoGlMaterialName(List<OptionBranchDetail> mateList, OrderCoForm orderCoForm) {
		Map<String, String> tuxedoGlMaterialMap = new HashMap<String, String>();
		// GL背裏地素材
		String tgBackLiningMateStkNo = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBackLiningMateStkNo();
		String tgBackLiningMateName = orderCoForm.getCoOptionGiletTuxedoInfo().getTgBackLiningMateMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBackLiningMate());
		// GL内側裏地素材
		String tgInsideLiningMateStkNo = orderCoForm.getCoOptionGiletTuxedoInfo().getTgInsideLiningMateStkNo();
		String tgInsideLiningMateName = orderCoForm.getCoOptionGiletTuxedoInfo().getTgInsideLiningMateMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgInsideLiningMate());
		// GLフロント釦
		String tgFrontBtnMateStkNo = orderCoForm.getCoOptionGiletTuxedoInfo().getTgFrontBtnMateStkNo();
		String tgFrontBtnMateName = orderCoForm.getCoOptionGiletTuxedoInfo().getTgFrontBtnMateMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgFrontBtnMate());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (tgBackLiningMateStkNo != null && tgBackLiningMateStkNo.equals(optionBranchDetailCode)) {
				tuxedoGlMaterialMap.put("tgBackLiningMateStkNo", tgBackLiningMateName + "　　" + optionBranchDetailName);
			}
			if (tgInsideLiningMateStkNo != null && tgInsideLiningMateStkNo.equals(optionBranchDetailCode)) {
				tuxedoGlMaterialMap.put("tgInsideLiningMateStkNo",
						tgInsideLiningMateName + "　　" + optionBranchDetailName);
			}
			if (tgFrontBtnMateStkNo != null && tgFrontBtnMateStkNo.equals(optionBranchDetailCode)) {
				tuxedoGlMaterialMap.put("tgFrontBtnMateStkNo", tgFrontBtnMateName + "　　" + optionBranchDetailName);
			}
		}
		return tuxedoGlMaterialMap;
	}

	/**
	 * タキシードPANTS素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectTuxedoPtMaterialName(List<OptionBranchDetail> mateList, OrderCoForm orderCoForm) {
		Map<String, String> tuxedoPtMaterialMap = new HashMap<String, String>();
		// PT釦素材
		String tpBtnMateStkNo = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBtnMateStkNo();
		String tpButtonName = orderCoForm.getCoOptionPantsTuxedoInfo().getTpButtonMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpButton());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (tpBtnMateStkNo != null && tpBtnMateStkNo.equals(optionBranchDetailCode)) {
				tuxedoPtMaterialMap.put("tpBtnMateStkNo", tpButtonName + "　　" + optionBranchDetailName);
				break;
			}
		}
		return tuxedoPtMaterialMap;
	}

	/**
	 * タキシード2PANTS素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectTuxedoPt2MaterialName(List<OptionBranchDetail> mateList, OrderCoForm orderCoForm) {
		Map<String, String> tuxedoPt2MaterialMap = new HashMap<String, String>();
		// PT2釦素材
		String tp2BtnMateStkNo = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BtnMateStkNo();
		String tp2ButtonName = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ButtonMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2Button());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (tp2BtnMateStkNo != null && tp2BtnMateStkNo.equals(optionBranchDetailCode)) {
				tuxedoPt2MaterialMap.put("tp2BtnMateStkNo", tp2ButtonName + "　　" + optionBranchDetailName);
				break;
			}

		}
		return tuxedoPt2MaterialMap;
	}

	/**
	 * ウォッシャブルJACKET素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectWashableJkMaterialName(List<OptionBranchDetail> mateList,
			OrderCoForm orderCoForm) {
		Map<String, String> washableJkMaterialMap = new HashMap<String, String>();
		// JK胴裏素材
		String wjBodyBackMateStkNo = orderCoForm.getCoOptionJacketWashableInfo().getWjBodyBackMateStkNo();
		String wjBodyBackMateName = orderCoForm.getCoOptionJacketWashableInfo().getWjBodyBackMateMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBodyBackMate());
		// JK袖裏素材
		String wjCuffBackMateStkNo = orderCoForm.getCoOptionJacketWashableInfo().getWjCuffBackMateStkNo();
		String wjCuffBackMateName = orderCoForm.getCoOptionJacketWashableInfo().getWjCuffBackMateMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjCuffBackMate());
		// JK釦素材
		String wjBtnMateStkNo = orderCoForm.getCoOptionJacketWashableInfo().getWjBtnMateStkNo();
		String wjBtnMateName = orderCoForm.getCoOptionJacketWashableInfo().getWjBtnMateMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBtnMate());
		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (wjBodyBackMateStkNo != null && wjBodyBackMateStkNo.equals(optionBranchDetailCode)) {
				washableJkMaterialMap.put("wjBodyBackMateStkNo", wjBodyBackMateName + "　　" + optionBranchDetailName);
			} else if (wjCuffBackMateStkNo != null && wjCuffBackMateStkNo.equals(optionBranchDetailCode)) {
				washableJkMaterialMap.put("wjCuffBackMateStkNo", wjCuffBackMateName + "　　" + optionBranchDetailName);
			} else if (wjBtnMateStkNo != null && wjBtnMateStkNo.equals(optionBranchDetailCode)) {
				washableJkMaterialMap.put("wjBtnMateStkNo", wjBtnMateName + "　　" + optionBranchDetailName);
			}
		}
		return washableJkMaterialMap;
	}

	/**
	 * ウォッシャブルGILET素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectWashableGlMaterialName(List<OptionBranchDetail> mateList,
			OrderCoForm orderCoForm) {
		Map<String, String> washableGlMaterialMap = new HashMap<String, String>();
		// GL背裏地素材
		String wgBackLiningMateStkNo = orderCoForm.getCoOptionGiletWashableInfo().getWgBackLiningMateStkNo();
		String wgBackLiningMateName = orderCoForm.getCoOptionGiletWashableInfo().getWgBackLiningMateMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBackLiningMate());
		// GL内側裏地素材
		String wgInsideLiningMateStkNo = orderCoForm.getCoOptionGiletWashableInfo().getWgInsideLiningMateStkNo();
		String wgInsideLiningMateName = orderCoForm.getCoOptionGiletWashableInfo().getWgInsideLiningMateMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgInsideLiningMate());
		// GLフロント釦
		String wgFrontBtnMateName = orderCoForm.getCoOptionGiletWashableInfo().getWgFrontBtnMateMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgFrontBtnMate());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (wgBackLiningMateStkNo != null && wgBackLiningMateStkNo.equals(optionBranchDetailCode)) {
				washableGlMaterialMap.put("wgBackLiningMateStkNo", wgBackLiningMateName + "　　" + optionBranchDetailName);
			}
			if (wgInsideLiningMateStkNo != null && wgInsideLiningMateStkNo.equals(optionBranchDetailCode)) {
				washableGlMaterialMap.put("wgInsideLiningMateStkNo",
						wgInsideLiningMateName + "　　" + optionBranchDetailName);
			}
			if (wgFrontBtnMateName != null ) {
				washableGlMaterialMap.put("wgFrontBtnMateStkNo", wgFrontBtnMateName);
			}
		}
		return washableGlMaterialMap;
	}

	/**
	 * ウォッシャブルPANTS素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectWashablePtMaterialName(List<OptionBranchDetail> mateList,
			OrderCoForm orderCoForm) {
		Map<String, String> washablePtMaterialMap = new HashMap<String, String>();
		// PT釦素材
		String wpBtnMateStkNo = orderCoForm.getCoOptionPantsWashableInfo().getWpBtnMateStkNo();
		String wpButtonName = orderCoForm.getCoOptionPantsWashableInfo().getWpButtonMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpButton());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (wpBtnMateStkNo != null && wpBtnMateStkNo.equals(optionBranchDetailCode)) {
				washablePtMaterialMap.put("wpBtnMateStkNo", wpButtonName + "　　" + optionBranchDetailName);
			}
		}
		return washablePtMaterialMap;
	}

	/**
	 * ウォッシャブル2PANTS素材名
	 * 
	 * @param mateList
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> selectWashablePt2MaterialName(List<OptionBranchDetail> mateList,
			OrderCoForm orderCoForm) {
		Map<String, String> washablePt2MaterialMap = new HashMap<String, String>();
		// PT2釦素材
		String wp2BtnMateStkNo = orderCoForm.getCoOptionPants2WashableInfo().getWp2BtnMateStkNo();
		String wp2ButtonName = orderCoForm.getCoOptionPants2WashableInfo().getWp2ButtonMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2Button());

		for (OptionBranchDetail mate : mateList) {
			String optionBranchDetailCode = mate.getOptionBranchDetailCode();
			String optionBranchDetailName = mate.getOptionBranchDetailName();
			if (wp2BtnMateStkNo != null && wp2BtnMateStkNo.equals(optionBranchDetailCode)) {
				washablePt2MaterialMap.put("wp2BtnMateStkNo", wp2ButtonName + "　　" + optionBranchDetailName);
			}
		}
		return washablePt2MaterialMap;
	}

	/**
	 * オーダー内容確認画面標準のPANTS上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> standardPantsUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// PANTSのsubItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_PANTS.getKey();
		// PANTSのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionPantsStandardInfo().getOpPantsModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionPantsStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_PANTS.getValue();

		Map<String, String> pantsUpperPriceMap = new HashMap<String, String>();

		PantsCoOptionStandardUpperPriceEnum[] pantsCoOptionStandardUpperPriceEnum = PantsCoOptionStandardUpperPriceEnum
				.values();

		for (PantsCoOptionStandardUpperPriceEnum PantsCoOptionStandardUpperPrice : pantsCoOptionStandardUpperPriceEnum) {
			String optionCode = PantsCoOptionStandardUpperPrice.getKey();
			String optionBranchCode = PantsCoOptionStandardUpperPrice.getValueOne();
			String optionBranchDetailCode = PantsCoOptionStandardUpperPrice.getValueTwo();
			String mapOfKey = PantsCoOptionStandardUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPantsStandardInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionPantsStandardInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
							pantsUpperPriceMap.put(mapOfKey, "無料");
						} else {
							pantsUpperPriceMap.put(mapOfKey, "￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
						}
						break;
					} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
							pantsUpperPriceMap.put(mapOfKey, "無料");
						} else {
							pantsUpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
						}
						break;
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return pantsUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面標準の2PANTS上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> standardPants2UpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// 2PANTSのsubItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_PANTS2.getKey();
		// 2PANTSのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionPants2StandardInfo().getOp2PantsModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionPants2StandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_PANTS2.getValue();

		Map<String, String> pants2UpperPriceMap = new HashMap<String, String>();

		Pants2CoOptionStandardUpperPriceEnum[] pants2CoOptionStandardUpperPriceEnum = Pants2CoOptionStandardUpperPriceEnum
				.values();

		for (Pants2CoOptionStandardUpperPriceEnum pants2CoOptionStandardUpperPrice : pants2CoOptionStandardUpperPriceEnum) {
			String optionCode = pants2CoOptionStandardUpperPrice.getKey();
			String optionBranchCode = pants2CoOptionStandardUpperPrice.getValueOne();
			String optionBranchDetailCode = pants2CoOptionStandardUpperPrice.getValueTwo();
			String mapOfKey = pants2CoOptionStandardUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPants2StandardInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionPants2StandardInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
							pants2UpperPriceMap.put(mapOfKey, "無料");
						} else {
							pants2UpperPriceMap.put(mapOfKey, "￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
						}
						break;
					} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
						if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
							pants2UpperPriceMap.put(mapOfKey, "無料");
						} else {
							pants2UpperPriceMap.put(mapOfKey,
									"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
						}
						break;
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return pants2UpperPriceMap;
	}

	/**
	 * オーダー内容確認画面標準のjacket上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> standardJacketUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {

		Map<String, String> jacketUpperPriceMap = new HashMap<String, String>();

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// JACKETのsubItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_JACKET.getKey();
		// JACKETのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionJacketStandardInfo().getOjJacketModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionJacketStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_JACKET.getValue();
		// フロント釦数
		String ojFrontBtnCnt = orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt();
		// 0000105(ダブル6つボタン)
		String ojFrontBtnCntdoubleSixButton = "0000105";
		// 0000106(ダブル4つボタン)
		String ojFrontBtnCntdoubleFourButton = "0000106";

		JacketCoOptionStandardUpperPriceEnum[] jacketCoOptionStandardUpperPriceEnum = JacketCoOptionStandardUpperPriceEnum
				.values();

		for (JacketCoOptionStandardUpperPriceEnum jacketCoOptionStandardUpperPrice : jacketCoOptionStandardUpperPriceEnum) {
			String optionCode = jacketCoOptionStandardUpperPrice.getKey();
			String optionBranchCode = jacketCoOptionStandardUpperPrice.getValueOne();
			String OptionBranchDetailCode = jacketCoOptionStandardUpperPrice.getValueTwo();
			String mapOfKey = jacketCoOptionStandardUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, OptionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketStandardInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionJacketStandardInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (ojFrontBtnCntdoubleSixButton.equals(ojFrontBtnCnt)
							|| ojFrontBtnCntdoubleFourButton.equals(ojFrontBtnCnt)) {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDoublePrice())) {
								jacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								jacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDoublePrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailDoublePrice())) {
								jacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								jacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailDoublePrice()));
							}
							break;
						}
					} else {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
								jacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								jacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
								jacketUpperPriceMap.put(mapOfKey, "無料");
							} else {
								jacketUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
							}
							break;
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return jacketUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面標準のGILET上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> standardGiletUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// GILETのsubItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_GILET.getKey();
		// GILETのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_GILET.getValue();
		// GILETモデル
		String OgGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModelMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel());
		// BS01-D
		String bs01dModel = "BS01-D";
		// ET15-D
		String et15dModel = "ET15-D";

		Map<String, String> giletUpperPriceMap = new HashMap<String, String>();

		GiletCoOptionStandardNextUpperPriceEnum[] giletCoOptionStandardNextUpperPriceEnum = GiletCoOptionStandardNextUpperPriceEnum
				.values();

		for (GiletCoOptionStandardNextUpperPriceEnum giletCoOptionStandardNextUpperPrice : giletCoOptionStandardNextUpperPriceEnum) {
			String optionCode = giletCoOptionStandardNextUpperPrice.getKey();
			String optionBranchCode = giletCoOptionStandardNextUpperPrice.getValueOne();
			String optionBranchDetailCode = giletCoOptionStandardNextUpperPrice.getValueTwo();
			String mapOfKey = giletCoOptionStandardNextUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletStandardInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionGiletStandardInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (bs01dModel.equals(OgGiletModel) || et15dModel.equals(OgGiletModel)) {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDoublePrice())) {
								giletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								giletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDoublePrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailDoublePrice())) {
								giletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								giletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailDoublePrice()));
							}
							break;
						}
					} else {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
								giletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								giletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
								giletUpperPriceMap.put(mapOfKey, "無料");
							} else {
								giletUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
							}
							break;
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}

		}
		return giletUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面標準のCOAT上代
	 * 
	 * @param orderCoForm
	 * @param optionBranchPriceList
	 * @return
	 */
	public Map<String, String> standardCoatUpperPrice(OrderCoForm orderCoForm,
			List<OrderCodePrice> optionBranchPriceList) {
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// COATのsubItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_COAT.getKey();
		// COATのmodelCodeの取得
		String modelCode = orderCoForm.getCoOptionCoatStandardInfo().getCoatModel();
		// co.jp.aoyama.macchinetta.app.order.info.OptionCoatStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_COAT.getValue();
		// DoubleChester(ダブルチェスター)
		String DoubleChester = "DoubleChester";
		// DoublePolo(ダブルポロ)
		String DoublePolo = "DoublePolo";

		Map<String, String> coatUpperPriceMap = new HashMap<String, String>();

		CoatCoOptionStandardUpperPriceEnum[] coatCoOptionStandardUpperPriceEnum = CoatCoOptionStandardUpperPriceEnum
				.values();

		for (CoatCoOptionStandardUpperPriceEnum coatCoOptionStandardUpperPrice : coatCoOptionStandardUpperPriceEnum) {
			String optionCode = coatCoOptionStandardUpperPrice.getKey();
			String optionBranchCode = coatCoOptionStandardUpperPrice.getValueOne();
			String optionBranchDetailCode = coatCoOptionStandardUpperPrice.getValueTwo();
			String mapOfKey = coatCoOptionStandardUpperPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, optionBranchCode);
				Method myMethodTwo = getMethod(cls, optionBranchDetailCode);
				Object[] args = {};
				Object[] argsT = {};
				Object resultOne = null;
				Object resultTwo = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionCoatStandardInfo(), args);
				}
				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionCoatStandardInfo(), argsT);
				}
				String priceKeyCode = null;
				if (resultTwo != null) {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne + resultTwo;
				} else {
					priceKeyCode = itemCode + subItemCode + modelCode + optionCode + resultOne;
				}

				for (OrderCodePrice orderCodePrice : optionBranchPriceList) {
					if (DoubleChester.equals(modelCode) || DoublePolo.equals(modelCode)) {
						if (priceKeyCode.equals(orderCodePrice.getOrderBranchDoublePrice())) {
							if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
								coatUpperPriceMap.put(mapOfKey, "無料");
							} else {
								coatUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDoublePrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailDoublePrice())) {
								coatUpperPriceMap.put(mapOfKey, "無料");
							} else {
								coatUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailDoublePrice()));
							}
							break;
						}
					} else {
						if (priceKeyCode.equals(orderCodePrice.getOrderKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchPrice())) {
								coatUpperPriceMap.put(mapOfKey, "無料");
							} else {
								coatUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchPrice()));
							}
							break;
						} else if (priceKeyCode.equals(orderCodePrice.getOrderDetailKeyCode())) {
							if ("0".equals(orderCodePrice.getOrderBranchDetailPrice())) {
								coatUpperPriceMap.put(mapOfKey, "無料");
							} else {
								coatUpperPriceMap.put(mapOfKey,
										"￥" + formatPrice(orderCodePrice.getOrderBranchDetailPrice()));
							}
							break;
						}

					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
		return coatUpperPriceMap;
	}

	/**
	 * オーダー内容確認画面のメジャーリングの値とmeasuringの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param measuring
	 * @param userId
	 */
	public void measuringMapping(OrderCoForm orderCoForm, Measuring measuring, String userId) {

		// 注文ID
		measuring.setOrderId(orderCoForm.getCoCustomerMessageInfo().getOrderId());
		// フルレングス
		measuring.setFullLength(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getFullLength()));
		// ショルダー
		measuring.setShoulder(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getShoulder()));
		// リーチ（右）
		measuring.setReachRight(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getReachRight()));
		// リーチ（左）
		measuring.setReachLeft(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getReachLeft()));
		// アウトバスト
		measuring.setOutBust(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getOutBust()));
		// バスト
		measuring.setBust(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getBust()));
		// JKウエスト
		measuring.setJacketWaist(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getJacketWaist()));
		// PTウエスト
		measuring.setPantsWaist(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getPantsWaist()));
		// ヒップ
		measuring.setHip(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getHip()));
		// ワタリ（右）
		measuring.setSpanRight(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getSpanRight()));
		// ワタリ（左）
		measuring.setSpanLeft(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getSpanLeft()));
		// ふくらはぎ（右）
		measuring.setCalfRight(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getCalfRight()));
		// ふくらはぎ（左）
		measuring.setCalfLeft(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getCalfLeft()));
		// ネック
		measuring.setNeck(convertBigDecimal(orderCoForm.getCoMeasuringInfo().getNeck()));

		measuring.setUpdatedUserId(userId);

		measuring.setUpdatedAt(new Date());
	}

	/**
	 * 商品情報_ITEM表示用をデータベースに入力する
	 * 
	 * @param
	 *
	 */
	public void setProductItemDisplayCode(OrderCoForm orderCoForm, Order order) {
		// 商品情報_ITEM
		String itemCode = orderCoForm.getProductItem();
		// 商品情報_３Piece
		String product3Piece = orderCoForm.getProductIs3Piece();
		// 商品情報_スペアパンツ
		String productSparePantsClass = orderCoForm.getProductSparePantsClass();
		// 01:SUIT
		String suitCode = "01";
		// ３Pieceまたはスペアパンツは有り
		String productYes = "0009902";
		// ３Pieceまたはスペアパンツは無し
		String productNo = "0009901";
		// SUIT(2p)：21
		String item2p = "21";
		// SUIT(2pp)：22
		String item2pp = "22";
		// SUIT(3p)：31
		String item3p = "31";
		// SUIT(3p2pp)：32
		String item3p2pp = "32";
		if (itemCode.equals(suitCode)) {
			if (productYes.equals(product3Piece) && productYes.equals(productSparePantsClass)) {
				order.setProductItemDisplaycode(item3p2pp);
			} else if (productYes.equals(product3Piece) && productNo.equals(productSparePantsClass)) {
				order.setProductItemDisplaycode(item3p);
			} else if (productNo.equals(product3Piece) && productYes.equals(productSparePantsClass)) {
				order.setProductItemDisplaycode(item2pp);
			} else if (productNo.equals(product3Piece) && productNo.equals(productSparePantsClass)) {
				order.setProductItemDisplaycode(item2p);
			}
		} else {
			order.setProductItemDisplaycode(null);
		}
	}

	/**
	 * 更新のみのデータ
	 * 
	 * @param selectExistOrder
	 * @param order
	 */
	public void onlyUpdateItem(Order selectExistOrder, Order order, String authority) {
		// 売上金額
		Integer salesAmount = selectExistOrder.getSalesAmount();
		order.setSalesAmount(salesAmount);
		// 会計ID
		String cashId = selectExistOrder.getCashId();
		order.setCashId(cashId);
		// 値引き後金額
		Integer cashDiscountPrice = selectExistOrder.getCashDiscountPrice();
		order.setCashDiscountPrice(cashDiscountPrice);
		// 会計後商品金額（税抜き）
		Integer cashProductPrice = selectExistOrder.getCashProductPrice();
		order.setCashProductPrice(cashProductPrice);
		// 会計後商品金額（税込み）
		Integer cashContailTaxProductPrice = selectExistOrder.getCashContailTaxProductPrice();
		order.setCashContailTaxProductPrice(cashContailTaxProductPrice);
		// 店舗・担当_店舗名
		String storeNm = selectExistOrder.getStoreNm();
		order.setStoreNm(storeNm);
		// 店舗・担当_営業担当者
		String storeStaffNm = selectExistOrder.getStoreStaffNm();
		order.setStoreStaffNm(storeStaffNm);
		// 証紙印字情報_お客様名ローマ字
		String printoutCustRomaNm = selectExistOrder.getPrintoutCustRomaNm();
		order.setPrintoutCustRomaNm(printoutCustRomaNm);
		// 証紙印字情報_営業担当者ローマ字
		String printoutStoreStaffRomaNm = selectExistOrder.getPrintoutStoreStaffRomaNm();
		order.setPrintoutStoreStaffRomaNm(printoutStoreStaffRomaNm);
		// お客様情報_お客様氏名
		String custNm = selectExistOrder.getCustNm();
		order.setCustNm(custNm);
		// お客様情報_フリガナ
		String custKanaNm = selectExistOrder.getCustKanaNm();
		order.setCustKanaNm(custKanaNm);
		// ホスト連携_A行
		String hostTransmitARow = selectExistOrder.getHostTransmitARow();
		order.setHostTransmitARow(hostTransmitARow);
		// 出荷番号
		String shippingNumber = selectExistOrder.getShippingNumber();
		order.setShippingNumber(shippingNumber);

		if ("02".equals(authority)) {
			// 業態
			order.setStoreBrandCode(selectExistOrder.getStoreBrandCode());
			// 店舗コード
			order.setShopCode(selectExistOrder.getShopCode());

		}
	}
	
	/**
	 * 
	 * @param string
	 * @return
	 */
	public String complete2Digits(String string) {
		String blankSpace = " ";
		if(string.length() < 2) {
			string = string + blankSpace;
		}
		return string;
	}
	
	/**
	 * 
	 * @param productItem
	 * @param productIs3Piece
	 * @param productSparePantsClass
	 * @param ojFrontBtnCnt
	 * @return
	 */
	public String getHostTransmitMakerProductMapKey(String productItem, String productIs3Piece,
			String productSparePantsClass, String jFrontBtnCnt,String giletModelCd,String coatModelCd) {
		// スペアパンツは有り
		String productSparePantsClassYes = "0009902";
		// ３Pieceは有り
		String productIs3PieceYes = "0009902";
		// フロント釦数はダブル
		String jkFrontBtnCntDoubleSix = "0000105";
		String jkFrontBtnCntDoubleFour = "0000106";
		
		// GILTEモデル
		String bs01dModel = "BS01-D";
		String et15dModel = "ET15-D";
		
		// COATモデル
		//ダブルチェスター
		String DoubleChester = "DoubleChester";
		//ダブルポロ
		String DoublePolo = "DoublePolo";
		
		// SUIT:01 JACKET:02 PANTS:03 GILET:04 SHIRT:05 COAT:06
		String suitItemCd = "01";
		String jacketItemCd = "02";
		String giletItemCd = "04";
		String coatItemCd = "06";

		String itemAnd = "";
		String is3PieceAnd = "";
		String sparePantsClassAnd = "";
		String ojFrontBtnCntAnd = "";

		if (suitItemCd.equals(productItem)) {
			// ２Pシングル
			if (!jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) && !jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt) && !productIs3PieceYes.equals(productIs3Piece)
					&& !productSparePantsClassYes.equals(productSparePantsClass)) {
				itemAnd = "01";
			}
			// ２Pダブル
			else if ((jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) || jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt)) && !productIs3PieceYes.equals(productIs3Piece)
					&& !productSparePantsClassYes.equals(productSparePantsClass)) {
				itemAnd = "01";
				ojFrontBtnCntAnd = "00001056";
			}
			// ２PPシングル
			else if (!jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) && !jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt) && !productIs3PieceYes.equals(productIs3Piece)
					&& productSparePantsClassYes.equals(productSparePantsClass)) {
				itemAnd = "01";
				sparePantsClassAnd = "030009902";
			}
			// ２PPダブル
			else if ((jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) || jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt)) && !productIs3PieceYes.equals(productIs3Piece)
					&& productSparePantsClassYes.equals(productSparePantsClass)) {
				itemAnd = "01";
				sparePantsClassAnd = "030009902";
				ojFrontBtnCntAnd = "00001056";
			}
			// ３Pシングル
			else if (!jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) && !jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt) && productIs3PieceYes.equals(productIs3Piece)
					&& !productSparePantsClassYes.equals(productSparePantsClass)) {
				itemAnd = "01";
				is3PieceAnd = "040009902";
			}
			// ３Pダブル
			else if ((jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) || jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt)) && productIs3PieceYes.equals(productIs3Piece)
					&& !productSparePantsClassYes.equals(productSparePantsClass)) {
				itemAnd = "01";
				is3PieceAnd = "040009902";
				ojFrontBtnCntAnd = "00001056";
			}
			// ３P２PPシングル
			else if (!jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) && !jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt) && productIs3PieceYes.equals(productIs3Piece)
					&& productSparePantsClassYes.equals(productSparePantsClass)) {
				itemAnd = "01";
				is3PieceAnd = "040009902";
				sparePantsClassAnd = "030009902";
			}
			// ３P２PPダブル
			else if ((jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) || jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt)) && productIs3PieceYes.equals(productIs3Piece)
					&& productSparePantsClassYes.equals(productSparePantsClass)) {
				itemAnd = "01";
				is3PieceAnd = "040009902";
				sparePantsClassAnd = "030009902";
				ojFrontBtnCntAnd = "00001056";
			}
		} else if (jacketItemCd.equals(productItem)) {
			// J ジャケット
			if (!jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) && !jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt)) {
				itemAnd = "02";
			} 
			// W ダブルジャケット
			else if (jkFrontBtnCntDoubleSix.equals(jFrontBtnCnt) || jkFrontBtnCntDoubleFour.equals(jFrontBtnCnt)) {
				itemAnd = "02";
				ojFrontBtnCntAnd = "00001056";
			}
		} 
		else if(giletItemCd.equals(productItem)) {
			// G　ジレ
			if(!bs01dModel.equals(giletModelCd) && !et15dModel.equals(giletModelCd)) {
				itemAnd = "04";
			}
			//V　ダブルジレ
			else if(bs01dModel.equals(giletModelCd) || et15dModel.equals(giletModelCd)) {
				itemAnd = "04";
				ojFrontBtnCntAnd = "0404";
			}
		}
		else if(coatItemCd.equals(productItem)) {
			// C　シングルコート
			if(coatModelCd != null && !DoubleChester.equals(coatModelCd) && !DoublePolo.equals(coatModelCd)) {
				itemAnd = "06";
			}
			// A　ダブルコート
			else if(coatModelCd != null && (DoubleChester.equals(coatModelCd) || DoublePolo.equals(coatModelCd))) {
				itemAnd = "06";
				ojFrontBtnCntAnd = "0606";
			}
		}
		else {
			itemAnd = productItem;
		}
		String hostTransmitMakerProductKey = itemAnd + is3PieceAnd + sparePantsClassAnd + ojFrontBtnCntAnd;
		return hostTransmitMakerProductKey;
	}
	
	

	/**
	 * オーダー内容確認画面のMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoMapping(OrderCoForm orderCoForm, Order order, String userId, OrderFindFabric findStock,
			Order orderId,String findMakerId,Map<String, Integer> retailPriceRelatedMap,NextGenerationPrice priceCode) {
		//カテゴリ
		String productCategory = orderCoForm.getProductCategory();
		
		// オーダーパターン
		order.setOrderPattern(orderCoForm.getOrderPattern());

		// 注文承り日
		order.setProductOrderdDate(new Date());

		// TSCステータス
		order.setTscStatus("T2");

		// 取り消しフラグ
		order.setIsCancelled("0");

		// 登録者
		String createdUserId = orderId.getCreatedUserId();
		order.setCreatedUserId(createdUserId);

		// 登録日時
		Date createdAt = orderId.getCreatedAt();
		order.setCreatedAt(createdAt);

		if ("T2".equals(orderCoForm.getStatus()) || "T3".equals(orderCoForm.getStatus())
				|| "T4".equals(orderCoForm.getStatus()) || "T5".equals(orderCoForm.getStatus())) {
			// 業態
			String storeBrandCode = orderId.getStoreBrandCode();
			order.setStoreBrandCode(storeBrandCode);
			// 店舗コード
			String shopCode = orderId.getShopCode();
			order.setShopCode(shopCode);
		}

		// 最終更新者
		order.setUpdatedUserId(userId);

		// 最終更新日時
		Date updatedAt = new Date();
		order.setUpdatedAt(updatedAt);

		// 工場ステータス 生産開始前
		order.setMakerFactoryStatus("F0");

		// tsc stutas
		order.setTheoreticalStockCheck("1");

		// 商品情報_工場
		String productFactoryCd = findStock.getFactoryCode();
		order.setProductFactoryCd(productFactoryCd);

		// 商品情報_メーカーコード
		String productMakerCode = findStock.getMakerCode();
		order.setProductMakerCode(productMakerCode);

		// 生地_色
		String fabricColor = findStock.getColor();
		order.setFabricColor(fabricColor);

		// 生地_柄
		String fabricPattern = findStock.getPattern();
		order.setFabricPattern(fabricPattern);

		// 商品情報_残布_名
		String productRemainingClothType = orderCoForm.getProductRemainingClothType();
		String productRemainingClothName = orderCoForm.getCoProductInfo().getProductRemainingClothTypeMap().get(productRemainingClothType);
		order.setProductRemainingClothNm(productRemainingClothName);

		// ホスト連携_店コード
		order.setHostTransmitStoreCd(order.getShopCode());

		// ホスト連携_品名コード
		Map<String, String> hostTransmitItemCd03Map = new HashMap<String, String>();
		Map<String, String> hostTransmitItemCd01Map = new HashMap<String, String>();

		/*
		 * 業態がTSC(03)の場合 061 スーツ 01 SUIT 062 ジャケット 02 JACKET 063 パンツ 03 PANTS 064 ジレ 04
		 * GILET
		 */
		hostTransmitItemCd03Map.put("01", "061");
		hostTransmitItemCd03Map.put("02", "062");
		hostTransmitItemCd03Map.put("03", "063");
		hostTransmitItemCd03Map.put("04", "064");
		hostTransmitItemCd03Map.put("05", "065");
		hostTransmitItemCd03Map.put("06", "066");
		/*
		 * 業態がTSC(01)の場合 061 スーツ 01 SUIT 062 ジャケット 02 JACKET 063 パンツ 03 PANTS 067 ジレ 04
		 * GILET
		 */
		hostTransmitItemCd01Map.put("01", "061");
		hostTransmitItemCd01Map.put("02", "062");
		hostTransmitItemCd01Map.put("03", "063");
		hostTransmitItemCd01Map.put("04", "067");
		hostTransmitItemCd01Map.put("05", "060");
		hostTransmitItemCd01Map.put("06", "064");

		String hostTransmitItemCdKey = orderCoForm.getProductItem();
		String storeBrandCode = order.getStoreBrandCode();
		if ("01".equals(storeBrandCode)) {
			String hostTransmitItemCdValue = hostTransmitItemCd01Map.get(hostTransmitItemCdKey);
			order.setHostTransmitItemCd(hostTransmitItemCdValue);
		} else if ("03".equals(storeBrandCode) || "12".equals(storeBrandCode) || "21".equals(storeBrandCode)) {
			String hostTransmitItemCdValue = hostTransmitItemCd03Map.get(hostTransmitItemCdKey);
			order.setHostTransmitItemCd(hostTransmitItemCdValue);
		}

		// ホスト連携_メーカーコード
		order.setHostTransmitMakerCd(findMakerId);

		// ホスト連携_年季
		String hostTransmitNenkiCd = findStock.getSeason();
		order.setHostTransmitNenkiCd(hostTransmitNenkiCd);

		// ホスト連携_色
		String hostTransmitColorCd = findStock.getColorAoyama();
		String hostTransmitPatternCd = findStock.getPatternAoyama();
		order.setHostTransmitColorCd(hostTransmitColorCd + hostTransmitPatternCd);

		// 工場自動連携ステータス
		order.setSend2factoryStatus("0");

		// ホスト連携_サイズ
		String orderItemCd = orderCoForm.getProductItem();
		String suitItemCd = "01";
		String jacketItemCd = "02";
		String pantsItemCd = "03";
		String giletItemCd = "04";
		String shirtItemCd = "05";
		String coatItemCd = "06";
		if (suitItemCd.equals(orderItemCd) || jacketItemCd.equals(orderItemCd)) {
			String subStringSizeFigure = "";
			String subStringSizeNumber = "";
			String sizeNumber = orderCoForm.getCoAdjustJacketStandardInfo().getSizeNumber();
			if (sizeNumber.indexOf("(") != -1) {
				subStringSizeNumber = sizeNumber.substring(0, sizeNumber.indexOf("("));
			}
			String sizeFigure = orderCoForm.getCoAdjustJacketStandardInfo().getSizeFigure();
			if (sizeFigure.indexOf("(") != -1) {
				subStringSizeFigure = sizeFigure.substring(0, sizeFigure.indexOf("("));
			}
			
			String hostTransmitSize = complete2Digits(subStringSizeFigure) + complete2Digits(subStringSizeNumber);
			order.setHostTransmitSize(hostTransmitSize);
		} else if (pantsItemCd.equals(orderItemCd)) {
			String subStringSizeFigure = "";
			String subStringSizeNumber = "";
			String sizeNumber = orderCoForm.getCoAdjustPantsStandardInfo().getSizeNumber();
			if (sizeNumber.indexOf("(") != -1) {
				subStringSizeNumber = sizeNumber.substring(0, sizeNumber.indexOf("("));
			}
			String sizeFigure = orderCoForm.getCoAdjustPantsStandardInfo().getSizeFigure();
			if (sizeFigure.indexOf("(") != -1) {
				subStringSizeFigure = sizeFigure.substring(0, sizeFigure.indexOf("("));
			}
			String hostTransmitSize = complete2Digits(subStringSizeFigure) + complete2Digits(subStringSizeNumber);
			order.setHostTransmitSize(hostTransmitSize);
		} else if (giletItemCd.equals(orderItemCd)) {
			String subStringSizeFigure = "";
			String subStringSizeNumber = "";
			String sizeNumber = orderCoForm.getCoAdjustGiletStandardInfo().getSizeNumber();
			if (sizeNumber.indexOf("(") != -1) {
				subStringSizeNumber = sizeNumber.substring(0, sizeNumber.indexOf("("));
			}

			String sizeFigure = orderCoForm.getCoAdjustGiletStandardInfo().getSizeFigure();
			if (sizeFigure.indexOf("(") != -1) {
				subStringSizeFigure = sizeFigure.substring(0, sizeFigure.indexOf("("));
			}
			String hostTransmitSize = complete2Digits(subStringSizeFigure) + complete2Digits(subStringSizeNumber);
			order.setHostTransmitSize(hostTransmitSize);
		}
		else if(shirtItemCd.equals(orderItemCd)) {
			String corStSize = orderCoForm.getCoAdjustShirtStandardInfo().getCorStSize();
			String corStSizeReplace = null;
			if(corStSize.indexOf("-") != -1) {
				corStSizeReplace = corStSize.replace("-", "");
			}
			order.setHostTransmitSize(corStSizeReplace);
		}
		else if(coatItemCd.equals(orderItemCd)) {
			String corCtSize = orderCoForm.getCoAdjustCoatStandardInfo().getCorCtSize();
			if(corCtSize.length() == 1) {
				corCtSize = corCtSize + " ";
			}
			order.setHostTransmitSize(corCtSize);
		}

		// ホスト連携_メーカー品番
		/*
		 * 生地品番(8)＋色(1)＋柄(1)＋区分(1) 色、柄：TSC表記 区分： SUIT 単品 1 ２Pシングル J ジャケット 2 ２Pダブル W
		 * ダブルジャケット 3 ２PPシングル G ジレ 4 ２PPダブル V ダブルジレ 5 ３Pシングル P パンツ 6 ３Pダブル D ドレスシャツ 7
		 * ３P２PPシングル C シングルコート 8 ３P２PPダブル A ダブルコート
		 */
		Map<String, String> hostTransmitMakerProductMap = new HashMap<String, String>();
		// 1 ２Pシングル
		hostTransmitMakerProductMap.put("01", "1");
		// 2 ２Pダブル
		hostTransmitMakerProductMap.put("0100001056", "2");
		// 3 ２PPシングル
		hostTransmitMakerProductMap.put("01030009902", "3");
		// 4 ２PPダブル
		hostTransmitMakerProductMap.put("0103000990200001056", "4");
		// 5 ３Pシングル
		hostTransmitMakerProductMap.put("01040009902", "5");
		// 6 ３Pダブル
		hostTransmitMakerProductMap.put("0104000990200001056", "6");
		// 7 ３P２PPシングル
		hostTransmitMakerProductMap.put("01040009902030009902", "7");
		// 8 ３P２PPダブル
		hostTransmitMakerProductMap.put("0104000990203000990200001056", "8");
		// J ジャケット
		hostTransmitMakerProductMap.put("02", "J");
		// W ダブルジャケット
		hostTransmitMakerProductMap.put("0200001056", "W");
		// G ジレ
		hostTransmitMakerProductMap.put("04", "G");
		// V　ダブルジレ
		hostTransmitMakerProductMap.put("040404", "V");
		// P パンツ
		hostTransmitMakerProductMap.put("03", "P");
		// D　ドレスシャツ
		hostTransmitMakerProductMap.put("05", "D");
		// C　シングルコート
		hostTransmitMakerProductMap.put("06", "C");
		// A　ダブルコート
		hostTransmitMakerProductMap.put("060606", "A");
		
		// 商品情報_ITEM
		String productItem = orderCoForm.getProductItem();
		// 商品情報_３Piece
		String productIs3Piece = orderCoForm.getProductIs3Piece();
		// 商品情報_スペアパンツ
		String productSparePantsClass = orderCoForm.getProductSparePantsClass();
		// フロント釦数
		String jFrontBtnCntValue = null;
		// GILETモデル
		String giletModelCd = null;
		// COATモデル
		String coatModelCd = null;
		// 0：標準
		if("9000101".equals(productCategory)) {
			jFrontBtnCntValue = orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt();
			giletModelCd = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel();
			coatModelCd = orderCoForm.getCoOptionCoatStandardInfo().getCoatModel();
		}
		// 2：タキシード
		else if("9000102".equals(productCategory)) {
			jFrontBtnCntValue = orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt();
			giletModelCd = orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel();
		}
		// 1：ウォッシャブル
		else if("9000103".equals(productCategory)) {
			jFrontBtnCntValue = orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt();
			giletModelCd = orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel();
		}
		String hostTransmitMakerProductMapKey = getHostTransmitMakerProductMapKey(productItem, productIs3Piece,
				productSparePantsClass, jFrontBtnCntValue ,giletModelCd,coatModelCd);

		String productFabricNo = orderCoForm.getProductFabricNo();
		String hostTransmitMakerProductMapValue = hostTransmitMakerProductMap.get(hostTransmitMakerProductMapKey);
		String hostTransmitMakerProductValue = productFabricNo + fabricColor + fabricPattern
				+ hostTransmitMakerProductMapValue;
		order.setHostTransmitMakerProduct(hostTransmitMakerProductValue);

		// 商品情報_刺繍ネーム、商品情報_刺繍書体、商品情報_刺繍糸色はnull値の判定
		String productEmbroideryNecessity = orderCoForm.getProductEmbroideryNecessity();
		if ("9000501".equals(productEmbroideryNecessity)) {
			order.setProductEmbroideryNecessityNm(orderCoForm.getCoProductInfo().getProductEmbroideryNecessityMap().get(productEmbroideryNecessity));
			order.setProductEmbroideryNm(null);
			order.setProductEmbroideryFontCd(null);
			order.setProductEmbroideryThreadColor(null);
		}
		else if("9000502".equals(productEmbroideryNecessity)) {
			order.setProductEmbroideryNecessityNm(orderCoForm.getCoProductInfo().getProductEmbroideryNecessityMap().get(productEmbroideryNecessity));
			order.setProductEmbroideryFont(orderCoForm.getCoProductInfo().getProductEmbroideryFontMap().get(orderCoForm.getProductEmbroideryFont()));
			if("01".equals(productItem) || "02".equals(productItem) || "06".equals(productItem)) {
				order.setProductEmbroideryThreadColorCd(orderCoForm.getJkProductEmbroideryThreadColor());
				order.setProductEmbroideryThreadColor(orderCoForm.getCoOptionJacketStandardInfo().getJkProductEmbroideryThreadColorMap()
						.get(orderCoForm.getJkProductEmbroideryThreadColor()));
			}
			else if("05".equals(productItem)) {
				order.setProductEmbroideryThreadColorCd(orderCoForm.getStProductEmbroideryThreadColor());
				order.setProductEmbroideryThreadColor(orderCoForm.getCoOptionShirtStandardInfo().getStProductEmbroideryThreadColorMap()
						.get(orderCoForm.getStProductEmbroideryThreadColor()));
			}
		}

		String opHemUp = null;
		String op2HemUp = null;
		if("9000101".equals(productCategory)) {
			opHemUp = orderCoForm.getCoOptionPantsStandardInfo().getOpHemUp();
			op2HemUp = orderCoForm.getCoOptionPants2StandardInfo().getOp2HemUp();
		}
		else if("9000102".equals(productCategory)) {
			opHemUp = orderCoForm.getCoOptionPantsTuxedoInfo().getTpHemUp();
			op2HemUp = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2HemUp();
		}
		else if("9000103".equals(productCategory)) {
			opHemUp = orderCoForm.getCoOptionPantsWashableInfo().getWpHemUp();
			op2HemUp = orderCoForm.getCoOptionPants2WashableInfo().getWp2HemUp();
		}
		// PANTS_ダブル幅についての項目はnull値の判定
		if (!"0001702".equals(opHemUp) && !"0001703".equals(opHemUp)) {
			order.setPtDblWidthCd(null);
			order.setPtDblWidthNm(null);
			order.setPtDblWidthRtPrice(null);
			order.setPtDblWidthWsWage(null);
			order.setPtDblWidthWsPrice(null);
		}

		// PANTS2_ダブル幅についての項目はnull値の判定
		if (!"0001702".equals(op2HemUp) && !"0001703".equals(op2HemUp)) {
			order.setPt2DblWidthCd(null);
			order.setPt2DblWidthNm(null);
			order.setPt2DblWidthRtPrice(null);
			order.setPt2DblWidthWsWage(null);
			order.setPt2DblWidthWsPrice(null);
		}

		if("01".equals(productItem) || "02".equals(productItem)) {
			// JACKET_モデル_上代
			String jkRtModelPrice = orderCoForm.getJkDoubleModelPrice();
			Integer jkRtModelPriceParseInt = Integer.parseInt(subStrPriceMethod(jkRtModelPrice));
			order.setJkModelRtPrice(jkRtModelPriceParseInt);
		}
		if(("01".equals(productItem) && "0009902".equals(productIs3Piece)) || "04".equals(productItem)) {
			// GILET_モデル_上代
			String glRtModelPrice = orderCoForm.getGlDoubleModelPrice();
			Integer glRtModelPriceParseInt = Integer.parseInt(subStrPriceMethod(glRtModelPrice));
			order.setGlModelRtPrice(glRtModelPriceParseInt);
		}
		if("06".equals(productItem)) {
			// COAT_モデル_上代
			String ctRtModelPrice = orderCoForm.getCtDoubleModelPrice();
			Integer ctRtModelPriceParseInt = Integer.parseInt(subStrPriceMethod(ctRtModelPrice));
			order.setCtModelRtPrice(ctRtModelPriceParseInt);
		}
		
		// お客様情報_お客様氏名
		order.setCustNm(null);
		// お客様情報_フリガナ
		order.setCustKanaNm(null);
		// お客様備考
		order.setCustRemark(orderCoForm.getCoCustomerMessageInfo().getCustRemark().replaceAll("\\n", ""));
		
		if(priceCode != null) {
			// 生地代
			Integer fabricPrice = priceCode.getFabricPrice();
			order.setFabricPrice(fabricPrice);
			// 下代調整金
			Integer wsPriceAdjust = priceCode.getWsPriceAdjust();
			order.setWsPriceAdjust(wsPriceAdjust);
		}
		
		//商品情報_ガゼット刺繍
		if(!"05".equals(productItem) || ("05".equals(productItem) && "9000501".equals(productEmbroideryNecessity))) {
			order.setProductEmbroideryGazetteCd(null);
			// 商品情報_刺繍箇所_コード
			order.setProductEmbroideryNmPos(null);
			// 商品情報_ガゼット刺繍_上代
			order.setProductEmbroideryGazetteRtPrice(null);
			// 商品情報_刺繍箇所_上代
			order.setProductEmbroideryNmPosRtPrice(null);
		}
		else if("05".equals(productItem) && "9000502".equals(productEmbroideryNecessity)) {
			String productEmbroideryGazetteName = orderCoForm.getCoOptionShirtStandardInfo().getProductEmbroideryGazetteMap().get(orderCoForm.getProductEmbroideryGazette());
			order.setProductEmbroideryGazette(productEmbroideryGazetteName);
			
			// 商品情報_刺繍箇所_コード
			order.setProductEmbroideryNmPosCd(orderCoForm.getProductEmbroideryNmPos());
			// 商品情報_刺繍箇所
			String productEmbroideryNmPos = orderCoForm.getCoOptionShirtStandardInfo().getProductEmbroideryNmPosMap().get(orderCoForm.getProductEmbroideryNmPos());
			order.setProductEmbroideryNmPos(productEmbroideryNmPos);
		}
		
		//商品情報_LCR縫製
		String productLcrSewing = orderCoForm.getProductLcrSewing();
		String productLcrSewingNm = orderCoForm.getCoProductInfo().getProductLcrSewingMap().get(productLcrSewing);
		order.setProductLcrSewing(productLcrSewingNm);
		
		// 3Pieceまたはスペアパンツは有り
		String productYes = "0009902";
		
		if("01".equals(productItem)) {
			if(orderCoForm.getCoAdjustJacketStandardInfo().getCorJkStoreCorrectionMemo() != null) {
				//JK補正コメント
				order.setCorJkStoreCorrectionMemo(orderCoForm.getCoAdjustJacketStandardInfo().getCorJkStoreCorrectionMemo().replaceAll("\\n", ""));
			}
			if(orderCoForm.getCoAdjustPantsStandardInfo().getCorPtStoreCorrectionMemo() != null) {
				//Pt補正コメント
				order.setCorPtStoreCorrectionMemo(orderCoForm.getCoAdjustPantsStandardInfo().getCorPtStoreCorrectionMemo().replaceAll("\\n", ""));
			}
			if(productYes.equals(productIs3Piece) && productYes.equals(productSparePantsClass)) {
				if(orderCoForm.getCoAdjustPants2StandardInfo().getCorPt2StoreCorrectionMemo() != null) {
					//Pt2補正コメント
					order.setCorPt2StoreCorrectionMemo(orderCoForm.getCoAdjustPants2StandardInfo().getCorPt2StoreCorrectionMemo().replaceAll("\\n", ""));
				}
				if(orderCoForm.getCoAdjustGiletStandardInfo().getCorGlStoreCorrectionMemo() != null) {
					//gl補正コメント
					order.setCorGlStoreCorrectionMemo(orderCoForm.getCoAdjustGiletStandardInfo().getCorGlStoreCorrectionMemo().replaceAll("\\n", ""));
				}
			}
			else if(!productYes.equals(productIs3Piece) && productYes.equals(productSparePantsClass)) {
				if(orderCoForm.getCoAdjustPants2StandardInfo().getCorPt2StoreCorrectionMemo() != null) {
					//Pt2補正コメント
					order.setCorPt2StoreCorrectionMemo(orderCoForm.getCoAdjustPants2StandardInfo().getCorPt2StoreCorrectionMemo().replaceAll("\\n", ""));
				}
			}
			else if(productYes.equals(productIs3Piece) && !productYes.equals(productSparePantsClass)) {
				if(orderCoForm.getCoAdjustGiletStandardInfo().getCorGlStoreCorrectionMemo() != null) {
					//gl補正コメント
					order.setCorGlStoreCorrectionMemo(orderCoForm.getCoAdjustGiletStandardInfo().getCorGlStoreCorrectionMemo().replaceAll("\\n", ""));
				}
			}
		}
		else if("02".equals(productItem)) {
			if(orderCoForm.getCoAdjustJacketStandardInfo().getCorJkStoreCorrectionMemo() != null) {
				//JK補正コメント
				order.setCorJkStoreCorrectionMemo(orderCoForm.getCoAdjustJacketStandardInfo().getCorJkStoreCorrectionMemo().replaceAll("\\n", ""));
			}
		}
		else if("03".equals(productItem)) {
			if(orderCoForm.getCoAdjustPantsStandardInfo().getCorPtStoreCorrectionMemo() != null) {
				//Pt補正コメント
				order.setCorPtStoreCorrectionMemo(orderCoForm.getCoAdjustPantsStandardInfo().getCorPtStoreCorrectionMemo().replaceAll("\\n", ""));
			}
		}
		else if("04".equals(productItem)) {
			if(orderCoForm.getCoAdjustGiletStandardInfo().getCorGlStoreCorrectionMemo() != null) {
				//gl補正コメント
				order.setCorGlStoreCorrectionMemo(orderCoForm.getCoAdjustGiletStandardInfo().getCorGlStoreCorrectionMemo().replaceAll("\\n", ""));
			}
		}
		else if("05".equals(productItem)) {
			if(orderCoForm.getCorStoreCorrectionMemoAgain() != null) {
				//st補正コメント
				order.setCorStoreCorrectionMemo(orderCoForm.getCorStoreCorrectionMemoAgain().replaceAll("\\n", ""));
				order.setCorStoreCorrectionMemoAgain(null);
			}
		}
		else if("06".equals(productItem)) {
			if(orderCoForm.getCoAdjustCoatStandardInfo().getCorCtStoreCorrectionMemo() != null) {
				//ct補正コメント
				order.setCorCtStoreCorrectionMemo(orderCoForm.getCoAdjustCoatStandardInfo().getCorCtStoreCorrectionMemo().replaceAll("\\n", ""));
			}
		}
		
		//胸ポケット大きさ
		String osBreastPk = orderCoForm.getCoOptionShirtStandardInfo().getOsBreastPkMap().get(orderCoForm.getCoOptionShirtStandardInfo().getOsBreastPk());
		if("無し".equals(osBreastPk)) {
			order.setStBreastSizeCd(null);
			order.setStBreastSizeNm(null);
			order.setStBreastSizeRtPrice(null);
			order.setStBreastSizeWsWage(null);
			order.setStBreastSizeWsPrice(null);
		}
		
		// 商品情報_カテゴリ_名
		String productCategoryName = orderCoForm.getCoProductInfo().getProductCategoryMap().get(orderCoForm.getProductCategory());
		order.setProductCategoryNm(productCategoryName);
		
		// 商品情報_ブランドネーム
		String productBrandNm = orderCoForm.getCoProductInfo().getProductBrandNmMap().get(orderCoForm.getProductBrandNm());
		order.setProductBrandNm(productBrandNm);
		
		// 商品情報_生地ネーム_名
		String productEmbroideryNm = orderCoForm.getCoProductInfo().getProductFabricNmNecessityMap().get(orderCoForm.getProductFabricNmNecessity());
		order.setProductFabricNmNecessityNm(productEmbroideryNm);
		
		// JACKET_肩パット
		if("01".equals(productItem) || "02".equals(productItem)) {
			String corJkShoulderpadNm = orderCoForm.getCoOptionJacketStandardInfo().getCorJkShoulderPadMap().get(orderCoForm.getCoAdjustJacketStandardInfo().getCorJkShoulderPad());
			order.setCorJkShoulderpad(corJkShoulderpadNm);
		}
		
		// JACKET_体型補正
		if("01".equals(productItem) || "02".equals(productItem)) {
			String corJkFigureCorrectNm = orderCoForm.getCoOptionJacketStandardInfo().getCorJkFigureCorrectMap().get(orderCoForm.getCoAdjustJacketStandardInfo().getCorJkFigureCorrect()); 
			order.setCorJkFigureCorrect(corJkFigureCorrectNm);
		}
		
		// SHIRTS_背ダーツ出し_名
		if("05".equals(productItem)) {
			String corStBackdartsUnpackNm = orderCoForm.getCoOptionShirtStandardInfo().getCorStBackdartsUnpackCorrectMap().get(orderCoForm.getCoAdjustShirtStandardInfo().getCorStBackdartsUnpackCd());
			order.setCorStBackdartsUnpackNm(corStBackdartsUnpackNm);
		}
		
		if(!"05".equals(productItem)) {
			// 商品情報_刺繍サイズ（縦）
			order.setProductEmbroideryLength(null);
			// 商品情報_刺繍サイズ（横）
			order.setProductEmbroideryWidth(null);
		}
		
		// SHIRT_モデル_名
		if("05".equals(productItem)) {
			String stModelNm = orderCoForm.getCoOptionShirtStandardInfo().getOsShirtModelMap().get(orderCoForm.getCoOptionShirtStandardInfo().getOsShirtModel());
			order.setStModelNm(stModelNm);
		}
		
		// COAT_モデル_名
		if("06".equals(productItem)) {
			String ctModelNm = orderCoForm.getCoOptionCoatStandardInfo().getCoatModelMap().get(orderCoForm.getCoOptionCoatStandardInfo().getCoatModel());
			order.setCtModelNm(ctModelNm);
		}
		
		// SHIRTS_着丈_補正値
		String osCasHemLine = orderCoForm.getCoOptionShirtStandardInfo().getOsCasHemLine();
		if("05".equals(productItem) && "0002002".equals(osCasHemLine)) {
			order.setCorStBodylengthCorrect(new BigDecimal(0));
		}
		
		// SHIRT_ボタン位置変更_コード
		String osBtnPosChg = orderCoForm.getCoOptionShirtStandardInfo().getOsBtnPosChg();
		if("05".equals(productItem) && "0002101".equals(osBtnPosChg)) {
			// SHIRT_台襟釦_補正値
			order.setStNeckbandBtnPosChg(null);
			// SHIRT_フロント第1釦_補正値
			order.setStFrtfirstBtnPosChg(null);
			// SHIRT_フロント第2釦_変更値
			order.setStFrtsecondBtnPosChg(null);
		}
		
		// PANTS_膝裏_コード
		String ptKneeinnerTypeCd = order.getPtKneeinnerTypeCd();
		
		// 2PANTS_膝裏_コード
		String pt2KneeinnerTypeCd = order.getPt2KneeinnerTypeCd();
		if("01".equals(productItem)) {
			if("0000202".equals(ptKneeinnerTypeCd)) {
				order.setPtKneeinnerClothCd(null);
				order.setPtKneeinnerClothNm(null);
				order.setPtKneeinnerClothRtPrice(null);
				order.setPtKneeinnerClothWsWage(null);
				order.setPtKneeinnerClothWsPrice(null);
			}
			
			if(productYes.equals(productSparePantsClass)) {
				if("0000202".equals(pt2KneeinnerTypeCd)) {
					order.setPt2KneeinnerClothCd(null);
					order.setPt2KneeinnerClothNm(null);
					order.setPt2KneeinnerClothRtPrice(null);
					order.setPt2KneeinnerClothWsWage(null);
					order.setPt2KneeinnerClothWsPrice(null);
				}
			}
		}
		else if("03".equals(productItem)) {
			if("0000202".equals(ptKneeinnerTypeCd)) {
				order.setPtKneeinnerClothCd(null);
				order.setPtKneeinnerClothNm(null);
				order.setPtKneeinnerClothRtPrice(null);
				order.setPtKneeinnerClothWsWage(null);
				order.setPtKneeinnerClothWsPrice(null);
			}
		}
		
		if("01".equals(productItem)) {
			// PANTS_靴ずれ _コード
			order.setPtShoeSoreCd("1");
			if(productYes.equals(productSparePantsClass)) {
				// 2PANTS_靴ずれ _コード
				order.setPt2ShoeSoreCd("1");
			}
		}
		else if("03".equals(productItem)) {
			// PANTS_靴ずれ _コード
			order.setPtShoeSoreCd("1");
		}
		
		// 標準
		if("9000101".equals(productCategory)) {
			// 標準JACKETステッチ種類
			String ojStitch = orderCoForm.getCoOptionJacketStandardInfo().getOjStitch();
			// 標準PANTSステッチ種類
			String opStitch = orderCoForm.getCoOptionPantsStandardInfo().getOpStitch();
			// 標準GILETステッチ種類
			String ogStitch = orderCoForm.getCoOptionGiletStandardInfo().getOgStitch();
			// 標準2PANTSステッチ種類
			String op2Stitch = orderCoForm.getCoOptionPants2StandardInfo().getOp2Stitch();
			
			if("01".equals(productItem)) {
				if("0002302".equals(ojStitch)) {
					order.setJkStitchPlcRtPrice(null);
					order.setJkStitchPlcWsWage(null);
					order.setJkStitchPlcWsPrice(null);
					order.setJkDblstitchPlcRtPrice(null);
					order.setJkDblstitchPlcWsWage(null);
					order.setJkDblstitchPlcWsPrice(null);
					order.setJkAmfColorRtPrice(null);
					order.setJkAmfColorWsWage(null);
					order.setJkAmfColorWsPrice(null);
				}
				if("0001903".equals(opStitch)) {
					order.setPtStitchPlcRtPrice(null);
					order.setPtStitchPlcWsWage(null);
					order.setPtStitchPlcWsPrice(null);
					order.setPtDblstitchPlcRtPrice(null);
					order.setPtDblstitchPlcWsWage(null);
					order.setPtDblstitchPlcWsPrice(null);
					order.setPtAmfColorRtPrice(null);
					order.setPtAmfColorWsWage(null);
					order.setPtAmfColorWsPrice(null);
				}
				if(productYes.equals(productIs3Piece)) {
					if("0000503".equals(ogStitch)) {
						order.setGlStitchPlcRtPrice(null);
						order.setGlStitchPlcWsWage(null);
						order.setGlStitchPlcWsPrice(null);
						order.setGlDblstitchPlcRtPrice(null);
						order.setGlDblstitchPlcWsWage(null);
						order.setGlDblstitchPlcWsPrice(null);
						order.setGlAmfColorRtPrice(null);
						order.setGlAmfColorWsWage(null);
						order.setGlAmfColorWsPrice(null);
					}
				}
				if(productYes.equals(productSparePantsClass)) {
					if("0001903".equals(op2Stitch)) {
						order.setPt2StitchPlcRtPrice(null);
						order.setPt2StitchPlcWsWage(null);
						order.setPt2StitchPlcWsPrice(null);
						order.setPt2DblstitchPlcRtPrice(null);
						order.setPt2DblstitchPlcWsWage(null);
						order.setPt2DblstitchPlcWsPrice(null);
						order.setPt2AmfColorRtPrice(null);
						order.setPt2AmfColorWsWage(null);
						order.setPt2AmfColorWsPrice(null);
					}
				}
			}
			else if("02".equals(productItem)) {
				if("0002302".equals(ojStitch)) {
					order.setJkStitchPlcRtPrice(null);
					order.setJkStitchPlcWsWage(null);
					order.setJkStitchPlcWsPrice(null);
					order.setJkDblstitchPlcRtPrice(null);
					order.setJkDblstitchPlcWsWage(null);
					order.setJkDblstitchPlcWsPrice(null);
					order.setJkAmfColorRtPrice(null);
					order.setJkAmfColorWsWage(null);
					order.setJkAmfColorWsPrice(null);
				}
			}
			else if("03".equals(productItem)) {
				if("0001903".equals(opStitch)) {
					order.setPtStitchPlcRtPrice(null);
					order.setPtStitchPlcWsWage(null);
					order.setPtStitchPlcWsPrice(null);
					order.setPtDblstitchPlcRtPrice(null);
					order.setPtDblstitchPlcWsWage(null);
					order.setPtDblstitchPlcWsPrice(null);
					order.setPtAmfColorRtPrice(null);
					order.setPtAmfColorWsWage(null);
					order.setPtAmfColorWsPrice(null);
				}
			}
			else if("04".equals(productItem)) {
				if("0000503".equals(ogStitch)) {
					order.setGlStitchPlcRtPrice(null);
					order.setGlStitchPlcWsWage(null);
					order.setGlStitchPlcWsPrice(null);
					order.setGlDblstitchPlcRtPrice(null);
					order.setGlDblstitchPlcWsWage(null);
					order.setGlDblstitchPlcWsPrice(null);
					order.setGlAmfColorRtPrice(null);
					order.setGlAmfColorWsWage(null);
					order.setGlAmfColorWsPrice(null);
				}
			}
		}
	}

	/**
	 * オーダー内容確認画面JACKEのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoStandardJacketMapping(OrderCoForm orderCoForm, Order order) {

		// JACKET_フロント釦数_名
		order.setJkFrtBtnNm(orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCntMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt()));
		// JACKET_ラペルデザイン_名
		order.setJkLapelDesignNm(orderCoForm.getCoOptionJacketStandardInfo().getOjLapelDesignMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjLapelDesign()));
		// JACKET_グレード_名
		order.setJkGradeNm(orderCoForm.getCoOptionJacketStandardInfo().getOjGradeMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjGrade()));
		// JACKET_裏仕様 _名
		order.setJkInnerClothNm(orderCoForm.getCoOptionJacketStandardInfo().getOjGackSpecMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjGackSpec()));
		// JACKET_台場_名
		order.setJkDaibaNm(orderCoForm.getCoOptionJacketStandardInfo().getOjFortMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjFort()));
		// JACKET_襟裏 _名
		order.setJkCollarInnerNm(orderCoForm.getCoOptionJacketStandardInfo().getOjBackCollarMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjBackCollar()));
		// JACKET_襟吊_名
		order.setJkCollarHangNm(orderCoForm.getCoOptionJacketStandardInfo().getOjChainHangeMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjChainHange()));
		// JACKET_ラペル幅 _名
		order.setJkLapelWidthNm(orderCoForm.getCoOptionJacketStandardInfo().getOjLapelWidthMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjLapelWidth()));
		// JACKET_フラワーホール_名
		order.setJkFlowerHoleNm(orderCoForm.getCoOptionJacketStandardInfo().getOjFlowerHoleMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjFlowerHole()));
		// JACKET_胸ポケット _名
		order.setJkBreastPktNm(orderCoForm.getCoOptionJacketStandardInfo().getOjBreastPktMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjBreastPkt()));
		// JACKET_腰ポケット_名
		order.setJkWaistPktNm(orderCoForm.getCoOptionJacketStandardInfo().getOjWaistPktMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjWaistPkt()));
		// JACKET_チェンジポケット_名
		order.setJkChgPktNm(orderCoForm.getCoOptionJacketStandardInfo().getOjChangePktMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjChangePkt()));
		// JACKET_スランテッドポケット_名
		order.setJkSlantedPktNm(orderCoForm.getCoOptionJacketStandardInfo().getOjSlantedPktMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjSlantedPkt()));
		// JACKET_忍びポケット_名
		order.setJkShinobiPktNm(orderCoForm.getCoOptionJacketStandardInfo().getOjCoinPktMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjCoinPkt()));
		// JACKET_袖仕様_名
		order.setJkSleeveTypeNm(orderCoForm.getCoOptionJacketStandardInfo().getOjSleeveSpecMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjSleeveSpec()));
		// JACKET_マニカ_名
		order.setJkManicaNm(orderCoForm.getCoOptionJacketStandardInfo().getOjManicaMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjManica()));
		// JACKET_袖口_名
		order.setJkCuffNm(orderCoForm.getCoOptionJacketStandardInfo().getOjCuffSpecMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjCuffSpec()));
		//JACKET_袖釦_名
		order.setJkSleeveBtnNm(orderCoForm.getCoOptionJacketStandardInfo().getOjSleeveBtnTypeMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjSleeveBtnType()));
		// JACKET_下前胸内ポケット仕様_名
		order.setJkRightInnerPktTypeNm(orderCoForm.getCoOptionJacketStandardInfo().getOjBreastInnerPktMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjBreastInnerPkt()));
		// JACKET_ステッチ種類_名
		order.setJkStitchTypeNm(orderCoForm.getCoOptionJacketStandardInfo().getOjStitchMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjStitch()));
		// JACKET_ベント_名
		order.setJkVentNm(orderCoForm.getCoOptionJacketStandardInfo().getOjVentSpecMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjVentSpec()));
		// JACKET_形状記憶_名
		order.setJkShapeMemoryNm(orderCoForm.getCoOptionJacketStandardInfo().getOjShapeMemoryMap()
				.get(orderCoForm.getCoOptionJacketStandardInfo().getOjShapeMemory()));
	}

	/**
	 * オーダー内容確認画面JACKEのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoTuxedoJacketMapping(OrderCoForm orderCoForm, Order order) {

		// JACKET_フロント釦数_名
		order.setJkFrtBtnNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCntMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt()));
		// JACKET_ラペルデザイン_名
		order.setJkLapelDesignNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjLapelDesignMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjLapelDesign()));
		// JACKET_グレード_名
		order.setJkGradeNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjGradeMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjGrade()));
		// JACKET_裏仕様 _名
		order.setJkInnerClothNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBackSpecMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBackSpec()));
		// JACKET_台場_名
		order.setJkDaibaNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFortMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFort()));
		// JACKET_拝見地_名
		order.setJkLookClothNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjGlossFablicMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjGlossFablic()));
		// JACKET_襟裏 _名
		order.setJkCollarInnerNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBackCollarMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBackCollar()));
		// JACKET_襟吊_名
		order.setJkCollarHangNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjChainHangeMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjChainHange()));
		// JACKET_ラペル幅 _名
		order.setJkLapelWidthNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjLapelWidthMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjLapelWidth()));
		// JACKET_フラワーホール_名
		order.setJkFlowerHoleNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFlowerHoleMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFlowerHole()));
		// JACKET_胸ポケット _名
		order.setJkBreastPktNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBreastPktMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBreastPkt()));
		// JACKET_腰ポケット_名
		order.setJkWaistPktNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjWaistPktMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjWaistPkt()));
		// JACKET_チェンジポケット_名
		order.setJkChgPktNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjChangePktMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjChangePkt()));
		// JACKET_スランテッドポケット_名
		order.setJkSlantedPktNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjSlantedPktMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjSlantedPkt()));
		// JACKET_忍びポケット_名
		order.setJkShinobiPktNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjCoinPktMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjCoinPkt()));
		// JACKET_袖仕様_名
		order.setJkSleeveTypeNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjSleeveSpecMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjSleeveSpec()));
		// JACKET_マニカ_名
		order.setJkManicaNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjManicaMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjManica()));
		// JACKET_袖釦_名
		order.setJkSleeveBtnNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjSleeveBtnTypeMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjSleeveBtnType()));
		// JACKET_袖口_名
		order.setJkCuffNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjCuffSpecMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjCuffSpec()));
		// JACKET_下前胸内ポケット仕様_名
		order.setJkRightInnerPktTypeNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBreastInnerPktMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjBreastInnerPkt()));
		// JACKET_ステッチ種類_名
		order.setJkStitchTypeNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjStitchMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjStitch()));
		// JACKET_ベント_名
		order.setJkVentNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjVentSpecMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjVentSpec()));
		// JACKET_形状記憶_名
		order.setJkShapeMemoryNm(orderCoForm.getCoOptionJacketTuxedoInfo().getTjShapeMemoryMap()
				.get(orderCoForm.getCoOptionJacketTuxedoInfo().getTjShapeMemory()));
	}

	/**
	 * オーダー内容確認画面JACKEのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoWashableJacketMapping(OrderCoForm orderCoForm, Order order) {

		// JACKET_フロント釦数_名
		order.setJkFrtBtnNm(orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCntMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt()));
		// JACKET_ラペルデザイン_名
		order.setJkLapelDesignNm(orderCoForm.getCoOptionJacketWashableInfo().getWjLapelDesignMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjLapelDesign()));
		// JACKET_グレード_名
		order.setJkGradeNm(orderCoForm.getCoOptionJacketWashableInfo().getWjGradeMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjGrade()));
		// JACKET_裏仕様 _名
		order.setJkInnerClothNm(orderCoForm.getCoOptionJacketWashableInfo().getWjBackSpecMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBackSpec()));
		// JACKET_台場_名
		order.setJkDaibaNm(orderCoForm.getCoOptionJacketWashableInfo().getWjFortMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjFort()));
		// JACKET_襟裏 _名
		order.setJkCollarInnerNm(orderCoForm.getCoOptionJacketWashableInfo().getWjBackCollarMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBackCollar()));
		// JACKET_襟吊_名
		order.setJkCollarHangNm(orderCoForm.getCoOptionJacketWashableInfo().getWjChainHangeMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjChainHange()));
		// JACKET_ラペル幅 _名
		order.setJkLapelWidthNm(orderCoForm.getCoOptionJacketWashableInfo().getWjLapelWidthMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjLapelWidth()));
		// JACKET_フラワーホール_名
		order.setJkFlowerHoleNm(orderCoForm.getCoOptionJacketWashableInfo().getWjFlowerHoleMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjFlowerHole()));
		// JACKET_胸ポケット _名
		order.setJkBreastPktNm(orderCoForm.getCoOptionJacketWashableInfo().getWjBreastPktMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBreastPkt()));
		// JACKET_腰ポケット_名
		order.setJkWaistPktNm(orderCoForm.getCoOptionJacketWashableInfo().getWjWaistPktMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjWaistPkt()));
		// JACKET_チェンジポケット_名
		order.setJkChgPktNm(orderCoForm.getCoOptionJacketWashableInfo().getWjChangePktMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjChangePkt()));
		// JACKET_スランテッドポケット_名
		order.setJkSlantedPktNm(orderCoForm.getCoOptionJacketWashableInfo().getWjSlantedPktMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjSlantedPkt()));
		// JACKET_忍びポケット_名
		order.setJkShinobiPktNm(orderCoForm.getCoOptionJacketWashableInfo().getWjCoinPktMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjCoinPkt()));
		// JACKET_袖仕様_名
		order.setJkSleeveTypeNm(orderCoForm.getCoOptionJacketWashableInfo().getWjSleeveSpecMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjSleeveSpec()));
		// JACKET_マニカ_名
		order.setJkManicaNm(orderCoForm.getCoOptionJacketWashableInfo().getWjManicaMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjManica()));
		// JACKET_袖釦_名
		order.setJkSleeveBtnNm(orderCoForm.getCoOptionJacketWashableInfo().getWjSleeveBtnTypeMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjSleeveBtnType()));
		// JACKET_袖口_名
		order.setJkCuffNm(orderCoForm.getCoOptionJacketWashableInfo().getWjCuffSpecMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjCuffSpec()));
		// JACKET_下前胸内ポケット仕様_名
		order.setJkRightInnerPktTypeNm(orderCoForm.getCoOptionJacketWashableInfo().getWjBreastInnerPktMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjBreastInnerPkt()));
		// JACKET_ステッチ種類_名
		order.setJkStitchTypeNm(orderCoForm.getCoOptionJacketWashableInfo().getWjStitchMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjStitch()));
		// JACKET_ベント_名
		order.setJkVentNm(orderCoForm.getCoOptionJacketWashableInfo().getWjVentSpecMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjVentSpec()));
		// JACKET_形状記憶_名
		order.setJkShapeMemoryNm(orderCoForm.getCoOptionJacketWashableInfo().getWjShapeMemoryMap()
				.get(orderCoForm.getCoOptionJacketWashableInfo().getWjShapeMemory()));
	}

	/**
	 * オーダー内容確認画面GILETのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoStandardGiletMapping(OrderCoForm orderCoForm, Order order) {

		// GILET_胸ポケット _名
		order.setGlBreastPktNm(orderCoForm.getCoOptionGiletStandardInfo().getOgBreastPktMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgBreastPkt()));
		// GILET_腰ポケット _名
		order.setGlWaistPktNm(orderCoForm.getCoOptionGiletStandardInfo().getOgWaistPktMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgWaistPkt()));
		// GILET_腰ポケット形状 _名
		order.setGlWaistPktShapeNm(orderCoForm.getCoOptionGiletStandardInfo().getOgWaistPktSpecMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgWaistPktSpec()));
		// GILET_AMFステッチ _名
		order.setGlAmfStitchNm(orderCoForm.getCoOptionGiletStandardInfo().getOgStitchMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgStitch()));
		// GILET_バックベルト _名
		order.setGlBackBeltNm(orderCoForm.getCoOptionGiletStandardInfo().getOgBackBeltMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgBackBelt()));
		// GILET_ウォッチチェーン_名
		order.setGlWatchChainNm(orderCoForm.getCoOptionGiletStandardInfo().getOgWatchChainMap()
				.get(orderCoForm.getCoOptionGiletStandardInfo().getOgWatchChain()));
	}

	/**
	 * オーダー内容確認画面GILETのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoTuxedoGiletMapping(OrderCoForm orderCoForm, Order order) {

		// GILET_胸ポケット _名
		order.setGlBreastPktNm(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBreastPktMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBreastPkt()));
		// GILET_腰ポケット _名
		order.setGlWaistPktNm(orderCoForm.getCoOptionGiletTuxedoInfo().getTgWaistPktMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgWaistPkt()));
		// GILET_腰ポケット形状 _名
		order.setGlWaistPktShapeNm(orderCoForm.getCoOptionGiletTuxedoInfo().getTgWaistPktSpecMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgWaistPktSpec()));
		// GILET_腰ポケット素材 _名
		order.setGlWaistPktClothNm(orderCoForm.getCoOptionGiletTuxedoInfo().getTgWaistPktMateMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgWaistPktMate()));
		// GILET_AMFステッチ _名
		order.setGlAmfStitchNm(orderCoForm.getCoOptionGiletTuxedoInfo().getTgStitchMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgStitch()));
		// GILET_バックベルト _名
		order.setGlBackBeltNm(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBackBeltMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgBackBelt()));
		// GILET_ウォッチチェーン_名
		order.setGlWatchChainNm(orderCoForm.getCoOptionGiletTuxedoInfo().getTgWatchChainMap()
				.get(orderCoForm.getCoOptionGiletTuxedoInfo().getTgWatchChain()));
	}

	/**
	 * オーダー内容確認画面GILETのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoWashableGiletMapping(OrderCoForm orderCoForm, Order order) {

		// GILET_胸ポケット _名
		order.setGlBreastPktNm(orderCoForm.getCoOptionGiletWashableInfo().getWgBreastPktMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBreastPkt()));
		// GILET_腰ポケット _名
		order.setGlWaistPktNm(orderCoForm.getCoOptionGiletWashableInfo().getWgWaistPktMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgWaistPkt()));
		// GILET_腰ポケット形状 _名
		order.setGlWaistPktShapeNm(orderCoForm.getCoOptionGiletWashableInfo().getWgWaistPktSpecMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgWaistPktSpec()));
		// GILET_AMFステッチ _名
		order.setGlAmfStitchNm(orderCoForm.getCoOptionGiletWashableInfo().getWgStitchMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgStitch()));
		// GILET_バックベルト _名
		order.setGlBackBeltNm(orderCoForm.getCoOptionGiletWashableInfo().getWgBackBeltMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgBackBelt()));
		// GILET_ウォッチチェーン_名
		order.setGlWatchChainNm(orderCoForm.getCoOptionGiletWashableInfo().getWgWatchChainMap()
				.get(orderCoForm.getCoOptionGiletWashableInfo().getWgWatchChain()));
	}

	/**
	 * オーダー内容確認画面PANTSのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoStandardPantsMapping(OrderCoForm orderCoForm, Order order) {

		// PANTS_タック_名
		order.setPtTackNm(orderCoForm.getCoOptionPantsStandardInfo().getOpTackMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpTack()));
		// PANTS_膝裏_名
		order.setPtKneeinnerTypeNm(orderCoForm.getCoOptionPantsStandardInfo().getOpKneeBackMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpKneeBack()));
		// PANTS_膝裏素材_名
		order.setPtKneeinnerClothNm(orderCoForm.getCoOptionPantsStandardInfo().getOpKneeBackMateMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpKneeBackMate()));
		// PANTS_フロント仕様_名
		order.setPtFrtTypeNm(orderCoForm.getCoOptionPantsStandardInfo().getOpFrontSpecMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpFrontSpec()));
		// PANTS_パンチェリーナ_名
		order.setPtPancherinaNm(orderCoForm.getCoOptionPantsStandardInfo().getOpPancherinaMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpPancherina()));
		// PANTS_アジャスター_名
		order.setPtAdjusterNm(orderCoForm.getCoOptionPantsStandardInfo().getOpAdjusterMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpAdjuster()));
		// PANTS_ピンループ_名
		order.setPtPinloopNm(orderCoForm.getCoOptionPantsStandardInfo().getOpPinLoopMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpPinLoop()));
		// PANTS_脇ポケット_名
		order.setPtSidePktNm(orderCoForm.getCoOptionPantsStandardInfo().getOpSidePktMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpSidePkt()));
		// PANTS_忍びポケット_名
		order.setPtShinobiPktNm(orderCoForm.getCoOptionPantsStandardInfo().getOpSinobiPktMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpSinobiPkt()));
		// PANTS_コインポケット_名
		order.setPtCoinPktNm(orderCoForm.getCoOptionPantsStandardInfo().getOpCoinPktMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpCoinPkt()));
		// PANTS_フラップ付コインポケット_名
		order.setPtFlapcoinPktNm(orderCoForm.getCoOptionPantsStandardInfo().getOpFlapCoinPktMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpFlapCoinPkt()));
		// PANTS_上前ピスポケット_名
		order.setPtLeftPisPktNm(orderCoForm.getCoOptionPantsStandardInfo().getOpPisPktUfMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpPisPktUf()));
		// PANTS_下前ピスポケット_名
		order.setPtRightPisPktNm(orderCoForm.getCoOptionPantsStandardInfo().getOpPisPktDfMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpPisPktDf()));
		// PANTS_Vカット_名
		order.setPtVCutNm(orderCoForm.getCoOptionPantsStandardInfo().getOpVCutMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpVCut()));
		// PANTS_裾上げ_名
		order.setPtHemUpNm(orderCoForm.getCoOptionPantsStandardInfo().getOpHemUpMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpHemUp()));
		// PANTS_ダブル幅_名
		order.setPtDblWidthNm(orderCoForm.getCoOptionPantsStandardInfo().getOpDoubleWideMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpDoubleWide()));
		// PANTS_AMFステッチ_名
		order.setPtAmfStitchNm(orderCoForm.getCoOptionPantsStandardInfo().getOpStitchMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpStitch()));
		// PANTS_サスペンダー釦 _名
		order.setPtSuspenderBtnNm(orderCoForm.getCoOptionPantsStandardInfo().getOpSuspenderBtnMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpSuspenderBtn()));
		// PANTS_シック（股下補強） _名
		order.setPtChicSlipNm(orderCoForm.getCoOptionPantsStandardInfo().getOpThickMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpThick()));
		// PANTS_エイト（滑り止め） _名
		order.setPtNonSlipNm(orderCoForm.getCoOptionPantsStandardInfo().getOpEightMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpEight()));
		// PANTS_形状記憶 _名
		order.setPtShapeMemoryNm(orderCoForm.getCoOptionPantsStandardInfo().getOpShapeMemoryMap()
				.get(orderCoForm.getCoOptionPantsStandardInfo().getOpShapeMemory()));
	}

	/**
	 * オーダー内容確認画面PANTSのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoTuxedoPantsMapping(OrderCoForm orderCoForm, Order order) {

		// PANTS_タック_名
		order.setPtTackNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpTackMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpTack()));
		// PANTS_膝裏_名
		order.setPtKneeinnerTypeNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpKneeBackMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpKneeBack()));
		// PANTS_膝裏素材_名
		order.setPtKneeinnerClothNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpKneeBackMateMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpKneeBackMate()));
		// PANTS_フロント仕様_名
		order.setPtFrtTypeNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpFrontSpecMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpFrontSpec()));
		// PANTS_パンチェリーナ_名
		order.setPtPancherinaNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpPancherinaMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpPancherina()));
		// PANTS_アジャスター_名
		order.setPtAdjusterNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpAdjusterMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpAdjuster()));
		// PANTS_ピンループ_名
		order.setPtPinloopNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpPinLoopMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpPinLoop()));
		// PANTS_脇ポケット_名
		order.setPtSidePktNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSidePktMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSidePkt()));
		// PANTS_忍びポケット_名
		order.setPtShinobiPktNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSinobiPktMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSinobiPkt()));
		// PANTS_コインポケット_名
		order.setPtCoinPktNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpCoinPktMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpCoinPkt()));
		// PANTS_フラップ付コインポケット_名
		order.setPtFlapcoinPktNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpFlapCoinPktMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpFlapCoinPkt()));
		// PANTS_上前ピスポケット_名
		order.setPtLeftPisPktNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpPisPktUfMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpPisPktUf()));
		// PANTS_下前ピスポケット_名
		order.setPtRightPisPktNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpPisPktDfMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpPisPktDf()));
		// PANTS_Vカット_名
		order.setPtVCutNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpVCutMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpVCut()));
		// PANTS_裾上げ_名
		order.setPtHemUpNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpHemUpMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpHemUp()));
		// PANTS_ダブル幅_名
		order.setPtDblWidthNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpDoubleWideMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpDoubleWide()));
		// PANTS_AMFステッチ_名
		order.setPtAmfStitchNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpStitchMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpStitch()));
		// PANTS_サスペンダー釦 _名
		order.setPtSuspenderBtnNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSuspenderBtnMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSuspenderBtn()));
		// PANTS_シック（股下補強） _名
		order.setPtChicSlipNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpThickMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpThick()));
		// PANTS_エイト（滑り止め） _名
		order.setPtNonSlipNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpEightMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpEight()));
		// PANTS_形状記憶 _名
		order.setPtShapeMemoryNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpShapeMemoryMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpShapeMemory()));
		// PANTS_側章 _名
		order.setPtSideStripeNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSideStripeMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSideStripe()));
		// PANTS_側章幅 _名
		order.setPtSideStripeWidthNm(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSideStripeWidthMap()
				.get(orderCoForm.getCoOptionPantsTuxedoInfo().getTpSideStripeWidth()));
	}

	/**
	 * オーダー内容確認画面PANTSのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoWashablePantsMapping(OrderCoForm orderCoForm, Order order) {

		// PANTS_タック_名
		order.setPtTackNm(orderCoForm.getCoOptionPantsWashableInfo().getWpTackMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpTack()));
		// PANTS_膝裏_名
		order.setPtKneeinnerTypeNm(orderCoForm.getCoOptionPantsWashableInfo().getWpKneeBackMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpKneeBack()));
		// PANTS_膝裏素材_名
		order.setPtKneeinnerClothNm(orderCoForm.getCoOptionPantsWashableInfo().getWpKneeBackMateMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpKneeBackMate()));
		// PANTS_フロント仕様_名
		order.setPtFrtTypeNm(orderCoForm.getCoOptionPantsWashableInfo().getWpFrontSpecMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpFrontSpec()));
		// PANTS_パンチェリーナ_名
		order.setPtPancherinaNm(orderCoForm.getCoOptionPantsWashableInfo().getWpPancherinaMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpPancherina()));
		// PANTS_アジャスター_名
		order.setPtAdjusterNm(orderCoForm.getCoOptionPantsWashableInfo().getWpAdjusterMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpAdjuster()));
		// PANTS_ピンループ_名
		order.setPtPinloopNm(orderCoForm.getCoOptionPantsWashableInfo().getWpPinLoopMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpPinLoop()));
		// PANTS_脇ポケット_名
		order.setPtSidePktNm(orderCoForm.getCoOptionPantsWashableInfo().getWpSidePktMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpSidePkt()));
		// PANTS_忍びポケット_名
		order.setPtShinobiPktNm(orderCoForm.getCoOptionPantsWashableInfo().getWpSinobiPktMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpSinobiPkt()));
		// PANTS_コインポケット_名
		order.setPtCoinPktNm(orderCoForm.getCoOptionPantsWashableInfo().getWpCoinPktMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpCoinPkt()));
		// PANTS_フラップ付コインポケット_名
		order.setPtFlapcoinPktNm(orderCoForm.getCoOptionPantsWashableInfo().getWpFlapCoinPktMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpFlapCoinPkt()));
		// PANTS_上前ピスポケット_名
		order.setPtLeftPisPktNm(orderCoForm.getCoOptionPantsWashableInfo().getWpPisPktUfMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpPisPktUf()));
		// PANTS_下前ピスポケット_名
		order.setPtRightPisPktNm(orderCoForm.getCoOptionPantsWashableInfo().getWpPisPktDfMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpPisPktDf()));
		// PANTS_Vカット_名
		order.setPtVCutNm(orderCoForm.getCoOptionPantsWashableInfo().getWpVCutMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpVCut()));
		// PANTS_裾上げ_名
		order.setPtHemUpNm(orderCoForm.getCoOptionPantsWashableInfo().getWpHemUpMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpHemUp()));
		// PANTS_ダブル幅_名
		order.setPtDblWidthNm(orderCoForm.getCoOptionPantsWashableInfo().getWpDoubleWideMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpDoubleWide()));
		// PANTS_AMFステッチ_名
		order.setPtAmfStitchNm(orderCoForm.getCoOptionPantsWashableInfo().getWpStitchMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpStitch()));
		// PANTS_サスペンダー釦 _名
		order.setPtSuspenderBtnNm(orderCoForm.getCoOptionPantsWashableInfo().getWpSuspenderBtnMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpSuspenderBtn()));
		// PANTS_シック（股下補強） _名
		order.setPtChicSlipNm(orderCoForm.getCoOptionPantsWashableInfo().getWpThickMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpThick()));
		// PANTS_エイト（滑り止め） _名
		order.setPtNonSlipNm(orderCoForm.getCoOptionPantsWashableInfo().getWpEightMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpEight()));
		// PANTS_形状記憶 _名
		order.setPtShapeMemoryNm(orderCoForm.getCoOptionPantsWashableInfo().getWpShapeMemoryMap()
				.get(orderCoForm.getCoOptionPantsWashableInfo().getWpShapeMemory()));
	}

	/**
	 * オーダー内容確認画面PANTS2のMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoStandardPants2Mapping(OrderCoForm orderCoForm, Order order) {

		// 2PANTS_タック_名
		order.setPt2TackNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2TackMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2Tack()));
		// 2PANTS_膝裏_名
		order.setPt2KneeinnerTypeNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2KneeBackMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2KneeBack()));
		// 2PANTS_膝裏素材_名
		order.setPt2KneeinnerClothNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2KneeBackMateMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2KneeBackMate()));
		// 2PANTS_フロント仕様_名
		order.setPt2FrtTypeNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2FrontSpecMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2FrontSpec()));
		// 2PANTS_パンチェリーナ_名
		order.setPt2PancherinaNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2PancherinaMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2Pancherina()));
		// 2PANTS_アジャスター_名
		order.setPt2AdjusterNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2AdjusterMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2Adjuster()));
		// 2PANTS_ピンループ_名
		order.setPt2PinloopNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2PinLoopMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2PinLoop()));
		// 2PANTS_脇ポケット_名
		order.setPt2SidePktNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2SidePktMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2SidePkt()));
		// 2PANTS_忍びポケット_名
		order.setPt2ShinobiPktNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2SinobiPktMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2SinobiPkt()));
		// 2PANTS_コインポケット_名
		order.setPt2CoinPktNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2CoinPktMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2CoinPkt()));
		// 2PANTS_フラップ付コインポケット_名
		order.setPt2FlapcoinPktNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2FlapCoinPktMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2FlapCoinPkt()));
		// 2PANTS_上前ピスポケット_名
		order.setPt2LeftPisPktNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2PisPktUfMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2PisPktUf()));
		// 2PANTS_下前ピスポケット_名
		order.setPt2RightPisPktNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2PisPktDfMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2PisPktDf()));
		// 2PANTS_Vカット_名
		order.setPt2VCutNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2VCutMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2VCut()));
		// 2PANTS_裾上げ_名
		order.setPt2HemUpNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2HemUpMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2HemUp()));
		// 2PANTS_ダブル幅_名
		order.setPt2DblWidthNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2DoubleWideMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2DoubleWide()));
		// 2PANTS_AMFステッチ_名
		order.setPt2AmfStitchNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2StitchMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2Stitch()));
		// 2PANTS_サスペンダー釦 _名
		order.setPt2SuspenderBtnNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2SuspenderBtnMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2SuspenderBtn()));
		// 2PANTS_シック（股下補強） _名
		order.setPt2ChicSlipNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2ThickMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2Thick()));
		// 2PANTS_エイト（滑り止め） _名
		order.setPt2NonSlipNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2EightMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2Eight()));
		// 2PANTS_形状記憶 _名
		order.setPt2ShapeMemoryNm(orderCoForm.getCoOptionPants2StandardInfo().getOp2ShapeMemoryMap()
				.get(orderCoForm.getCoOptionPants2StandardInfo().getOp2ShapeMemory()));
	}

	/**
	 * オーダー内容確認画面PANTS2のMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoTuxedoPants2Mapping(OrderCoForm orderCoForm, Order order) {

		// 2PANTS_タック_名
		order.setPt2TackNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2TackMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2Tack()));
		// 2PANTS_膝裏_名
		order.setPt2KneeinnerTypeNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2KneeBackMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2KneeBack()));
		// 2PANTS_膝裏素材_名
		order.setPt2KneeinnerClothNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2KneeBackMateMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2KneeBackMate()));
		// 2PANTS_フロント仕様_名
		order.setPt2FrtTypeNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2FrontSpecMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2FrontSpec()));
		// 2PANTS_パンチェリーナ_名
		order.setPt2PancherinaNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2PancherinaMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2Pancherina()));
		// 2PANTS_アジャスター_名
		order.setPt2AdjusterNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2AdjusterMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2Adjuster()));
		// 2PANTS_ピンループ_名
		order.setPt2PinloopNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2PinLoopMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2PinLoop()));
		// 2PANTS_脇ポケット_名
		order.setPt2SidePktNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SidePktMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SidePkt()));
		// 2PANTS_忍びポケット_名
		order.setPt2ShinobiPktNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SinobiPktMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SinobiPkt()));
		// 2PANTS_コインポケット_名
		order.setPt2CoinPktNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2CoinPktMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2CoinPkt()));
		// 2PANTS_フラップ付コインポケット_名
		order.setPt2FlapcoinPktNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2FlapCoinPktMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2FlapCoinPkt()));
		// 2PANTS_上前ピスポケット_名
		order.setPt2LeftPisPktNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2PisPktUfMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2PisPktUf()));
		// 2PANTS_下前ピスポケット_名
		order.setPt2RightPisPktNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2PisPktDfMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2PisPktDf()));
		// 2PANTS_Vカット_名
		order.setPt2VCutNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2VCutMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2VCut()));
		// 2PANTS_裾上げ_名
		order.setPt2HemUpNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2HemUpMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2HemUp()));
		// 2PANTS_ダブル幅_名
		order.setPt2DblWidthNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2DoubleWideMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2DoubleWide()));
		// 2PANTS_AMFステッチ_名
		order.setPt2AmfStitchNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2StitchMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2Stitch()));
		// 2PANTS_サスペンダー釦 _名
		order.setPt2SuspenderBtnNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SuspenderBtnMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SuspenderBtn()));
		// 2PANTS_シック（股下補強） _名
		order.setPt2ChicSlipNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ThickMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2Thick()));
		// 2PANTS_エイト（滑り止め） _名
		order.setPt2NonSlipNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2EightMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2Eight()));
		// 2PANTS_形状記憶 _名
		order.setPt2ShapeMemoryNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ShapeMemoryMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2ShapeMemory()));
		// 2PANTS_側章 _名
		order.setPt2SideStripeNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SideStripeMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SideStripe()));
		// 2PANTS_側章幅 _名
		order.setPt2SideStripeWidthNm(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SideStripeWidthMap()
				.get(orderCoForm.getCoOptionPants2TuxedoInfo().getTp2SideStripeWidth()));
	}

	/**
	 * オーダー内容確認画面PANTS2のMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoWashablePants2Mapping(OrderCoForm orderCoForm, Order order) {

		// 2PANTS_タック_名
		order.setPt2TackNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2TackMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2Tack()));
		// 2PANTS_膝裏_名
		order.setPt2KneeinnerTypeNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2KneeBackMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2KneeBack()));
		// 2PANTS_膝裏素材_名
		order.setPt2KneeinnerClothNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2KneeBackMateMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2KneeBackMate()));
		// 2PANTS_フロント仕様_名
		order.setPt2FrtTypeNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2FrontSpecMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2FrontSpec()));
		// 2PANTS_パンチェリーナ_名
		order.setPt2PancherinaNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2PancherinaMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2Pancherina()));
		// 2PANTS_アジャスター_名
		order.setPt2AdjusterNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2AdjusterMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2Adjuster()));
		// 2PANTS_ピンループ_名
		order.setPt2PinloopNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2PinLoopMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2PinLoop()));
		// 2PANTS_脇ポケット_名
		order.setPt2SidePktNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2SidePktMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2SidePkt()));
		// 2PANTS_忍びポケット_名
		order.setPt2ShinobiPktNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2SinobiPktMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2SinobiPkt()));
		// 2PANTS_コインポケット_名
		order.setPt2CoinPktNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2CoinPktMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2CoinPkt()));
		// 2PANTS_フラップ付コインポケット_名
		order.setPt2FlapcoinPktNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2FlapCoinPktMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2FlapCoinPkt()));
		// 2PANTS_上前ピスポケット_名
		order.setPt2LeftPisPktNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2PisPktUfMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2PisPktUf()));
		// 2PANTS_下前ピスポケット_名
		order.setPt2RightPisPktNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2PisPktDfMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2PisPktDf()));
		// 2PANTS_Vカット_名
		order.setPt2VCutNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2VCutMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2VCut()));
		// 2PANTS_裾上げ_名
		order.setPt2HemUpNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2HemUpMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2HemUp()));
		// 2PANTS_ダブル幅_名
		order.setPt2DblWidthNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2DoubleWideMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2DoubleWide()));
		// 2PANTS_AMFステッチ_名
		order.setPt2AmfStitchNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2StitchMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2Stitch()));
		// 2PANTS_サスペンダー釦 _名
		order.setPt2SuspenderBtnNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2SuspenderBtnMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2SuspenderBtn()));
		// 2PANTS_シック（股下補強） _名
		order.setPt2ChicSlipNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2ThickMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2Thick()));
		// 2PANTS_エイト（滑り止め） _名
		order.setPt2NonSlipNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2EightMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2Eight()));
		// 2PANTS_形状記憶 _名
		order.setPt2ShapeMemoryNm(orderCoForm.getCoOptionPants2WashableInfo().getWp2ShapeMemoryMap()
				.get(orderCoForm.getCoOptionPants2WashableInfo().getWp2ShapeMemory()));
	}

	/**
	 * オーダー内容確認画面SHIRTのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoStandardShirtMapping(OrderCoForm orderCoForm, Order order) {

		// SHIRT_襟型_名
		order.setStCollarTypeNm(orderCoForm.getCoOptionShirtStandardInfo().getOsChainModelMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsChainModel()));
		// SHIRT_カフス_名
		order.setStCuffsNm(orderCoForm.getCoOptionShirtStandardInfo().getOsCuffsMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsCuffs()));
		// SHIRT_コンバーチブル_名
		order.setStConvertibleNm(orderCoForm.getCoOptionShirtStandardInfo().getOsConvertibleMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsConvertible()));
		// SHIRT_アジャスト釦_名
		order.setStAdjusterBtnNm(orderCoForm.getCoOptionShirtStandardInfo().getOsAdjustBtnMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsAdjustBtn()));
		// SHIRT_クレリック仕様_名
		order.setStClericNm(orderCoForm.getCoOptionShirtStandardInfo().getOsClericSpecMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsClericSpec()));
		// SHIRT_ダブルカフス仕様_名
		order.setStDblCuffsNm(orderCoForm.getCoOptionShirtStandardInfo().getOsDblCuffMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsDblCuff()));
		// SHIRT_カフスボタン追加_名
		order.setStCuffsBtnNm(orderCoForm.getCoOptionShirtStandardInfo().getOsAddCuffMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsAddCuff()));
		// SHIRT_釦素材_名
		order.setStBtnMaterialNm(orderCoForm.getCoOptionShirtStandardInfo().getOsBtnMateMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsBtnMate()));
		// SHIRT_タブ釦_名
		order.setStDblBtnNm(orderCoForm.getCoOptionShirtStandardInfo().getOsTabBtnMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsTabBtn()));
		// SHIRT_ガントレットボタン位置_名
		order.setStGauntletBtnPosNm(orderCoForm.getCoOptionShirtStandardInfo().getOsGaletteBtnPosMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsGaletteBtnPos()));
		// SHIRT_ピンホールピン_名
		order.setStPinholePinNm(orderCoForm.getCoOptionShirtStandardInfo().getOsPinHolePinMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsPinHolePin()));
		// SHIRT_胸ポケット置_名
		order.setStBreastPktNm(orderCoForm.getCoOptionShirtStandardInfo().getOsBreastPkMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsBreastPk()));
		// SHIRT_胸ポケット大きさ_名
		order.setStBreastSizeNm(orderCoForm.getCoOptionShirtStandardInfo().getOsBreastPkSizeMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsBreastPkSize()));
		// SHIRT_フロントデザイン_名
		order.setStFrtDesignNm(orderCoForm.getCoOptionShirtStandardInfo().getOsFrontDesignMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsFrontDesign()));
		// SHIRT_ピンタックブザム_名
		order.setStPintuckBosomNm(orderCoForm.getCoOptionShirtStandardInfo().getOsPinTackMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsPinTack()));
		// SHIRT_ステッチ_名
		order.setStStitchNm(orderCoForm.getCoOptionShirtStandardInfo().getOsStitchMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsStitch()));
		// SHIRT_カラーキーパー_名
		order.setStColarKeeperNm(orderCoForm.getCoOptionShirtStandardInfo().getOsColorKeeperMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsColorKeeper()));
		// SHIRT_ボタンホール色変更_名
		order.setStBtnholeColorNm(orderCoForm.getCoOptionShirtStandardInfo().getOsBhColorMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsBhColor()));
		// SHIRT_ボタン付け糸色変更_名
		order.setStBtnthreadColorNm(orderCoForm.getCoOptionShirtStandardInfo().getOsByColorMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsByColor()));
		// SHIRT_カジュアルヘムライン仕様_名
		order.setStCasualHemlineNm(orderCoForm.getCoOptionShirtStandardInfo().getOsCasHemLineMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsCasHemLine()));
		// SHIRT_ボタン位置変更_名
		order.setStBtnposChgNm(orderCoForm.getCoOptionShirtStandardInfo().getOsBtnPosChgMap()
				.get(orderCoForm.getCoOptionShirtStandardInfo().getOsBtnPosChg()));
		// SHIRT_台襟釦_名
		order.setStNeckbandBtnChgNm(orderCoForm.getCoOptionShirtStandardInfo().getOsBtnPosChgCollar());
		// SHIRT_フロント第1釦_名
		order.setStFrtfirstBtnChgNm(orderCoForm.getCoOptionShirtStandardInfo().getOsBtnPosChgFront1());
		// SHIRT_フロント第2釦_名
		order.setStFrtsecondBtnChgNm(orderCoForm.getCoOptionShirtStandardInfo().getOsBtnPosChgFront2());
	}

	/**
	 * オーダー内容確認画面COATのMapの値とorderの対応フィールドのマッピング
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderCoStandardCoatMapping(OrderCoForm orderCoForm, Order order) {

		// COAT_ラペルデザイン_名
		order.setCtLapelDesignNm(orderCoForm.getCoOptionCoatStandardInfo().getOcLapelDesignMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcLapelDesign()));
		// COAT_袖仕様_名
		order.setCtSleeveTypeNm(orderCoForm.getCoOptionCoatStandardInfo().getOcSleeveSpecMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcSleeveSpec()));
		// COAT_腰ポケット_名
		order.setCtWaistPktNm(orderCoForm.getCoOptionCoatStandardInfo().getOcWaistPktMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcWaistPkt()));
		// COAT_チェンジポケット_名
		order.setCtChgPktNm(orderCoForm.getCoOptionCoatStandardInfo().getOcChangePktMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcChangePkt()));
		// COAT_スランテッドポケット_名
		order.setCtSlantedPktNm(orderCoForm.getCoOptionCoatStandardInfo().getOcSlantedPktMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcSlantedPkt()));
		// COAT_ベント_名
		order.setCtVentNm(orderCoForm.getCoOptionCoatStandardInfo().getOcVentSpecMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcVentSpec()));
		// COAT_フロント釦数_名
		order.setCtFrtBtnNm(orderCoForm.getCoOptionCoatStandardInfo().getOcFrontBtnCntMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcFrontBtnCnt()));
		// COAT_袖口_名
		order.setCtCuffNm(orderCoForm.getCoOptionCoatStandardInfo().getOcCuffSpecMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcCuffSpec()));
		// COAT_袖釦_名
		order.setCtSleeveBtnNm(orderCoForm.getCoOptionCoatStandardInfo().getOcSleeveBtnTypeMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcSleeveBtnType()));
		// COAT_バックベルト_名
		order.setCtBackBeltNm(orderCoForm.getCoOptionCoatStandardInfo().getOcBackBeltMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcBackBelt()));
		// COAT_襟吊_名
		order.setCtCollarHangNm(orderCoForm.getCoOptionCoatStandardInfo().getOcChainHangeMap()
				.get(orderCoForm.getCoOptionCoatStandardInfo().getOcChainHange()));

	}

	/**
	 * オーダーCO内容確認画面標準JACKETのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectStandardMaterialName
	 * @param order
	 */
	public void orderCoStandardJkNameMapping(Map<String, String> selectStandardMaterialName, Order order) {

		// JACKETの胴裏素材Name表示
		String ojBodyBackMateName = selectStandardMaterialName.get("ojBodyBackMateStkNo");
		order.setJkInnerBodyClothNm(ojBodyBackMateName);

		// JACKETの袖裏素材Name表示
		String ojCuffBackMateName = selectStandardMaterialName.get("ojCuffBackMateStkNo");
		order.setJkInnerSleeveClothNm(ojCuffBackMateName);

		// JACKETの釦素材Name表示
		String ojBtnMateName = selectStandardMaterialName.get("ojBtnMateStkNo");
		order.setJkBtnMaterialNm(ojBtnMateName);
	}

	/**
	 * オーダーCO内容確認画面タキシードJACKETのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectTuxedoMaterialName
	 * @param order
	 */
	public void orderCoTuxedoJkNameMapping(Map<String, String> selectTuxedoMaterialName, Order order) {

		// JACKETの胴裏素材Name表示
		String tjBodyBackMateName = selectTuxedoMaterialName.get("tjBodyBackMateStkNo");
		order.setJkInnerBodyClothNm(tjBodyBackMateName);

		// JACKETの袖裏素材Name表示
		String tjCuffBackMateName = selectTuxedoMaterialName.get("tjCuffBackMateStkNo");
		order.setJkInnerSleeveClothNm(tjCuffBackMateName);

		// JACKETの釦素材Name表示
		String tjBtnMateName = selectTuxedoMaterialName.get("tjBtnMateStkNo");
		order.setJkBtnMaterialNm(tjBtnMateName);
	}

	/**
	 * オーダーCO内容確認画面ウォッシャブルJACKETのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectWashableMaterialName
	 * @param order
	 */
	public void orderCoWashableJkNameMapping(Map<String, String> selectWashableMaterialName, Order order) {

		// JACKETの胴裏素材Name表示
		String wjBodyBackMateName = selectWashableMaterialName.get("wjBodyBackMateStkNo");
		order.setJkInnerBodyClothNm(wjBodyBackMateName);

		// JACKETの袖裏素材Name表示
		String wjCuffBackMateName = selectWashableMaterialName.get("wjCuffBackMateStkNo");
		order.setJkInnerSleeveClothNm(wjCuffBackMateName);

		// JACKETの釦素材Name表示
		String wjBtnMateName = selectWashableMaterialName.get("wjBtnMateStkNo");
		order.setJkBtnMaterialNm(wjBtnMateName);
	}

	/**
	 * オーダーCO内容確認画面標準GILETのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectStandardMaterialName
	 * @param order
	 */
	public void orderCoStandardGlNameMapping(Map<String, String> selectStandardMaterialName, Order order) {

		// GILETの背裏地素材Name表示
		String ogBackLiningMateName = selectStandardMaterialName.get("ogBackLiningMateStkNo");
		order.setGlBackClothNm(ogBackLiningMateName);

		// GILETの内側裏地素材Name表示
		String ogInsideLiningMateName = selectStandardMaterialName.get("ogInsideLiningMateStkNo");
		order.setGlInnnerClothNm(ogInsideLiningMateName);

		// GILETのフロント釦Name表示
		String ogFrontBtnMateName = selectStandardMaterialName.get("ogFrontBtnMateStkNo");
		order.setGlFrtBtnNm(ogFrontBtnMateName);
	}

	/**
	 * オーダーCO内容確認画面タキシードGILETのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectTuxedoMaterialName
	 * @param order
	 */
	public void orderCoTuxedoGlNameMapping(Map<String, String> selectTuxedoMaterialName, Order order) {

		// GILETの背裏地素材Name表示
		String tgBackLiningMateName = selectTuxedoMaterialName.get("tgBackLiningMateStkNo");
		order.setGlBackClothNm(tgBackLiningMateName);

		// GILETの内側裏地素材Name表示
		String tgInsideLiningMateName = selectTuxedoMaterialName.get("tgInsideLiningMateStkNo");
		order.setGlInnnerClothNm(tgInsideLiningMateName);

		// GILETのフロント釦Name表示
		String tgFrontBtnMateName = selectTuxedoMaterialName.get("tgFrontBtnMateStkNo");
		order.setGlFrtBtnNm(tgFrontBtnMateName);
	}

	/**
	 * オーダーCO内容確認画面ウォッシャブルGILETのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectWashableMaterialName
	 * @param order
	 */
	public void orderCoWashableGlNameMapping(Map<String, String> selectWashableMaterialName, Order order) {

		// GILETの背裏地素材Name表示
		String wgBackLiningMateName = selectWashableMaterialName.get("wgBackLiningMateStkNo");
		order.setGlBackClothNm(wgBackLiningMateName);

		// GILETの内側裏地素材Name表示
		String wgInsideLiningMateName = selectWashableMaterialName.get("wgInsideLiningMateStkNo");
		order.setGlInnnerClothNm(wgInsideLiningMateName);

		// GILETのフロント釦Name表示
		String wgFrontBtnMateName = selectWashableMaterialName.get("wgFrontBtnMateStkNo");
		order.setGlFrtBtnNm(wgFrontBtnMateName);
	}

	/**
	 * オーダーCO内容確認画面標準PNATSのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectStandardMaterialName
	 * @param order
	 */
	public void orderCoStandardPtNameMapping(Map<String, String> selectStandardMaterialName, Order order) {

		// PANTSの釦素材Name表示
		String opBtnMateName = selectStandardMaterialName.get("opBtnMateStkNo");
		order.setPtBtnMaterialNm(opBtnMateName);
	}

	/**
	 * オーダーCO内容確認画面タキシードPNATSのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectTuxedoMaterialName
	 * @param order
	 */
	public void orderCoTuxedoPtNameMapping(Map<String, String> selectTuxedoMaterialName, Order order) {

		// PANTSの釦素材Name表示
		String tpBtnMateName = selectTuxedoMaterialName.get("tpBtnMateStkNo");
		order.setPtBtnMaterialNm(tpBtnMateName);
	}

	/**
	 * オーダーCO内容確認画面ウォッシャブルPNATSのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectWashableMaterialName
	 * @param order
	 */
	public void orderCoWashablePtNameMapping(Map<String, String> selectWashableMaterialName, Order order) {

		// PANTSの釦素材Name表示
		String wpBtnMateName = selectWashableMaterialName.get("wpBtnMateStkNo");
		order.setPtBtnMaterialNm(wpBtnMateName);
	}

	/**
	 * オーダーCO内容確認画面標準PNATS2のoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectStandardMaterialName
	 * @param order
	 */
	public void orderCoStandardPt2NameMapping(Map<String, String> selectStandardMaterialName, Order order) {

		// PANTS（2本目）の釦素材Name表示
		String op2BtnMateName = selectStandardMaterialName.get("op2BtnMateStkNo");
		order.setPt2BtnMaterialNm(op2BtnMateName);
	}

	/**
	 * オーダーCO内容確認画面タキシードPNATS2のoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectTuxedoMaterialName
	 * @param order
	 */
	public void orderCoTuxedoPt2NameMapping(Map<String, String> selectTuxedoMaterialName, Order order) {

		// PANTS（2本目）の釦素材Name表示
		String tp2BtnMateName = selectTuxedoMaterialName.get("tp2BtnMateStkNo");
		order.setPt2BtnMaterialNm(tp2BtnMateName);
	}

	/**
	 * オーダーCO内容確認画面ウォッシャブルPNATS2のoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectWashableMaterialName
	 * @param order
	 */
	public void orderCoWashablePt2NameMapping(Map<String, String> selectWashableMaterialName, Order order) {

		// PANTS（2本目）の釦素材Name表示
		String wp2BtnMateName = selectWashableMaterialName.get("wp2BtnMateStkNo");
		order.setPt2BtnMaterialNm(wp2BtnMateName);
	}

	/**
	 * オーダーCO内容確認画面標準COATのoption_branch_detail_nameとorderの対応フィールドのマッピング
	 * 
	 * @param selectStandardMaterialName
	 * @param order
	 */
	public void orderCoStandardCtNameMapping(Map<String, String> selectStandardMaterialName, Order order) {

		// COATの胴裏地Name表示
		String ocBodyBackMateName = selectStandardMaterialName.get("ocBodyBackMateStkNo");
		order.setCtInnerBodyClothNm(ocBodyBackMateName);

		// COATの袖裏地Name表示
		String ocCuffBackMateName = selectStandardMaterialName.get("ocCuffBackMateStkNo");
		order.setCtInnerSleeveClothNm(ocCuffBackMateName);

		// COATの釦素材Name表示
		String ocFrontBtnMateName = selectStandardMaterialName.get("ocFrontBtnMateStkNo");
		order.setCtBtnMaterialNm(ocFrontBtnMateName);
	}

	public void orderMappingLogOn(OrderCoForm orderCoForm, Order order, SessionContent sessionContent) {
		// 業態
		order.setStoreBrandCode(sessionContent.getStoreBrandCode());

		// 店舗コード
		order.setShopCode(sessionContent.getBelongCode());

		order.setStoreNm(sessionContent.getBelongName());

		// 理論在庫チェック
		order.setTheoreticalStockCheck(IS_NOT_THEORETICAL_STOCKCECK);

		// 工場ステータス
		order.setMakerFactoryStatus(FACTORY_STATUSF0);

		// 取り消しフラグ
		order.setIsCancelled(IS_NOT_CANCELLED);

		// 工場自動連携ステータス
		order.setSend2factoryStatus(SEND2FACTORY_STATUS0);

		order.setCreatedUserId(sessionContent.getUserId());
		order.setCreatedAt(new Date());
		order.setUpdatedAt(new Date());
		order.setUpdatedUserId(sessionContent.getUserId());
		order.setVersion((short) 0);

		// お客様氏名
		order.setCustNm(null);

		// お客様情報_フリガナ
		order.setCustKanaNm(null);

		// お客様備考
		order.setCustRemark(orderCoForm.getCoCustomerMessageInfo().getCustRemark().replaceAll("\\n", ""));

		// 注文承り日
		order.setProductOrderdDate(new Date());

		// 商品情報_刺繍ネーム、商品情報_刺繍書体、商品情報_刺繍糸色はnull値の判定
		String productEmbroideryNecessity = orderCoForm.getProductEmbroideryNecessity();
		if ("0".equals(productEmbroideryNecessity)) {
			order.setProductEmbroideryNm(null);
			order.setProductEmbroideryFont(null);
			order.setProductEmbroideryThreadColor(null);
		}

		// PANTS_ダブル幅についての項目はnull値の判定
		String opHemUp = orderCoForm.getCoOptionPantsStandardInfo().getOpHemUp();
		if ("0001701".equals(opHemUp) || "0001704".equals(opHemUp)) {
			order.setPtDblWidthCd(null);
			order.setPtDblWidthNm(null);
			order.setPtDblWidthRtPrice(null);
			order.setPtDblWidthWsWage(null);
			order.setPtDblWidthWsPrice(null);
		}

		// PANTS2_ダブル幅についての項目はnull値の判定
		String op2HemUp = orderCoForm.getCoOptionPants2StandardInfo().getOp2HemUp();
		if ("0001701".equals(op2HemUp) || "0001704".equals(op2HemUp)) {
			order.setPt2DblWidthCd(null);
			order.setPt2DblWidthNm(null);
			order.setPt2DblWidthRtPrice(null);
			order.setPt2DblWidthWsWage(null);
			order.setPt2DblWidthWsPrice(null);
		}
	}

	public void orderMappingLogOn(OrderCoForm orderCoForm, Order order, SessionContent sessionContent,
			Order orderIsExist) {
		if (orderIsExist != null) {
			// 商品部の場合
			if ("02".equals(sessionContent.getAuthority())) {
				// 業態
				order.setStoreBrandCode(orderIsExist.getStoreBrandCode());
				// 店舗コード
				order.setShopCode(orderIsExist.getShopCode());

				order.setStoreNm(orderIsExist.getStoreNm());
			} else {
				order.setStoreBrandCode(sessionContent.getStoreBrandCode());

				order.setShopCode(sessionContent.getBelongCode());

				order.setStoreNm(sessionContent.getBelongName());
			}

			// オーダーパターン
			order.setOrderPattern(orderIsExist.getOrderPattern());
			// 取り消しフラグ
			order.setIsCancelled(orderIsExist.getIsCancelled());

			// 最終更新者
			order.setUpdatedUserId(sessionContent.getUserId());

			// 工場ステータス 生産開始前
			order.setMakerFactoryStatus(orderIsExist.getMakerFactoryStatus());

			// 登録日時
			order.setCreatedAt(orderIsExist.getCreatedAt());

			// 登録者
			order.setCreatedUserId(orderIsExist.getCreatedUserId());

			// 工場自動連携ステータス
			order.setSend2factoryStatus(orderIsExist.getSend2factoryStatus());

			// 理論在庫チェック
			order.setTheoreticalStockCheck(orderIsExist.getTheoreticalStockCheck());

			// 最終更新日時
			order.setUpdatedAt(new Date());

			// 最終更新者
			order.setUpdatedUserId(sessionContent.getUserId());

		} else {
			// 業態
			order.setStoreBrandCode(sessionContent.getStoreBrandCode());

			// 店舗コード
			order.setShopCode(sessionContent.getBelongCode());

			order.setStoreNm(sessionContent.getBelongName());

			// 理論在庫チェック
			order.setTheoreticalStockCheck(IS_NOT_THEORETICAL_STOCKCECK);

			// 工場ステータス
			order.setMakerFactoryStatus(FACTORY_STATUSF0);

			// 取り消しフラグ
			order.setIsCancelled(IS_NOT_CANCELLED);

			// 工場自動連携ステータス
			order.setSend2factoryStatus(SEND2FACTORY_STATUS0);

			order.setCreatedUserId(sessionContent.getUserId());
			order.setCreatedAt(new Date());
			order.setUpdatedAt(new Date());
			order.setUpdatedUserId(sessionContent.getUserId());
			order.setVersion((short) 0);
		}

		// お客様氏名
		order.setCustNm(null);

		// お客様情報_フリガナ
		order.setCustKanaNm(null);

		// お客様備考
		order.setCustRemark(orderCoForm.getCoCustomerMessageInfo().getCustRemark().replaceAll("\\n", ""));

		// 注文承り日
		order.setProductOrderdDate(new Date());

		// 商品情報_刺繍ネーム、商品情報_刺繍書体、商品情報_刺繍糸色はnull値の判定
		String productEmbroideryNecessity = orderCoForm.getProductEmbroideryNecessity();
		if ("0".equals(productEmbroideryNecessity)) {
			order.setProductEmbroideryNm(null);
			order.setProductEmbroideryFont(null);
			order.setProductEmbroideryThreadColor(null);
		}

		// PANTS_ダブル幅についての項目はnull値の判定
		String opHemUp = orderCoForm.getCoOptionPantsStandardInfo().getOpHemUp();
		if ("0001701".equals(opHemUp) || "0001704".equals(opHemUp)) {
			order.setPtDblWidthCd(null);
			order.setPtDblWidthNm(null);
			order.setPtDblWidthRtPrice(null);
			order.setPtDblWidthWsWage(null);
			order.setPtDblWidthWsPrice(null);
		}

		// PANTS2_ダブル幅についての項目はnull値の判定
		String op2HemUp = orderCoForm.getCoOptionPants2StandardInfo().getOp2HemUp();
		if ("0001701".equals(op2HemUp) || "0001704".equals(op2HemUp)) {
			order.setPt2DblWidthCd(null);
			order.setPt2DblWidthNm(null);
			order.setPt2DblWidthRtPrice(null);
			order.setPt2DblWidthWsWage(null);
			order.setPt2DblWidthWsPrice(null);
		}
	}

	public void setGoodsPrice(OrderFindFabric orderFindFabric, OrderCoForm orderCoForm) {
		// 上代
		Integer retailPrice = orderFindFabric.getRetailPrice();

		String productItem = orderCoForm.getProductItem();
		if ("01".equals(productItem)) {
			orderFindFabric.setProductPrice(String.valueOf(retailPrice));
		} else if ("02".equals(productItem)) {
			// シングルJACKET単品率
			Integer singleJacketOnlyRate = orderFindFabric.getSingleJacketOnlyRate();
			// シングルJacketの単品購買追加金額
			Integer jkSingleOnlyPlusAlphaPrice = orderFindFabric.getJkSingleOnlyPlusAlphaPrice();
			// JACKET単品Single
			BigDecimal jkSinglePice = new BigDecimal(retailPrice)
					.multiply((new BigDecimal(singleJacketOnlyRate).divide(new BigDecimal("100"))))
					.add(new BigDecimal(jkSingleOnlyPlusAlphaPrice));
			orderFindFabric.setProductPrice(String.valueOf(jkSinglePice.setScale(0)));
		} else if ("03".equals(productItem)) {
			// PANTS単品率
			Integer pantOnlyRate = orderFindFabric.getPantOnlyRate();
			Integer ptOnlyPlusAlphaPrice = orderFindFabric.getPtOnlyPlusAlphaPrice();
			BigDecimal ptProductPrice = new BigDecimal(retailPrice)
					.multiply((new BigDecimal(pantOnlyRate).divide(new BigDecimal("100"))))
					.add(new BigDecimal(ptOnlyPlusAlphaPrice));
			orderFindFabric.setProductPrice(String.valueOf(ptProductPrice.setScale(0)));
		} else if ("04".equals(productItem)) {
			Integer singleGiletOnlyRate = orderFindFabric.getSingleGiletOnlyRate();
			Integer glSingleOnlyPlusAlphaPrice = orderFindFabric.getGlSingleOnlyPlusAlphaPrice();
			BigDecimal glProductPrice = new BigDecimal(retailPrice)
					.multiply((new BigDecimal(singleGiletOnlyRate).divide(new BigDecimal("100"))))
					.add(new BigDecimal(glSingleOnlyPlusAlphaPrice));
			orderFindFabric.setProductPrice(String.valueOf(glProductPrice.setScale(0)));
		} else if ("05".equals(productItem)) {
			orderFindFabric.setProductPrice(String.valueOf(retailPrice));
		} else if ("06".equals(productItem)) {
			Integer coatSingleOnlyRate = orderFindFabric.getCoatSingleOnlyRate();
			Integer ctSingleOnlyPlusAlphaPrice = orderFindFabric.getCtSingleOnlyPlusAlphaPrice();
			BigDecimal ctProductPrice = new BigDecimal(retailPrice)
					.multiply((new BigDecimal(coatSingleOnlyRate).divide(new BigDecimal("100"))))
					.add(new BigDecimal(ctSingleOnlyPlusAlphaPrice));
			orderFindFabric.setProductPrice(String.valueOf(ctProductPrice.setScale(0)));
		}
		orderCoForm.setProductPrice(orderFindFabric.getProductPrice());
	}

	public void pantsDefaultValueFromDb(OrderCoForm orderCoForm, Order orderPt) {
		String productCategory = orderCoForm.getProductCategory();
		if ("9000101".equals(productCategory)) {
			// 標準
			CoOptionPantsStandardInfo optionPantsStandardInfo = orderCoForm.getCoOptionPantsStandardInfo();
			optionPantsStandardInfo.setOpPantsModel(orderPt.getPtModelCd());
			optionPantsStandardInfo.setOpTack(orderPt.getPtTackCd());
			optionPantsStandardInfo.setOpKneeBack(orderPt.getPtKneeinnerTypeCd());
			optionPantsStandardInfo.setOpKneeBackMate(orderPt.getPtKneeinnerClothCd());
			optionPantsStandardInfo.setOpFrontSpec(orderPt.getPtFrtTypeCd());
			optionPantsStandardInfo.setOpPancherina(orderPt.getPtPancherinaCd());
			optionPantsStandardInfo.setOpAdjuster(orderPt.getPtAdjusterCd());
			optionPantsStandardInfo.setOpBeltLoop(orderPt.getPtBeltloopType());
			optionPantsStandardInfo.setOpBeltLoopPlace(orderPt.getPtBeltloopCd());
			optionPantsStandardInfo.setOpPinLoop(orderPt.getPtPinloopCd());
			optionPantsStandardInfo.setOpSidePkt(orderPt.getPtSidePktCd());
			optionPantsStandardInfo.setOpSinobiPkt(orderPt.getPtShinobiPktCd());
			optionPantsStandardInfo.setOpCoinPkt(orderPt.getPtCoinPktCd());
			optionPantsStandardInfo.setOpFlapCoinPkt(orderPt.getPtFlapcoinPktCd());
			optionPantsStandardInfo.setOpPisPktUf(orderPt.getPtLeftPisPktCd());
			optionPantsStandardInfo.setOpPisPktDf(orderPt.getPtRightPisPktCd());
			optionPantsStandardInfo.setOpVCut(orderPt.getPtVCutCd());
			optionPantsStandardInfo.setOpHemUp(orderPt.getPtHemUpCd());
			optionPantsStandardInfo.setOpDoubleWide(orderPt.getPtDblWidthCd());
			optionPantsStandardInfo.setOpStitch(orderPt.getPtAmfStitchCd());
			optionPantsStandardInfo.setOpStitchModify(orderPt.getPtStitchPlcType());
			optionPantsStandardInfo.setOpStitchModifyPlace(orderPt.getPtStitchPlcCd());
			optionPantsStandardInfo.setOpDStitch(orderPt.getPtDblstitchPlcType());
			optionPantsStandardInfo.setOpDStitchPlace(orderPt.getPtDblstitchPlcCd());
			optionPantsStandardInfo.setOpAmfColor(orderPt.getPtAmfColorType());
			optionPantsStandardInfo.setOpAmfAllColor(orderPt.getPtAmfColorCd());
			optionPantsStandardInfo.setOpAmfColorPlace(orderPt.getPtAmfColorPlcCd());
			optionPantsStandardInfo.setOpBhColor(orderPt.getPtBtnholeColorType());
			optionPantsStandardInfo.setOpBhAllColor(orderPt.getPtBtnholeColorCd());
			optionPantsStandardInfo.setOpBhColorPlace(orderPt.getPtBtnholeColorPlcCd());
			optionPantsStandardInfo.setOpByColor(orderPt.getPtBtnthreadColorType());
			optionPantsStandardInfo.setOpByAllColor(orderPt.getPtBtnthreadColorCd());
			optionPantsStandardInfo.setOpByColorPlace(orderPt.getPtBtnthreadColorPlcCd());
			optionPantsStandardInfo.setOpButton(orderPt.getPtBtnMaterialType());
			optionPantsStandardInfo.setOpBtnMateStkNo(orderPt.getPtBtnMaterialCd());
			optionPantsStandardInfo.setOpSuspenderBtn(orderPt.getPtSuspenderBtnCd());
			optionPantsStandardInfo.setOpEight(orderPt.getPtNonSlipCd());
			optionPantsStandardInfo.setOpShapeMemory(orderPt.getPtShapeMemoryCd());
			optionPantsStandardInfo.setOpBlister(orderPt.getPtShoeSoreCd());
			optionPantsStandardInfo.setOpThick(orderPt.getPtChicSlipCd());
			
			pluralPtStandardOptionItem(optionPantsStandardInfo,orderPt);
		} else if ("9000102".equals(productCategory)) {
			// タキシード
			CoOptionPantsTuxedoInfo optionPantsTuxedoInfo = orderCoForm.getCoOptionPantsTuxedoInfo();

			optionPantsTuxedoInfo.setTpPantsModel(orderPt.getPtModelCd());
			optionPantsTuxedoInfo.setTpTack(orderPt.getPtTackCd());
			optionPantsTuxedoInfo.setTpKneeBack(orderPt.getPtKneeinnerTypeCd());
			optionPantsTuxedoInfo.setTpKneeBackMate(orderPt.getPtKneeinnerClothCd());
			optionPantsTuxedoInfo.setTpFrontSpec(orderPt.getPtFrtTypeCd());
			optionPantsTuxedoInfo.setTpPancherina(orderPt.getPtPancherinaCd());
			optionPantsTuxedoInfo.setTpAdjuster(orderPt.getPtAdjusterCd());
			optionPantsTuxedoInfo.setTpBeltLoop(orderPt.getPtBeltloopType());
			optionPantsTuxedoInfo.setTpBeltLoopPlace(orderPt.getPtBeltloopCd());
			optionPantsTuxedoInfo.setTpPinLoop(orderPt.getPtPinloopCd());
			optionPantsTuxedoInfo.setTpSidePkt(orderPt.getPtSidePktCd());
			optionPantsTuxedoInfo.setTpSinobiPkt(orderPt.getPtShinobiPktCd());
			optionPantsTuxedoInfo.setTpCoinPkt(orderPt.getPtCoinPktCd());
			optionPantsTuxedoInfo.setTpFlapCoinPkt(orderPt.getPtFlapcoinPktCd());
			optionPantsTuxedoInfo.setTpPisPktUf(orderPt.getPtLeftPisPktCd());
			optionPantsTuxedoInfo.setTpPisPktDf(orderPt.getPtRightPisPktCd());
			optionPantsTuxedoInfo.setTpVCut(orderPt.getPtVCutCd());
			optionPantsTuxedoInfo.setTpHemUp(orderPt.getPtHemUpCd());
			optionPantsTuxedoInfo.setTpDoubleWide(orderPt.getPtDblWidthCd());
			optionPantsTuxedoInfo.setTpStitch(orderPt.getPtAmfStitchCd());
			optionPantsTuxedoInfo.setTpStitchModify(orderPt.getPtStitchPlcCd());
			optionPantsTuxedoInfo.setTpDStitchPlace(orderPt.getPtDblstitchPlcCd());
			optionPantsTuxedoInfo.setTpAmfColor(orderPt.getPtAmfColorCd());
			optionPantsTuxedoInfo.setTpBhColor(orderPt.getPtBtnholeColorType());
			optionPantsTuxedoInfo.setTpBhColorPlace(orderPt.getPtBtnholeColorPlcCd());
			optionPantsTuxedoInfo.setTpBhAllColor(orderPt.getPtBtnholeColorCd());
			optionPantsTuxedoInfo.setTpByColor(orderPt.getPtBtnthreadColorType());
			optionPantsTuxedoInfo.setTpByColorPlace(orderPt.getPtBtnthreadColorPlcCd());
			optionPantsTuxedoInfo.setTpByAllColor(orderPt.getPtBtnthreadColorCd());
			optionPantsTuxedoInfo.setTpButton(orderPt.getPtBtnMaterialType());
			optionPantsTuxedoInfo.setTpBtnMateStkNo(orderPt.getPtBtnMaterialCd());
			optionPantsTuxedoInfo.setTpSuspenderBtn(orderPt.getPtSuspenderBtnCd());
			optionPantsTuxedoInfo.setTpEight(orderPt.getPtNonSlipCd());
			optionPantsTuxedoInfo.setTpThick(orderPt.getPtChicSlipCd());
			optionPantsTuxedoInfo.setTpShapeMemory(orderPt.getPtShapeMemoryCd());
			optionPantsTuxedoInfo.setTpSideStripe(orderPt.getPtSideStripeCd());
			optionPantsTuxedoInfo.setTpSideStripeWidth(orderPt.getPtSideStripeWidthCd());
			
			pluralPtTuxedoOptionItem(optionPantsTuxedoInfo,orderPt);
		} else if ("9000103".equals(productCategory)) {
			// ウォッシャブル
			CoOptionPantsWashableInfo optionPantsWashableInfo = orderCoForm.getCoOptionPantsWashableInfo();
			optionPantsWashableInfo.setWpPantsModel(orderPt.getPtModelCd());
			optionPantsWashableInfo.setWpTack(orderPt.getPtTackCd());
			optionPantsWashableInfo.setWpKneeBack(orderPt.getPtKneeinnerTypeCd());
			optionPantsWashableInfo.setWpKneeBackMate(orderPt.getPtKneeinnerClothCd());
			optionPantsWashableInfo.setWpFrontSpec(orderPt.getPtFrtTypeCd());
			optionPantsWashableInfo.setWpPancherina(orderPt.getPtPancherinaCd());
			optionPantsWashableInfo.setWpAdjuster(orderPt.getPtAdjusterCd());
			optionPantsWashableInfo.setWpBeltLoop(orderPt.getPtBeltloopType());
			optionPantsWashableInfo.setWpBeltLoopPlace(orderPt.getPtBeltloopCd());
			optionPantsWashableInfo.setWpPinLoop(orderPt.getPtPinloopCd());
			optionPantsWashableInfo.setWpSidePkt(orderPt.getPtSidePktCd());
			optionPantsWashableInfo.setWpSinobiPkt(orderPt.getPtShinobiPktCd());
			optionPantsWashableInfo.setWpCoinPkt(orderPt.getPtCoinPktCd());
			optionPantsWashableInfo.setWpFlapCoinPkt(orderPt.getPtFlapcoinPktCd());
			optionPantsWashableInfo.setWpPisPktUf(orderPt.getPtLeftPisPktCd());
			optionPantsWashableInfo.setWpPisPktDf(orderPt.getPtRightPisPktCd());
			optionPantsWashableInfo.setWpVCut(orderPt.getPtVCutCd());
			optionPantsWashableInfo.setWpHemUp(orderPt.getPtHemUpCd());
			optionPantsWashableInfo.setWpDoubleWide(orderPt.getPtDblWidthCd());
			optionPantsWashableInfo.setWpStitch(orderPt.getPtAmfStitchCd());
			optionPantsWashableInfo.setWpStitchModify(orderPt.getPtStitchPlcType());
			optionPantsWashableInfo.setWpStitchModifyPlace(orderPt.getPtStitchPlcCd());
			optionPantsWashableInfo.setWpDStitch(orderPt.getPtDblstitchPlcType());
			optionPantsWashableInfo.setWpDStitchPlace(orderPt.getPtDblstitchPlcCd());
			optionPantsWashableInfo.setWpAmfColor(orderPt.getPtAmfColorType());
			optionPantsWashableInfo.setWpAmfColorPlace(orderPt.getPtAmfColorPlcCd());
			optionPantsWashableInfo.setWpAmfAllColor(orderPt.getPtAmfColorCd());
			optionPantsWashableInfo.setWpBhColor(orderPt.getPtBtnholeColorType());
			optionPantsWashableInfo.setWpBhColorPlace(orderPt.getPtBtnholeColorPlcCd());
			optionPantsWashableInfo.setWpBhAllColor(orderPt.getPtBtnholeColorCd());
			optionPantsWashableInfo.setWpByColor(orderPt.getPtBtnthreadColorType());
			optionPantsWashableInfo.setWpByColorPlace(orderPt.getPtBtnthreadColorPlcCd());
			optionPantsWashableInfo.setWpByAllColor(orderPt.getPtBtnthreadColorCd());
			optionPantsWashableInfo.setWpButton(orderPt.getPtBtnMaterialType());
			optionPantsWashableInfo.setWpBtnMateStkNo(orderPt.getPtBtnMaterialCd());		
			optionPantsWashableInfo.setWpSuspenderBtn(orderPt.getPtSuspenderBtnCd());
			optionPantsWashableInfo.setWpEight(orderPt.getPtNonSlipCd());
			optionPantsWashableInfo.setWpThick(orderPt.getPtChicSlipCd());
			optionPantsWashableInfo.setWpShapeMemory(orderPt.getPtShapeMemoryCd());
			optionPantsWashableInfo.setWpBlister(orderPt.getPtShoeSoreCd());
			
			pluralPtWashableOptionItem(optionPantsWashableInfo,orderPt);
		}

	}

	public void pants2DefaultValue(OrderCoForm orderCoForm) {
		// 標準
		CoOptionPants2StandardInfo optionPants2StandardInfo = orderCoForm.getCoOptionPants2StandardInfo();
		// PANTSモデル
		optionPants2StandardInfo.setOp2PantsModel("");
		// タック
		optionPants2StandardInfo.setOp2Tack(OptionCodeKeys.PT2_0000101);
		// 膝裏
		optionPants2StandardInfo.setOp2KneeBack(OptionCodeKeys.PT2_0000201);
		// 膝裏素材
		optionPants2StandardInfo.setOp2KneeBackMate(OptionCodeKeys.PT2_0000301);
		// フロント仕様
		optionPants2StandardInfo.setOp2FrontSpec(OptionCodeKeys.PT2_0000401);
		// パンチェリーナ
		optionPants2StandardInfo.setOp2Pancherina(OptionCodeKeys.PT2_0000501);
		// アジャスター仕様
		optionPants2StandardInfo.setOp2Adjuster(OptionCodeKeys.PT2_0000601);
		// ベルトループ
		optionPants2StandardInfo.setOp2BeltLoop(OptionCodeKeys.PT2_0000701);
		optionPants2StandardInfo.setOp2BeltLoopPlace(null);
		// ピンループ
		optionPants2StandardInfo.setOp2PinLoop(OptionCodeKeys.PT2_0000901);
		// 脇ポケット
		optionPants2StandardInfo.setOp2SidePkt(OptionCodeKeys.PT2_0001002);
		// 忍びポケット
		optionPants2StandardInfo.setOp2SinobiPkt(OptionCodeKeys.PT2_0001104);
		// コインポケット
		optionPants2StandardInfo.setOp2CoinPkt(OptionCodeKeys.PT2_0001201);
		// フラップ付コインポケット
		optionPants2StandardInfo.setOp2FlapCoinPkt(OptionCodeKeys.PT2_0001301);
		// 上前ピスポケット
		optionPants2StandardInfo.setOp2PisPktUf(OptionCodeKeys.PT2_0001401);
		// 下前ピスポケット
		optionPants2StandardInfo.setOp2PisPktDf(OptionCodeKeys.PT2_0001501);
		// Vカット
		optionPants2StandardInfo.setOp2VCut(OptionCodeKeys.PT2_0001602);
		// 裾上げ
		optionPants2StandardInfo.setOp2HemUp(OptionCodeKeys.PT2_0001701);
		// ダブル幅
		optionPants2StandardInfo.setOp2DoubleWide(OptionCodeKeys.PT2_4);
		// ステッチ種類
		optionPants2StandardInfo.setOp2Stitch(OptionCodeKeys.PT2_0001904);
		// ステッチ箇所変更
		optionPants2StandardInfo.setOp2StitchModify(OptionCodeKeys.PT2_0002001);
		optionPants2StandardInfo.setOp2StitchModifyPlace(null);
		// ダブルステッチ
		optionPants2StandardInfo.setOp2DStitch(OptionCodeKeys.PT2_0002201);
		optionPants2StandardInfo.setOp2DStitchPlace(null);
		// AMF色指定
		optionPants2StandardInfo.setOp2AmfColor(OptionCodeKeys.PT2_0002401);
		optionPants2StandardInfo.setOp2AmfColorPlace(null);
		optionPants2StandardInfo.setOp2AmfAllColor(null);
		// ボタンホール色指定
		optionPants2StandardInfo.setOp2BhColor(OptionCodeKeys.PT2_0002701);
		optionPants2StandardInfo.setOp2BhColorPlace(null);
		optionPants2StandardInfo.setOp2BhAllColor(null);
		// ボタン付け糸指定
		optionPants2StandardInfo.setOp2ByColor(OptionCodeKeys.PT2_0003001);
		optionPants2StandardInfo.setOp2ByColorPlace(null);
		optionPants2StandardInfo.setOp2ByAllColor(null);
		// 釦素材
		optionPants2StandardInfo.setOp2Button(OptionCodeKeys.PT2_3000800);
		
		optionPants2StandardInfo.setOp2BtnMateStkNo(null);
		// サスペンダー釦
		optionPants2StandardInfo.setOp2SuspenderBtn(OptionCodeKeys.PT2_0003501);
		// シック大（股補強）
		optionPants2StandardInfo.setOp2Thick(OptionCodeKeys.PT2_0004101);
		// エイト（滑り止め）
		optionPants2StandardInfo.setOp2Eight(OptionCodeKeys.PT2_0003601);
		// 形状記憶
		optionPants2StandardInfo.setOp2ShapeMemory(OptionCodeKeys.PT2_0003701);

		// タキシード
		CoOptionPants2TuxedoInfo optionPants2TuxedoInfo = orderCoForm.getCoOptionPants2TuxedoInfo();
		// PANTSモデル
		optionPants2TuxedoInfo.setTp2PantsModel("");
		// タック
		optionPants2TuxedoInfo.setTp2Tack(OptionCodeKeys.PT2_0000101);
		// 膝裏
		optionPants2TuxedoInfo.setTp2KneeBack(OptionCodeKeys.PT2_0000201);
		// 膝裏素材
		optionPants2TuxedoInfo.setTp2KneeBackMate(OptionCodeKeys.PT2_0000301);
		// フロント仕様
		optionPants2TuxedoInfo.setTp2FrontSpec(OptionCodeKeys.PT2_0000401);
		// パンチェリーナ
		optionPants2TuxedoInfo.setTp2Pancherina(OptionCodeKeys.PT2_0000501);
		// アジャスター仕様
		optionPants2TuxedoInfo.setTp2Adjuster(OptionCodeKeys.PT2_0000601);
		// ベルトループ
		optionPants2TuxedoInfo.setTp2BeltLoop(OptionCodeKeys.PT2_0000701);
		optionPants2TuxedoInfo.setTp2BeltLoopPlace(null);
		// ピンループ
		optionPants2TuxedoInfo.setTp2PinLoop(OptionCodeKeys.PT2_0000901);
		// 脇ポケット
		optionPants2TuxedoInfo.setTp2SidePkt(OptionCodeKeys.PT2_0001002);
		// 忍びポケット
		optionPants2TuxedoInfo.setTp2SinobiPkt(OptionCodeKeys.PT2_0001104);
		// コインポケット
		optionPants2TuxedoInfo.setTp2CoinPkt(OptionCodeKeys.PT2_0001201);
		// フラップ付コインポケット
		optionPants2TuxedoInfo.setTp2FlapCoinPkt(OptionCodeKeys.PT2_0001301);
		// 上前ピスポケット
		optionPants2TuxedoInfo.setTp2PisPktUf(OptionCodeKeys.PT2_0001401);
		// 下前ピスポケット
		optionPants2TuxedoInfo.setTp2PisPktDf(OptionCodeKeys.PT2_0001501);
		// Vカット
		optionPants2TuxedoInfo.setTp2VCut(OptionCodeKeys.PT2_0001602);
		// 裾上げ
		optionPants2TuxedoInfo.setTp2HemUp(OptionCodeKeys.PT2_0001701);
		// ダブル幅
		optionPants2TuxedoInfo.setTp2DoubleWide(OptionCodeKeys.PT2_4);
		// ステッチ種類
		optionPants2TuxedoInfo.setTp2Stitch(OptionCodeKeys.PT2_0001903);
		// ボタンホール色指定
		optionPants2TuxedoInfo.setTp2BhColor(OptionCodeKeys.PT2_0002701);
		optionPants2TuxedoInfo.setTp2BhColorPlace(null);
		optionPants2TuxedoInfo.setTp2BhAllColor(null);
		// ボタン付け糸指定
		optionPants2TuxedoInfo.setTp2ByColor(OptionCodeKeys.PT2_0003001);
		optionPants2TuxedoInfo.setTp2ByColorPlace(null);
		optionPants2TuxedoInfo.setTp2ByAllColor(null);
		// 釦素材
		optionPants2TuxedoInfo.setTp2Button(OptionCodeKeys.PT2_3000800);
		
		optionPants2TuxedoInfo.setTp2BtnMateStkNo(null);
		// サスペンダー釦
		optionPants2TuxedoInfo.setTp2SuspenderBtn(OptionCodeKeys.PT2_0003501);
		// シック大（股補強）
		optionPants2TuxedoInfo.setTp2Thick(OptionCodeKeys.PT2_0004101);
		// エイト（滑り止め）
		optionPants2TuxedoInfo.setTp2Eight(OptionCodeKeys.PT2_0003601);
		// 形状記憶
		optionPants2TuxedoInfo.setTp2ShapeMemory(OptionCodeKeys.PT2_0003701);
		// 側章
		optionPants2TuxedoInfo.setTp2SideStripe(OptionCodeKeys.PT2_0003902);
		// 側章幅
		optionPants2TuxedoInfo.setTp2SideStripeWidth(OptionCodeKeys.PT2_0004001);

		// ウォッシャブル
		CoOptionPants2WashableInfo optionPants2WashableInfo = orderCoForm.getCoOptionPants2WashableInfo();
		// PANTSモデル
		optionPants2WashableInfo.setWp2PantsModel("");
		// タック
		optionPants2WashableInfo.setWp2Tack(OptionCodeKeys.PT2_0000101);
		// 膝裏
		optionPants2WashableInfo.setWp2KneeBack(OptionCodeKeys.PT2_0000201);
		// 膝裏素材
		optionPants2WashableInfo.setWp2KneeBackMate(OptionCodeKeys.PT2_0000301);
		// フロント仕様
		optionPants2WashableInfo.setWp2FrontSpec(OptionCodeKeys.PT2_0000401);
		// パンチェリーナ
		optionPants2WashableInfo.setWp2Pancherina(OptionCodeKeys.PT2_0000501);
		// アジャスター仕様
		optionPants2WashableInfo.setWp2Adjuster(OptionCodeKeys.PT2_0000601);
		// ベルトループ
		optionPants2WashableInfo.setWp2BeltLoop(OptionCodeKeys.PT2_0000701);
		optionPants2WashableInfo.setWp2BeltLoopPlace(null);
		// ピンループ
		optionPants2WashableInfo.setWp2PinLoop(OptionCodeKeys.PT2_0000901);
		// 脇ポケット
		optionPants2WashableInfo.setWp2SidePkt(OptionCodeKeys.PT2_0001002);
		// 忍びポケット
		optionPants2WashableInfo.setWp2SinobiPkt(OptionCodeKeys.PT2_0001104);
		// コインポケット
		optionPants2WashableInfo.setWp2CoinPkt(OptionCodeKeys.PT2_0001201);
		// フラップ付コインポケット
		optionPants2WashableInfo.setWp2FlapCoinPkt(OptionCodeKeys.PT2_0001301);
		// 上前ピスポケット
		optionPants2WashableInfo.setWp2PisPktUf(OptionCodeKeys.PT2_0001401);
		// 下前ピスポケット
		optionPants2WashableInfo.setWp2PisPktDf(OptionCodeKeys.PT2_0001501);
		// Vカット
		optionPants2WashableInfo.setWp2VCut(OptionCodeKeys.PT2_0001602);
		// 裾上げ
		optionPants2WashableInfo.setWp2HemUp(OptionCodeKeys.PT2_0001701);
		// ダブル幅
		optionPants2WashableInfo.setWp2DoubleWide(OptionCodeKeys.PT2_4);
		// ステッチ種類
		optionPants2WashableInfo.setWp2Stitch(OptionCodeKeys.PT2_0001901);
		// ステッチ箇所変更
		optionPants2WashableInfo.setWp2StitchModify(OptionCodeKeys.PT2_0002001);
		optionPants2WashableInfo.setWp2StitchModifyPlace(null);
		// ダブルステッチ
		optionPants2WashableInfo.setWp2DStitch(OptionCodeKeys.PT2_0002201);
		optionPants2WashableInfo.setWp2DStitchPlace(null);
		// AMF色指定
		optionPants2WashableInfo.setWp2AmfColor(OptionCodeKeys.PT2_0002401);
		optionPants2WashableInfo.setWp2AmfColorPlace(null);
		optionPants2WashableInfo.setWp2AmfAllColor(null);
		// ボタンホール色指定
		optionPants2WashableInfo.setWp2BhColor(OptionCodeKeys.PT2_0002701);
		optionPants2WashableInfo.setWp2BhColorPlace(null);
		optionPants2WashableInfo.setWp2BhAllColor(null);
		// ボタン付け糸指定
		optionPants2WashableInfo.setWp2ByColor(OptionCodeKeys.PT2_0003001);
		optionPants2WashableInfo.setWp2ByColorPlace(null);
		optionPants2WashableInfo.setWp2ByAllColor(null);
		// 釦素材
		optionPants2WashableInfo.setWp2Button(OptionCodeKeys.PT2_3000800);
		
		optionPants2WashableInfo.setWp2BtnMateStkNo(null);
		// サスペンダー釦
		optionPants2WashableInfo.setWp2SuspenderBtn(OptionCodeKeys.PT2_0003501);
		// シック大（股補強）
		optionPants2WashableInfo.setWp2Thick(OptionCodeKeys.PT2_0004101);
		// エイト（滑り止め）
		optionPants2WashableInfo.setWp2Eight(OptionCodeKeys.PT2_0003601);
		// 形状記憶
		optionPants2WashableInfo.setWp2ShapeMemory(OptionCodeKeys.PT2_0003701);

	}

	public void pants2DefaultValueFromDb(OrderCoForm orderCoForm, Order orderPt2) {
		String productCategory = orderCoForm.getProductCategory();
		if ("9000101".equals(productCategory)) {
			// 標準
			CoOptionPants2StandardInfo optionPants2StandardInfo = orderCoForm.getCoOptionPants2StandardInfo();
			optionPants2StandardInfo.setOp2PantsModel(orderPt2.getPt2ModelCd());
			optionPants2StandardInfo.setOp2Tack(orderPt2.getPt2TackCd());
			optionPants2StandardInfo.setOp2KneeBack(orderPt2.getPt2KneeinnerTypeCd());
			optionPants2StandardInfo.setOp2KneeBackMate(orderPt2.getPt2KneeinnerClothCd());
			optionPants2StandardInfo.setOp2FrontSpec(orderPt2.getPt2FrtTypeCd());
			optionPants2StandardInfo.setOp2Pancherina(orderPt2.getPt2PancherinaCd());
			optionPants2StandardInfo.setOp2Adjuster(orderPt2.getPt2AdjusterCd());
			optionPants2StandardInfo.setOp2BeltLoop(orderPt2.getPt2BeltloopType());
			optionPants2StandardInfo.setOp2BeltLoopPlace(orderPt2.getPt2BeltloopCd());
			optionPants2StandardInfo.setOp2PinLoop(orderPt2.getPt2PinloopCd());
			optionPants2StandardInfo.setOp2SidePkt(orderPt2.getPt2SidePktCd());
			optionPants2StandardInfo.setOp2SinobiPkt(orderPt2.getPt2ShinobiPktCd());
			optionPants2StandardInfo.setOp2CoinPkt(orderPt2.getPt2CoinPktCd());
			optionPants2StandardInfo.setOp2FlapCoinPkt(orderPt2.getPt2FlapcoinPktCd());
			optionPants2StandardInfo.setOp2PisPktUf(orderPt2.getPt2LeftPisPktCd());
			optionPants2StandardInfo.setOp2PisPktDf(orderPt2.getPt2RightPisPktCd());
			optionPants2StandardInfo.setOp2VCut(orderPt2.getPt2VCutCd());
			optionPants2StandardInfo.setOp2HemUp(orderPt2.getPt2HemUpCd());
			optionPants2StandardInfo.setOp2DoubleWide(orderPt2.getPt2DblWidthCd());
			optionPants2StandardInfo.setOp2Stitch(orderPt2.getPt2AmfStitchCd());
			optionPants2StandardInfo.setOp2StitchModify(orderPt2.getPt2StitchPlcType());
			optionPants2StandardInfo.setOp2StitchModifyPlace(orderPt2.getPt2StitchPlcCd());
			optionPants2StandardInfo.setOp2DStitch(orderPt2.getPt2DblstitchPlcType());
			optionPants2StandardInfo.setOp2DStitchPlace(orderPt2.getPt2DblstitchPlcCd());
			optionPants2StandardInfo.setOp2AmfColor(orderPt2.getPt2AmfColorType());
			optionPants2StandardInfo.setOp2AmfColorPlace(orderPt2.getPt2AmfColorPlcCd());
			optionPants2StandardInfo.setOp2AmfAllColor(orderPt2.getPt2AmfColorCd());
			optionPants2StandardInfo.setOp2BhColor(orderPt2.getPt2BtnholeColorType());
			optionPants2StandardInfo.setOp2BhColorPlace(orderPt2.getPt2BtnholeColorPlcCd());
			optionPants2StandardInfo.setOp2BhAllColor(orderPt2.getPt2BtnholeColorCd());
			optionPants2StandardInfo.setOp2ByColor(orderPt2.getPt2BtnthreadColorType());
			optionPants2StandardInfo.setOp2ByColorPlace(orderPt2.getPt2BtnthreadColorPlcCd());
			optionPants2StandardInfo.setOp2ByAllColor(orderPt2.getPt2BtnthreadColorCd());
			optionPants2StandardInfo.setOp2Button(orderPt2.getPt2BtnMaterialCd());
			optionPants2StandardInfo.setOp2SuspenderBtn(orderPt2.getPt2SuspenderBtnCd());
			optionPants2StandardInfo.setOp2Eight(orderPt2.getPt2NonSlipCd());
			optionPants2StandardInfo.setOp2ShapeMemory(orderPt2.getPt2ShapeMemoryCd());
			optionPants2StandardInfo.setOp2Blister(orderPt2.getPt2ShoeSoreCd());
			optionPants2StandardInfo.setOp2Thick(orderPt2.getPt2ChicSlipCd());
			
			pluralPt2StandardOptionItem(optionPants2StandardInfo,orderPt2);
		} else if ("9000102".equals(productCategory)) {
			// タキシード
			CoOptionPants2TuxedoInfo optionPants2TuxedoInfo = orderCoForm.getCoOptionPants2TuxedoInfo();

			optionPants2TuxedoInfo.setTp2PantsModel(orderPt2.getPt2ModelCd());
			optionPants2TuxedoInfo.setTp2Tack(orderPt2.getPt2TackCd());
			optionPants2TuxedoInfo.setTp2KneeBack(orderPt2.getPt2KneeinnerTypeCd());
			optionPants2TuxedoInfo.setTp2KneeBackMate(orderPt2.getPt2KneeinnerClothCd());
			optionPants2TuxedoInfo.setTp2FrontSpec(orderPt2.getPt2FrtTypeCd());
			optionPants2TuxedoInfo.setTp2Pancherina(orderPt2.getPt2PancherinaCd());
			optionPants2TuxedoInfo.setTp2Adjuster(orderPt2.getPt2AdjusterCd());
			optionPants2TuxedoInfo.setTp2BeltLoop(orderPt2.getPt2BeltloopType());
			optionPants2TuxedoInfo.setTp2BeltLoopPlace(orderPt2.getPt2BeltloopCd());
			optionPants2TuxedoInfo.setTp2PinLoop(orderPt2.getPt2PinloopCd());
			optionPants2TuxedoInfo.setTp2SidePkt(orderPt2.getPt2SidePktCd());
			optionPants2TuxedoInfo.setTp2SinobiPkt(orderPt2.getPt2ShinobiPktCd());
			optionPants2TuxedoInfo.setTp2CoinPkt(orderPt2.getPt2CoinPktCd());
			optionPants2TuxedoInfo.setTp2FlapCoinPkt(orderPt2.getPt2FlapcoinPktCd());
			optionPants2TuxedoInfo.setTp2PisPktUf(orderPt2.getPt2LeftPisPktCd());
			optionPants2TuxedoInfo.setTp2PisPktDf(orderPt2.getPt2RightPisPktCd());
			optionPants2TuxedoInfo.setTp2VCut(orderPt2.getPt2VCutCd());
			optionPants2TuxedoInfo.setTp2HemUp(orderPt2.getPt2HemUpCd());
			optionPants2TuxedoInfo.setTp2DoubleWide(orderPt2.getPt2DblWidthCd());
			optionPants2TuxedoInfo.setTp2Stitch(orderPt2.getPt2AmfStitchCd());
			optionPants2TuxedoInfo.setTp2StitchModify(orderPt2.getPt2StitchPlcCd());
			optionPants2TuxedoInfo.setTp2DStitchPlace(orderPt2.getPt2DblstitchPlcCd());
			optionPants2TuxedoInfo.setTp2AmfColor(orderPt2.getPt2AmfColorCd());
			optionPants2TuxedoInfo.setTp2BhColor(orderPt2.getPt2BtnholeColorType());
			optionPants2TuxedoInfo.setTp2BhColorPlace(orderPt2.getPt2BtnholeColorPlcCd());
			optionPants2TuxedoInfo.setTp2BhAllColor(orderPt2.getPt2BtnholeColorCd());
			// optionPantsTuxedoInfo.setTpBhColorPlaceAll(tpBhColorPlaceAll);
			optionPants2TuxedoInfo.setTp2ByColor(orderPt2.getPt2BtnthreadColorType());
			optionPants2TuxedoInfo.setTp2ByColorPlace(orderPt2.getPt2BtnthreadColorPlcCd());
			optionPants2TuxedoInfo.setTp2ByAllColor(orderPt2.getPt2BtnthreadColorCd());
			optionPants2TuxedoInfo.setTp2Button(orderPt2.getPt2BtnMaterialCd());
			// optionPantsTuxedoInfo.setTpBtnMateStkNo(tpBtnMateStkNo);
			optionPants2TuxedoInfo.setTp2SuspenderBtn(orderPt2.getPt2SuspenderBtnCd());
			optionPants2TuxedoInfo.setTp2Eight(orderPt2.getPt2NonSlipCd());
			optionPants2TuxedoInfo.setTp2Thick(orderPt2.getPt2ChicSlipCd());
			optionPants2TuxedoInfo.setTp2ShapeMemory(orderPt2.getPt2ShapeMemoryCd());
			optionPants2TuxedoInfo.setTp2SideStripe(orderPt2.getPt2SideStripeCd());
			optionPants2TuxedoInfo.setTp2SideStripeWidth(orderPt2.getPt2SideStripeWidthCd());
			
			pluralPt2TuxedoOptionItem(optionPants2TuxedoInfo,orderPt2);
		} else if ("9000103".equals(productCategory)) {
			// ウォッシャブル
			CoOptionPants2WashableInfo optionPants2WashableInfo = orderCoForm.getCoOptionPants2WashableInfo();
			optionPants2WashableInfo.setWp2PantsModel(orderPt2.getPt2ModelCd());
			optionPants2WashableInfo.setWp2Tack(orderPt2.getPt2TackCd());
			optionPants2WashableInfo.setWp2KneeBack(orderPt2.getPt2KneeinnerTypeCd());
			optionPants2WashableInfo.setWp2KneeBackMate(orderPt2.getPt2KneeinnerClothCd());
			optionPants2WashableInfo.setWp2FrontSpec(orderPt2.getPt2FrtTypeCd());
			optionPants2WashableInfo.setWp2Pancherina(orderPt2.getPt2PancherinaCd());
			optionPants2WashableInfo.setWp2Adjuster(orderPt2.getPt2AdjusterCd());
			optionPants2WashableInfo.setWp2BeltLoop(orderPt2.getPt2BeltloopType());
			optionPants2WashableInfo.setWp2BeltLoopPlace(orderPt2.getPt2BeltloopCd());
			optionPants2WashableInfo.setWp2PinLoop(orderPt2.getPt2PinloopCd());
			optionPants2WashableInfo.setWp2SidePkt(orderPt2.getPt2SidePktCd());
			optionPants2WashableInfo.setWp2SinobiPkt(orderPt2.getPt2ShinobiPktCd());
			optionPants2WashableInfo.setWp2CoinPkt(orderPt2.getPt2CoinPktCd());
			optionPants2WashableInfo.setWp2FlapCoinPkt(orderPt2.getPt2FlapcoinPktCd());
			optionPants2WashableInfo.setWp2PisPktUf(orderPt2.getPt2LeftPisPktCd());
			optionPants2WashableInfo.setWp2PisPktDf(orderPt2.getPt2RightPisPktCd());
			optionPants2WashableInfo.setWp2VCut(orderPt2.getPt2VCutCd());
			optionPants2WashableInfo.setWp2HemUp(orderPt2.getPt2HemUpCd());
			optionPants2WashableInfo.setWp2DoubleWide(orderPt2.getPt2DblWidthCd());
			optionPants2WashableInfo.setWp2Stitch(orderPt2.getPt2AmfStitchCd());
			optionPants2WashableInfo.setWp2StitchModify(orderPt2.getPt2StitchPlcType());
			optionPants2WashableInfo.setWp2StitchModifyPlace(orderPt2.getPt2StitchPlcCd());
			optionPants2WashableInfo.setWp2DStitch(orderPt2.getPt2DblstitchPlcType());
			optionPants2WashableInfo.setWp2DStitchPlace(orderPt2.getPt2DblstitchPlcCd());
			optionPants2WashableInfo.setWp2AmfColor(orderPt2.getPt2AmfColorType());
			optionPants2WashableInfo.setWp2AmfColorPlace(orderPt2.getPt2AmfColorPlcCd());
			optionPants2WashableInfo.setWp2AmfAllColor(orderPt2.getPt2AmfColorCd());
			optionPants2WashableInfo.setWp2BhColor(orderPt2.getPt2BtnholeColorType());
			optionPants2WashableInfo.setWp2BhColorPlace(orderPt2.getPt2BtnholeColorPlcCd());
			optionPants2WashableInfo.setWp2BhAllColor(orderPt2.getPt2BtnholeColorCd());
			optionPants2WashableInfo.setWp2ByColor(orderPt2.getPt2BtnthreadColorType());
			optionPants2WashableInfo.setWp2ByColorPlace(orderPt2.getPt2BtnthreadColorPlcCd());
			optionPants2WashableInfo.setWp2ByAllColor(orderPt2.getPt2BtnthreadColorCd());
			optionPants2WashableInfo.setWp2Button(orderPt2.getPt2BtnMaterialCd());
			optionPants2WashableInfo.setWp2SuspenderBtn(orderPt2.getPt2SuspenderBtnCd());
			optionPants2WashableInfo.setWp2Eight(orderPt2.getPt2NonSlipCd());
			optionPants2WashableInfo.setWp2Thick(orderPt2.getPt2ChicSlipCd());
			optionPants2WashableInfo.setWp2ShapeMemory(orderPt2.getPt2ShapeMemoryCd());
			optionPants2WashableInfo.setWp2Blister(orderPt2.getPt2ShoeSoreCd());
			
			pluralPt2WashableOptionItem(optionPants2WashableInfo,orderPt2);
		}

	}
	
	public void giletDefaultValueFromDb(OrderCoForm orderCoForm, Order orderGl) {
		String productCategory = orderCoForm.getProductCategory();
	
		if ("9000101".equals(productCategory)) {
			CoOptionGiletStandardInfo coOptionGiletStandardInfo = orderCoForm.getCoOptionGiletStandardInfo();
			coOptionGiletStandardInfo.setOgGiletModel(orderGl.getGlModelNm());
			coOptionGiletStandardInfo.setOgBreastPkt(orderGl.getGlBreastPktNm());
			coOptionGiletStandardInfo.setOgWaistPkt(orderGl.getGlWaistPktNm());
			coOptionGiletStandardInfo.setOgWaistPktSpec(orderGl.getGlWaistPktShapeNm());
			coOptionGiletStandardInfo.setOgStitch(orderGl.getGlAmfStitchNm());
			coOptionGiletStandardInfo.setOgStitchModify(orderGl.getGlStitchPlcType());
			coOptionGiletStandardInfo.setOgStitchModifyPlace(orderGl.getGlStitchPlcCd());
			coOptionGiletStandardInfo.setOgDStitchModify(orderGl.getGlDblstitchPlcType());
			coOptionGiletStandardInfo.setOgDStitchModifyPlace(orderGl.getGlDblstitchPlcCd());
			coOptionGiletStandardInfo.setOgAmfColor(orderGl.getGlAmfColorType());
			coOptionGiletStandardInfo.setOgAmfColorPlace(orderGl.getGlAmfColorPlcCd());
			//coOptionGiletStandardInfo.setOgAmfColorPlaceAll();
			coOptionGiletStandardInfo.setOgBhColor(orderGl.getGlBtnholeColorType());
			coOptionGiletStandardInfo.setOgBhColorPlace(orderGl.getGlBtnholeColorPlcCd());
			//coOptionGiletStandardInfo.setOgBhColorPlaceAll();
			coOptionGiletStandardInfo.setOgByColor(orderGl.getGlBtnthreadColorType());
			coOptionGiletStandardInfo.setOgByColorPlace(orderGl.getGlBtnthreadColorPlcCd());
			//coOptionGiletStandardInfo.setOgByColorPlaceAll();
			coOptionGiletStandardInfo.setOgBackLiningMate(orderGl.getGlBackClothType());
			coOptionGiletStandardInfo.setOgBackLiningMateStkNo(orderGl.getGlBackClothCd());
			coOptionGiletStandardInfo.setOgInsideLiningMate(orderGl.getGlInnnerClothType());
			coOptionGiletStandardInfo.setOgInsideLiningMateStkNo(orderGl.getGlInnnerClothCd());
			coOptionGiletStandardInfo.setOgFrontBtnMate(orderGl.getGlFrtBtnType());
			coOptionGiletStandardInfo.setOgFrontBtnMateStkNo(orderGl.getGlFrtBtnCd());
			coOptionGiletStandardInfo.setOgBackBelt(orderGl.getGlBackBeltCd());
			coOptionGiletStandardInfo.setOgWatchChain(orderGl.getGlWatchChainNm());
			
			pluralGlStandardOptionItem(coOptionGiletStandardInfo, orderGl);
			
		}else if ("9000102".equals(productCategory)) {
			CoOptionGiletTuxedoInfo coOptionGiletTuxedoInfo = orderCoForm.getCoOptionGiletTuxedoInfo();
			coOptionGiletTuxedoInfo.setTgGiletModel(orderGl.getGlModelNm());
			coOptionGiletTuxedoInfo.setTgBreastPkt(orderGl.getGlBreastPktNm());
			coOptionGiletTuxedoInfo.setTgWaistPkt(orderGl.getGlWaistPktNm());
			coOptionGiletTuxedoInfo.setTgWaistPktSpec(orderGl.getGlWaistPktShapeNm());
			coOptionGiletTuxedoInfo.setTgStitch(orderGl.getGlAmfStitchNm());
			coOptionGiletTuxedoInfo.setTgStitchModify(orderGl.getGlStitchPlcType());
			coOptionGiletTuxedoInfo.setTgDblstitchPlc(orderGl.getGlDblstitchPlcType());
			coOptionGiletTuxedoInfo.setTgBhColor(orderGl.getGlBtnholeColorType());
			coOptionGiletTuxedoInfo.setTgBhColorPlace(orderGl.getGlBtnholeColorPlcCd());
			//coOptionGiletTuxedoInfo.setTgBhColorPlaceAll();
			coOptionGiletTuxedoInfo.setTgByColor(orderGl.getGlBtnthreadColorType());
			coOptionGiletTuxedoInfo.setTgByColorPlace(orderGl.getGlBtnthreadColorPlcCd());
			//coOptionGiletTuxedoInfo.setTgByColorPlaceAll();
			coOptionGiletTuxedoInfo.setTgBackLiningMate(orderGl.getGlBackClothType());
			coOptionGiletTuxedoInfo.setTgBackLiningMateStkNo(orderGl.getGlBackClothCd());
			coOptionGiletTuxedoInfo.setTgInsideLiningMate(orderGl.getGlInnnerClothType());
			coOptionGiletTuxedoInfo.setTgInsideLiningMateStkNo(orderGl.getGlInnnerClothCd());
			coOptionGiletTuxedoInfo.setTgFrontBtnMate(orderGl.getGlFrtBtnType());
			coOptionGiletTuxedoInfo.setTgFrontBtnMateStkNo(orderGl.getGlFrtBtnCd());
			coOptionGiletTuxedoInfo.setTgBackBelt(orderGl.getGlBackBeltCd());
			coOptionGiletTuxedoInfo.setTgWatchChain(orderGl.getGlWatchChainNm());
			
			pluralGlTuxedoOptionItem(coOptionGiletTuxedoInfo, orderGl);
			
		}else if ("9000103".equals(productCategory)) {
			CoOptionGiletWashableInfo coOptionGiletWashableInfo = orderCoForm.getCoOptionGiletWashableInfo();
			coOptionGiletWashableInfo.setWgGiletModel(orderGl.getGlModelNm());
			coOptionGiletWashableInfo.setWgBreastPkt(orderGl.getGlBreastPktNm());
			coOptionGiletWashableInfo.setWgWaistPkt(orderGl.getGlWaistPktNm());
			coOptionGiletWashableInfo.setWgWaistPktSpec(orderGl.getGlWaistPktShapeNm());
			coOptionGiletWashableInfo.setWgStitch(orderGl.getGlAmfStitchNm());
			coOptionGiletWashableInfo.setWgStitchModify(orderGl.getGlStitchPlcType());
			coOptionGiletWashableInfo.setWgStitchModifyPlace(orderGl.getGlStitchPlcCd());
			coOptionGiletWashableInfo.setWgDStitchModify(orderGl.getGlDblstitchPlcType());
			coOptionGiletWashableInfo.setWgDStitchModifyPlace(orderGl.getGlDblstitchPlcCd());
			coOptionGiletWashableInfo.setWgAmfColor(orderGl.getGlAmfColorType());
			coOptionGiletWashableInfo.setWgAmfColorPlace(orderGl.getGlAmfColorPlcCd());
			//coOptionGiletWashableInfo.setWgAmfColorPlaceAll();
			coOptionGiletWashableInfo.setWgBhColor(orderGl.getGlBtnholeColorType());
			coOptionGiletWashableInfo.setWgBhColorPlace(orderGl.getGlBtnholeColorPlcCd());
			//coOptionGiletWashableInfo.setWgBhColorPlaceAll();
			coOptionGiletWashableInfo.setWgByColor(orderGl.getGlBtnthreadColorType());
			coOptionGiletWashableInfo.setWgByColorPlace(orderGl.getGlBtnthreadColorPlcCd());
			//coOptionGiletWashableInfo.setWgByColorPlaceAll();
			coOptionGiletWashableInfo.setWgBackLiningMate(orderGl.getGlBackClothType());
			coOptionGiletWashableInfo.setWgBackLiningMateStkNo(orderGl.getGlBackClothCd());
			coOptionGiletWashableInfo.setWgInsideLiningMate(orderGl.getGlInnnerClothType());
			coOptionGiletWashableInfo.setWgInsideLiningMateStkNo(orderGl.getGlInnnerClothCd());
			coOptionGiletWashableInfo.setWgFrontBtnMate(orderGl.getGlFrtBtnType());
			coOptionGiletWashableInfo.setWgFrontBtnMateStkNo(orderGl.getGlFrtBtnCd());
			coOptionGiletWashableInfo.setWgBackBelt(orderGl.getGlBackBeltCd());
			coOptionGiletWashableInfo.setWgWatchChain(orderGl.getGlWatchChainNm());
			
			pluralGlWashableOptionItem(coOptionGiletWashableInfo, orderGl);
		}
	}

	public void shirtDefaultValueFromDb(CoOptionShirtStandardInfo coOptionShirtStandardInfo, Order orderSt) {
		
		// SHIRTモデル
		coOptionShirtStandardInfo.setOsShirtModel(orderSt.getStModelCd());
		// 襟型
		coOptionShirtStandardInfo.setOsChainModel(orderSt.getStCollarTypeCd());
		// カフス
		coOptionShirtStandardInfo.setOsCuffs(orderSt.getStCuffsCd());
		// コンバーチブル
		coOptionShirtStandardInfo.setOsConvertible(orderSt.getStConvertibleCd());
		// アジャスト釦
		coOptionShirtStandardInfo.setOsAdjustBtn(orderSt.getStAdjusterBtnCd());
		// クレリック仕様
		coOptionShirtStandardInfo.setOsClericSpec(orderSt.getStClericCd());
		// ダブルカフス仕様
		coOptionShirtStandardInfo.setOsDblCuff(orderSt.getStDblCuffsCd());
		//カフスボタン追加
		coOptionShirtStandardInfo.setOsAddCuff(orderSt.getStCuffsBtnCd());
		// 釦素材
		coOptionShirtStandardInfo.setOsBtnMate(orderSt.getStBtnMaterialCd());
		//タブ釦
		coOptionShirtStandardInfo.setOsTabBtn(orderSt.getStDblBtnCd());
		// ガントレットボタン位置
		coOptionShirtStandardInfo.setOsGaletteBtnPos(orderSt.getStGauntletBtnPosCd());
		// ピンホールピン
		coOptionShirtStandardInfo.setOsPinHolePin(orderSt.getStPinholePinCd());
		// 胸ポケット
		coOptionShirtStandardInfo.setOsBreastPk(orderSt.getStBreastPktCd());
		//胸ポケット大きさ
		coOptionShirtStandardInfo.setOsBreastPkSize(orderSt.getStBreastSizeCd());
		// フロントデザイン
		coOptionShirtStandardInfo.setOsFrontDesign(orderSt.getStFrtDesignCd());
		// ピンタックブザム
		coOptionShirtStandardInfo.setOsPinTack(orderSt.getStPintuckBosomCd());
		// ステッチ
		coOptionShirtStandardInfo.setOsStitch(orderSt.getStStitchCd());
		// カラーキーパー
		coOptionShirtStandardInfo.setOsColorKeeper(orderSt.getStColarKeeperCd());
		// ボタン付け糸色変更
		coOptionShirtStandardInfo.setOsByColor(orderSt.getStBtnthreadColorCd());
		// ボタンホール色変更
		coOptionShirtStandardInfo.setOsBhColor(orderSt.getStBtnholeColorCd());
		//カジュアルヘムライン仕様
		coOptionShirtStandardInfo.setOsCasHemLine(orderSt.getStCasualHemlineCd());
		//カジュアルヘムライン仕様_サイズ
		coOptionShirtStandardInfo.setStCasualHemlineSize(orderSt.getStCasualHemlineSize());
		//ボタン位置変更
		coOptionShirtStandardInfo.setOsBtnPosChg(orderSt.getStBtnposChgCd());
		// ボタン位置変更 台襟釦
		coOptionShirtStandardInfo.setOsBtnPosChgCollar(orderSt.getStNeckbandBtnChgCd());
		// ボタン位置変更 フロント第1釦
		coOptionShirtStandardInfo.setOsBtnPosChgFront1(orderSt.getStFrtfirstBtnChgCd());
		// ボタン位置変更 フロント第2釦
		coOptionShirtStandardInfo.setOsBtnPosChgFront2(orderSt.getStFrtsecondBtnChgCd());
		
		// ボタン位置変更 台襟釦値
		coOptionShirtStandardInfo.setStNeckbandBtnPosChg(orderSt.getStNeckbandBtnPosChg());
		// ボタン位置変更 フロント第1釦値
		coOptionShirtStandardInfo.setStFrtfirstBtnPosChg(orderSt.getStFrtfirstBtnPosChg());
		// ボタン位置変更 フロント第2釦値
		coOptionShirtStandardInfo.setStFrtsecondBtnPosChg(orderSt.getStFrtsecondBtnPosChg());
	}
	
	public void shirtDefaultValue(OrderCoForm orderCoForm) {
		// 標準
		CoOptionShirtStandardInfo optionShirtStandardInfo = orderCoForm.getCoOptionShirtStandardInfo();
		optionShirtStandardInfo.setOsShirtModel("");
		optionShirtStandardInfo.setOsChainModel(OptionCodeKeys.sht_0000100);
		optionShirtStandardInfo.setOsCuffs(OptionCodeKeys.sht_0000200);
		optionShirtStandardInfo.setOsConvertible(OptionCodeKeys.sht_0000301);
		optionShirtStandardInfo.setOsAdjustBtn(OptionCodeKeys.sht_0000401);
		optionShirtStandardInfo.setOsClericSpec(OptionCodeKeys.sht_0000501);
		optionShirtStandardInfo.setOsDblCuff(OptionCodeKeys.sht_0000601);
		optionShirtStandardInfo.setOsAddCuff(OptionCodeKeys.sht_0000701);
		optionShirtStandardInfo.setOsBtnMate(OptionCodeKeys.sht_0000801);
		optionShirtStandardInfo.setOsTabBtn(OptionCodeKeys.sht_0000901);
		optionShirtStandardInfo.setOsGaletteBtnPos(OptionCodeKeys.sht_0001001);
		optionShirtStandardInfo.setOsPinHolePin(OptionCodeKeys.sht_0001101);
		optionShirtStandardInfo.setOsBreastPk(OptionCodeKeys.sht_0001201);
		optionShirtStandardInfo.setOsBreastPkSize(OptionCodeKeys.sht_0001301);
		optionShirtStandardInfo.setOsFrontDesign(OptionCodeKeys.sht_0001401);
		optionShirtStandardInfo.setOsPinTack(OptionCodeKeys.sht_0001501);
		optionShirtStandardInfo.setOsStitch(OptionCodeKeys.sht_0001601);
		optionShirtStandardInfo.setOsColorKeeper(OptionCodeKeys.sht_0001701);
		optionShirtStandardInfo.setOsBhColor(OptionCodeKeys.sht_0001901);
		optionShirtStandardInfo.setOsByColor(OptionCodeKeys.sht_0001801);
		optionShirtStandardInfo.setOsCasHemLine(OptionCodeKeys.sht_0002001);
		optionShirtStandardInfo.setOsBtnPosChg(OptionCodeKeys.sht_0002101);

	}

	public void coatDefaultValueFromDb(OrderCoForm orderCoForm, Order orderCt) {
		CoOptionCoatStandardInfo optionCoatStandardInfo = orderCoForm.getCoOptionCoatStandardInfo();
		optionCoatStandardInfo.setCoatModel(orderCt.getCtModelCd());
		optionCoatStandardInfo.setOcLapelDesign(orderCt.getCtLapelDesignCd());
		optionCoatStandardInfo.setOcWaistPkt(orderCt.getCtWaistPktCd());
		optionCoatStandardInfo.setOcChangePkt(orderCt.getCtChgPktCd());
		optionCoatStandardInfo.setOcSlantedPkt(orderCt.getCtSlantedPktCd());
		optionCoatStandardInfo.setOcVentSpec(orderCt.getCtVentCd());
		optionCoatStandardInfo.setOcFrontBtnCnt(orderCt.getCtFrtBtnCd());
		optionCoatStandardInfo.setOcCuffSpec(orderCt.getCtCuffCd());
		optionCoatStandardInfo.setOcSleeveBtnType(orderCt.getCtSleeveBtnCd());
		optionCoatStandardInfo.setOcBackBelt(orderCt.getCtBackBeltCd());
		optionCoatStandardInfo.setOcChainHange(orderCt.getCtCollarHangCd());
		optionCoatStandardInfo.setOcBodyBackMate(orderCt.getCtInnerBodyClothType());
		optionCoatStandardInfo.setOcBodyBackMateStkNo(orderCt.getCtInnerBodyClothCd());
		optionCoatStandardInfo.setOcCuffBackMate(orderCt.getCtInnerSleeveClothType());
		optionCoatStandardInfo.setOcCuffBackMateStkNo(orderCt.getCtInnerSleeveClothCd());
		optionCoatStandardInfo.setOcFrontBtnMate(orderCt.getCtBtnMaterialType());
		optionCoatStandardInfo.setOcFrontBtnMateStkNo(orderCt.getCtBtnMaterialCd());
		optionCoatStandardInfo.setOcSleeveSpec(orderCt.getCtSleeveTypeCd());
	}

	public List<TypeSizeOptimization> getCoTypeSizeOptimization(List<TypeSize> coTypeSizeList) {
		List<TypeSizeOptimization> typeSizeList = new ArrayList<TypeSizeOptimization>();
		for (TypeSize typeSize : coTypeSizeList) {
			TypeSizeOptimization typeSizeOptimization = new TypeSizeOptimization();
			typeSizeOptimization.setAdjustClass(typeSize.getAdjustClass());
			typeSizeOptimization.setTypeSize(typeSize.getTypeSize().toString());
			typeSizeOptimization.setTypeSize1Intack(typeSize.getTypeSize1Intack().toString());
			typeSizeOptimization.setTypeSize1Outtack(typeSize.getTypeSize1Outtack().toString());
			typeSizeOptimization.setTypeSize2Intack(typeSize.getTypeSize2Intack().toString());
			typeSizeOptimization.setTypeSize2Outtack(typeSize.getTypeSize2Outtack().toString());
			typeSizeList.add(typeSizeOptimization);
		}
		return typeSizeList;
	}

	public void pantsAdjustFromDb(OrderCoForm orderCoForm, Order order) {
		if("9000101".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionPantsStandardInfo().setOpPantsModel(order.getPtModelCd());
		}else if("9000102".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionPantsTuxedoInfo().setTpPantsModel(order.getPtModelCd());
		}else if("9000103".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionPantsWashableInfo().setWpPantsModel(order.getPtModelCd());
		}
		orderCoForm.getCoOptionPantsStandardInfo().setOpStitchModify(order.getPtModelCd());
		
		orderCoForm.getCoAdjustPantsStandardInfo().setSizeFigure(order.getCorPtDrop());
		orderCoForm.getCoAdjustPantsStandardInfo().setSizeNumber(order.getCorPtSize());

		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtWaistSize(order.getCorPtWaistSize().toString());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtWaistGross(order.getCorPtWaistGross().toString());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtWaistCorrect(order.getCorPtWaistCorrect().toString());

		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtThighSize(order.getCorPtThighwidthSize().toString());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtThighGross(order.getCorPtThighwidthGross().toString());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtThighCorrect(order.getCorPtThighwidthCorrect().toString());

		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtHemwidthType(order.getCorPtHemwidthType());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtHemwidthSize(order.getCorPtHemwidthSize().toString());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtHemwidthGross(order.getCorPtHemwidthGross().toString());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtHemwidthCorrect(order.getCorPtHemwidthCorrect().toString());

		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtHipSize(order.getCorPtHipSize().toString());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtHipGross(order.getCorPtHipGross().toString());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtHipCorrect(order.getCorPtHipCorrect().toString());

		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtRightinseamSize(order.getCorPtRightinseamSize().toString());
		orderCoForm.getCoAdjustPantsStandardInfo()
				.setCorPtRightinseamGross(order.getCorPtRightinseamGross().toString());
		//orderCoForm.getCoAdjustPantsStandardInfo()
				//.setCorPtRightinseamCorrect(order.getCorPtRightinseamCorrect().toString());

		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtLeftinseamSize(order.getCorPtLeftinseamSize().toString());
		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtLeftinseamGross(order.getCorPtLeftinseamGross().toString());
		//orderCoForm.getCoAdjustPantsStandardInfo()
				//.setCorPtLeftinseamCorrect(order.getCorPtLeftinseamCorrect().toString());

		orderCoForm.getCoAdjustPantsStandardInfo().setCorPtStoreCorrectionMemo(order.getCorPtStoreCorrectionMemo());

	}

	public void giletAdjustFromDb(OrderCoForm orderCoForm, Order order) {
		
		if("9000101".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionGiletStandardInfo().setOgGiletModel(order.getGlModelCd());
		}else if("9000102".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionGiletTuxedoInfo().setTgGiletModel(order.getGlModelCd());
		}else if("9000103".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionGiletWashableInfo().setWgGiletModel(order.getGlModelCd());
		}
		orderCoForm.getCoAdjustGiletStandardInfo().setSizeFigure(order.getCorGlDrop());
		orderCoForm.getCoAdjustGiletStandardInfo().setSizeNumber(order.getCorGlSize());

		orderCoForm.getCoAdjustGiletStandardInfo().setCorGlBodySize(order.getCorGlBodylengthSize().toString());
		orderCoForm.getCoAdjustGiletStandardInfo().setCorGlBodyGross(order.getCorGlBodylengthGross().toString());
		orderCoForm.getCoAdjustGiletStandardInfo().setCorGlBodyCorrect(order.getCorGlBodylengthCorrect().toString());

		orderCoForm.getCoAdjustGiletStandardInfo().setCorGlBustSize(order.getCorGlBustSize().toString());
		orderCoForm.getCoAdjustGiletStandardInfo().setCorGlBustGross(order.getCorGlBustGross().toString());
		orderCoForm.getCoAdjustGiletStandardInfo().setCorGlBustCorrect(order.getCorGlBustCorrect().toString());

		orderCoForm.getCoAdjustGiletStandardInfo().setCorGlWaistSize(order.getCorGlWaistSize().toString());
		orderCoForm.getCoAdjustGiletStandardInfo().setCorGlWaistCorrect(order.getCorGlWaistCorrect().toString());
		orderCoForm.getCoAdjustGiletStandardInfo().setCorGlWaistGross(order.getCorGlWaistGross().toString());

	}

	public void pants2AdjustFromDb(OrderCoForm orderCoForm, Order order) {
		if("9000101".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionPants2StandardInfo().setOp2PantsModel(order.getPt2ModelCd());
		}else if("9000102".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionPants2TuxedoInfo().setTp2PantsModel(order.getPt2ModelCd());
		}else if("9000103".equals(order.getProductCategory())) {
			orderCoForm.getCoOptionPants2WashableInfo().setWp2PantsModel(order.getPt2ModelCd());
		}
		orderCoForm.getCoAdjustPants2StandardInfo().setSizeFigure(order.getCorPt2Drop());
		orderCoForm.getCoAdjustPants2StandardInfo().setSizeNumber(order.getCorPt2Size());

		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2WaistSize(order.getCorPt2WaistSize().toString());
		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2WaistGross(order.getCorPt2WaistGross().toString());
		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2WaistCorrect(order.getCorPt2WaistCorrect().toString());

		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2ThighSize(order.getCorPt2ThighwidthSize().toString());
		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2ThighGross(order.getCorPt2ThighwidthGross().toString());
		orderCoForm.getCoAdjustPants2StandardInfo()
				.setCorPt2ThighCorrect(order.getCorPt2ThighwidthCorrect().toString());

		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2HemwidthType(order.getCorPt2HemwidthType());
		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2HemwidthSize(order.getCorPt2HemwidthSize().toString());
		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2HemwidthGross(order.getCorPt2HemwidthGross().toString());
		orderCoForm.getCoAdjustPants2StandardInfo()
				.setCorPt2HemwidthCorrect(order.getCorPt2HemwidthCorrect().toString());

		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2HipSize(order.getCorPt2HipSize().toString());
		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2HipGross(order.getCorPt2HipGross().toString());
		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2HipCorrect(order.getCorPt2HipCorrect().toString());

		orderCoForm.getCoAdjustPants2StandardInfo()
				.setCorPt2RightinseamSize(order.getCorPt2RightinseamSize().toString());
		orderCoForm.getCoAdjustPants2StandardInfo()
				.setCorPt2RightinseamGross(order.getCorPt2RightinseamGross().toString());
		//orderCoForm.getCoAdjustPants2StandardInfo()
				//.setCorPt2RightinseamCorrect(order.getCorPt2RightinseamCorrect().toString());

		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2LeftinseamSize(order.getCorPt2LeftinseamSize().toString());
		orderCoForm.getCoAdjustPants2StandardInfo()
				.setCorPt2LeftinseamGross(order.getCorPt2LeftinseamGross().toString());
		//orderCoForm.getCoAdjustPants2StandardInfo()
				//.setCorPt2LeftinseamCorrect(order.getCorPt2LeftinseamCorrect().toString());

		orderCoForm.getCoAdjustPants2StandardInfo().setCorPt2StoreCorrectionMemo(order.getCorPt2StoreCorrectionMemo());

	}

	public void shirtAdjustFromDb(OrderCoForm orderCoForm, Order order) {
		
		orderCoForm.getCoOptionShirtStandardInfo().setOsShirtModel(order.getStModelCd());
		orderCoForm.getCoOptionShirtStandardInfo().setOsCasHemLine(order.getStCasualHemlineCd());
		
		orderCoForm.getCoAdjustShirtStandardInfo().setCorStSize(order.getCorStSize());

		orderCoForm.getCoAdjustShirtStandardInfo().setCorStNeckSize(order.getCorStNeckSize().toString());
		orderCoForm.getCoAdjustShirtStandardInfo().setCorStNeckGross(order.getCorStNeckGross().toString());
		orderCoForm.getCoAdjustShirtStandardInfo().setCorStNeckCorrect(order.getCorStNeckCorrect().toString());

		orderCoForm.getCoAdjustShirtStandardInfo().setCorStBodylengthSize(order.getCorStBodylengthSize().toString());
		orderCoForm.getCoAdjustShirtStandardInfo().setCorStBodylengthGross(order.getCorStBodylengthGross().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStBodylengthCorrect(order.getCorStBodylengthCorrect().toString());

		orderCoForm.getCoAdjustShirtStandardInfo().setCorStRightsleeveSize(order.getCorStRightsleeveSize().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStRightsleeveGross(order.getCorStRightsleeveGross().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStRightsleeveCorrect(order.getCorStRightsleeveCorrect().toString());

		orderCoForm.getCoAdjustShirtStandardInfo().setCorStLeftsleeveSize(order.getCorStLeftsleeveSize().toString());
		orderCoForm.getCoAdjustShirtStandardInfo().setCorStLeftsleeveGross(order.getCorStLeftsleeveGross().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStLeftsleeveCorrect(order.getCorStLeftsleeveCorrect().toString());

//		orderCoForm.getCoAdjustShirtStandardInfo()
//				.setCorStBackdartsPackSize(order.getCorStBackdartsPackSize().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStBackdartsPackGross(order.getCorStBackdartsPackGross().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStBackdartsPackCorrect(order.getCorStBackdartsPackCorrect().toString());

//		orderCoForm.getCoAdjustShirtStandardInfo()
//				.setCorStBackdartsUnpackSize(order.getCorStBackdartsUnpackSize().toString());
//		orderCoForm.getCoAdjustShirtStandardInfo()
//				.setCorStBackdartsUnpackGross(order.getCorStBackdartsUnpackGross().toString());
//		orderCoForm.getCoAdjustShirtStandardInfo()
//				.setCorStBackdartsUnpackCorrect(order.getCorStBackdartsUnpackCorrect().toString());

		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStRightcuffsSurroundingSize(order.getCorStRightcuffsSurroundingSize().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStRightcuffsSurroundingGross(order.getCorStRightcuffsSurroundingGross().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStRightcuffsSurroundingCorrect(order.getCorStRightcuffsSurroundingCorrect().toString());

		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStLeftcuffsSurroundingSize(order.getCorStLeftcuffsSurroundingSize().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStLeftcuffsSurroundingGross(order.getCorStLeftcuffsSurroundingGross().toString());
		orderCoForm.getCoAdjustShirtStandardInfo()
				.setCorStLeftcuffsSurroundingCorrect(order.getCorStLeftcuffsSurroundingCorrect().toString());
		orderCoForm.getCoAdjustShirtStandardInfo().setCorStBackdartsUnpackCd(order.getCorStBackdartsUnpackCd());
		
		orderCoForm.setCorStoreCorrectionMemoAgain(order.getCorStoreCorrectionMemo());
		

	}

	public void coatAdjustFromDb(OrderCoForm orderCoForm, Order order) {
		orderCoForm.getCoOptionCoatStandardInfo().setCoatModel(order.getCtModelCd());
		
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtSize(order.getCorCtSize());

		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtBodylengthSize(order.getCorCtBodylengthSize().toString());
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtBodylengthGross(order.getCorCtBodylengthGross().toString());
		orderCoForm.getCoAdjustCoatStandardInfo()
				.setCorCtBodylengthCorrect(order.getCorCtBodylengthCorrect().toString());

		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtWaistSize(order.getCorCtWaistSize().toString());
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtWaistGross(order.getCorCtWaistGross().toString());
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtWaistCorrect(order.getCorCtWaistCorrect().toString());

		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtRightsleeveSize(order.getCorCtRightsleeveSize().toString());
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtRightsleeveGross(order.getCorCtRightsleeveGross().toString());
		orderCoForm.getCoAdjustCoatStandardInfo()
				.setCorCtRightsleeveCorrect(order.getCorCtRightsleeveCorrect().toString());

		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtLeftsleeveSize(order.getCorCtLeftsleeveSize().toString());
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtLeftsleeveGross(order.getCorCtLeftsleeveGross().toString());
		orderCoForm.getCoAdjustCoatStandardInfo()
				.setCorCtLeftsleeveCorrect(order.getCorCtLeftsleeveCorrect().toString());

		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtVenthightSize(order.getCorCtVenthightSize().toString());
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtVenthightGross(order.getCorCtVenthightGross().toString());
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtVenthightCorrect(order.getCorCtVenthightCorrect().toString());

		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtPktposSize(order.getCorCtPktposSize().toString());
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtPktposGross(order.getCorCtPktposGross().toString());
		orderCoForm.getCoAdjustCoatStandardInfo().setCorCtPktposCorrect(order.getCorCtPktposCorrect().toString());

	}

	public void findStockModelDoublePrice(OrderFindFabric orderFindFabric, String doubleCheck, String item,
			String subItem) {
		// 上代
		Integer retailPrice = orderFindFabric.getRetailPrice();
		// SUIT
		if ("01".equals(item)) {
			// JACKET
			if ("02".equals(subItem)) {
				// ダブルJACKET
				if ("0000105".equals(doubleCheck) || "0000106".equals(doubleCheck)) {
					Integer additionalDoubleJacketRate = orderFindFabric.getAdditionalDoubleJacketRate();
					BigDecimal jkDoublePice = new BigDecimal(retailPrice)
							.multiply((new BigDecimal(additionalDoubleJacketRate).divide(new BigDecimal("100"))));
					orderFindFabric.setJkDoublePrice(String.valueOf(jkDoublePice));
				} else {
					orderFindFabric.setJkDoublePrice("0");
				}
			}
			// GILET
			if ("04".equals(subItem)) {
				// ダブルGILET
				if ("ET15-D".equals(doubleCheck) || "BS01-D".equals(doubleCheck)) {
					Integer additionalDoubleGiletRate = orderFindFabric.getAdditionalDoubleGiletRate();
					BigDecimal glDoublePice = new BigDecimal(retailPrice)
							.multiply((new BigDecimal(additionalDoubleGiletRate).divide(new BigDecimal("100"))));
					orderFindFabric.setGlDoublePrice(String.valueOf(glDoublePice));
				} else {
					orderFindFabric.setGlDoublePrice("0");
				}
			}
		} else if ("02".equals(item)) {
			// ダブルJACKET
			if ("0000105".equals(doubleCheck) || "0000106".equals(doubleCheck)) {
				Integer doubleJacketOnlyRate = orderFindFabric.getDoubleJacketOnlyRate();
				Integer jkDoubleOnlyPlusAlphaPrice = orderFindFabric.getJkDoubleOnlyPlusAlphaPrice();
				Integer singleJacketOnlyRate = orderFindFabric.getSingleJacketOnlyRate();
				Integer jkSingleOnlyPlusAlphaPrice = orderFindFabric.getJkSingleOnlyPlusAlphaPrice();

				BigDecimal jkDoublePice = new BigDecimal(retailPrice)
						.multiply((new BigDecimal(doubleJacketOnlyRate).divide(new BigDecimal("100"))))
						.add(new BigDecimal(jkDoubleOnlyPlusAlphaPrice));

				BigDecimal jkSinglePice = new BigDecimal(retailPrice)
						.multiply((new BigDecimal(singleJacketOnlyRate).divide(new BigDecimal("100"))))
						.add(new BigDecimal(jkSingleOnlyPlusAlphaPrice));

				BigDecimal subtract = jkDoublePice.subtract(jkSinglePice);
				orderFindFabric.setJkDoublePrice(String.valueOf(subtract));
			} else {
				orderFindFabric.setJkDoublePrice("0");
			}
		} else if ("04".equals(item)) {
			// ダブルGILET
			if ("ET15-D".equals(doubleCheck) || "BS01-D".equals(doubleCheck)) {
				Integer doubleGiletOnlyRate = orderFindFabric.getDoubleGiletOnlyRate();
				Integer glDoubleOnlyPlusAlphaPrice = orderFindFabric.getGlDoubleOnlyPlusAlphaPrice();
				Integer singleGiletOnlyRate = orderFindFabric.getSingleGiletOnlyRate();
				Integer glSingleOnlyPlusAlphaPrice = orderFindFabric.getGlSingleOnlyPlusAlphaPrice();

				BigDecimal glDoublePice = new BigDecimal(retailPrice)
						.multiply((new BigDecimal(doubleGiletOnlyRate).divide(new BigDecimal("100"))))
						.add(new BigDecimal(glDoubleOnlyPlusAlphaPrice));

				BigDecimal glSinglePice = new BigDecimal(retailPrice)
						.multiply((new BigDecimal(singleGiletOnlyRate).divide(new BigDecimal("100"))))
						.add(new BigDecimal(glSingleOnlyPlusAlphaPrice));

				BigDecimal subtract = glDoublePice.subtract(glSinglePice);
				orderFindFabric.setGlDoublePrice(String.valueOf(subtract));
			} else {
				orderFindFabric.setGlDoublePrice("0");
			}
		} else if ("06".equals(item)) {
			Integer coatDoubleOnlyRate = orderFindFabric.getCoatDoubleOnlyRate();
			Integer ctDoubleOnlyPlusAlphaPrice = orderFindFabric.getCtDoubleOnlyPlusAlphaPrice();
			Integer coatSingleOnlyRate = orderFindFabric.getCoatSingleOnlyRate();
			Integer ctSingleOnlyPlusAlphaPrice = orderFindFabric.getCtSingleOnlyPlusAlphaPrice();

			BigDecimal ctDoublePice = new BigDecimal(retailPrice)
					.multiply((new BigDecimal(coatDoubleOnlyRate).divide(new BigDecimal("100"))))
					.add(new BigDecimal(ctDoubleOnlyPlusAlphaPrice));

			BigDecimal ctSinglePice = new BigDecimal(retailPrice)
					.multiply((new BigDecimal(coatSingleOnlyRate).divide(new BigDecimal("100"))))
					.add(new BigDecimal(ctSingleOnlyPlusAlphaPrice));

			BigDecimal subtract = ctDoublePice.subtract(ctSinglePice);
			orderFindFabric.setCtDoublePrice(String.valueOf(subtract));
		}

	}
	
	/**
	 * オーダーのitemCodeとsubItemCode
	 * 
	 * @param order
	 * @param jkSubItemCode
	 * @param gtSubItemCode
	 * @param ptSubItemCode
	 * @param pt2SubItemCode
	 * @param shirtSubItemCode
	 * @param coatSubItemCode
	 * @return
	 */
	public Map<String, String> subItemCoCodeValue(OrderCoForm orderCoForm, String jkSubItemCode, String gtSubItemCode,
			String ptSubItemCode, String pt2SubItemCode, String shirtSubItemCode, String coatSubItemCode) {
		String itemCode = orderCoForm.getProductItem();
		String productIs3Piece = orderCoForm.getProductIs3Piece();
		String productSparePantsClass = orderCoForm.getProductSparePantsClass();
		Map<String, String> valueSubItemCodeMap = new HashMap<String, String>();
		// ３Pieceまたはスペアパンツは有り
		String productYes = "0009902";
		// ３Pieceまたはスペアパンツは無し
		String productNo = "0009901";
		// 01:SUIT
		String suitCode = "01";
		// 02:JACKET
		String jacketCode = "02";
		// 03:PANTS
		String pantsCode = "03";
		// 04:GILET
		String giletCode = "04";
		// 05:SHIRT
		String shirtCode = "05";
		// 06:COAT
		String coatCode = "06";
		// 07:PANTS2
		String pants2Code = "07";
		if (itemCode.equals(suitCode)) {
			if (productIs3Piece.equals(productYes) && productSparePantsClass.equals(productYes)) {
				jkSubItemCode = jacketCode;
				gtSubItemCode = giletCode;
				ptSubItemCode = pantsCode;
				pt2SubItemCode = pants2Code;
				shirtSubItemCode = null;
				coatSubItemCode = null;
			} else if (productIs3Piece.equals(productYes) && productSparePantsClass.equals(productNo)) {
				jkSubItemCode = jacketCode;
				gtSubItemCode = giletCode;
				ptSubItemCode = pantsCode;
				pt2SubItemCode = null;
				shirtSubItemCode = null;
				coatSubItemCode = null;
			} else if (productIs3Piece.equals(productNo) && productSparePantsClass.equals(productYes)) {
				jkSubItemCode = jacketCode;
				gtSubItemCode = null;
				ptSubItemCode = pantsCode;
				pt2SubItemCode = pants2Code;
				shirtSubItemCode = null;
				coatSubItemCode = null;
			} else if (productIs3Piece.equals(productNo) && productSparePantsClass.equals(productNo)) {
				jkSubItemCode = jacketCode;
				gtSubItemCode = null;
				ptSubItemCode = pantsCode;
				pt2SubItemCode = null;
				shirtSubItemCode = null;
				coatSubItemCode = null;
			}
		} else if (itemCode.equals(jacketCode)) {
			jkSubItemCode = jacketCode;
			gtSubItemCode = null;
			ptSubItemCode = null;
			pt2SubItemCode = null;
			shirtSubItemCode = null;
			coatSubItemCode = null;
		} else if (itemCode.equals(pantsCode)) {
			jkSubItemCode = null;
			gtSubItemCode = null;
			ptSubItemCode = pantsCode;
			pt2SubItemCode = null;
			shirtSubItemCode = null;
			coatSubItemCode = null;
		} else if (itemCode.equals(giletCode)) {
			jkSubItemCode = null;
			gtSubItemCode = giletCode;
			ptSubItemCode = null;
			pt2SubItemCode = null;
			shirtSubItemCode = null;
			coatSubItemCode = null;
		} else if (itemCode.equals(shirtCode)) {
			jkSubItemCode = null;
			gtSubItemCode = null;
			ptSubItemCode = null;
			pt2SubItemCode = null;
			shirtSubItemCode = shirtCode;
			coatSubItemCode = null;
		} else if (itemCode.equals(coatCode)) {
			jkSubItemCode = null;
			gtSubItemCode = null;
			ptSubItemCode = null;
			pt2SubItemCode = null;
			shirtSubItemCode = null;
			coatSubItemCode = coatCode;
		}
		valueSubItemCodeMap.put("jkSubItemCode", jkSubItemCode);
		valueSubItemCodeMap.put("gtSubItemCode", gtSubItemCode);
		valueSubItemCodeMap.put("ptSubItemCode", ptSubItemCode);
		valueSubItemCodeMap.put("pt2SubItemCode", pt2SubItemCode);
		valueSubItemCodeMap.put("shirtSubItemCode", shirtSubItemCode);
		valueSubItemCodeMap.put("coatSubItemCode", coatSubItemCode);
		return valueSubItemCodeMap;
	}
	
	
	/**
	 * JACKET_下代工賃とJACKET_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoStandardJkNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_JACKET.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionJacketStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_JACKET.getValue();

		JacketCoOptionStandardNextGenerationPriceEnum[] nextGenerationPriceEnum = JacketCoOptionStandardNextGenerationPriceEnum
				.values();
		for (JacketCoOptionStandardNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketStandardInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice jkNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(jkNextGenerationPrice.getKeyCode())) {
						// フロント釦数はダブル6つボタンまたはダブル4つボタンの場合、該当itemはダブル
						if ("0000105".equals(orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt()) || "0000106".equals(orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = jkNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionDoublePrice = jkNextGenerationPrice.getMoapDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						}
						// 該当itemはダブル以外の場合
						else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = jkNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionPrice = jkNextGenerationPrice.getMoapPrice();
							Integer nextGenerationPriceValue = optionPrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0.0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * 標準JACKETのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoStandardJkDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_JACKET.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionJacketStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_JACKET.getValue();

		JacketCoOptionDetailStandardNextGenerationPriceEnum[] nextGenerationPriceEnum = JacketCoOptionDetailStandardNextGenerationPriceEnum
				.values();

		for (JacketCoOptionDetailStandardNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();
			String valueFour = nextGenerationPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, valueOne);
				Method myMethodTwo = getMethod(cls, valueTwo);
				Object[] args = {};
				Object[] argsTwo = {};
				Object resultOne = null;
				Object resultTwo = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketStandardInfo(), args);
				}

				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionJacketStandardInfo(), argsTwo);
				}

				String keyDetailCode = itemCode + subItemCode + key + resultOne + resultTwo;
				for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
					if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
						// フロント釦数はダブル6つボタンまたはダブル4つボタンの場合、該当itemはダブル
						if ("0000105".equals(orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt()) || "0000106".equals(orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionDoublePrice = detailNextGenerationPrice.getMoapDoublePriceT();
							Integer optionDetailDoublePrice = detailNextGenerationPrice.getMoadpDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice + optionDetailDoublePrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						} else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionPrice = detailNextGenerationPrice.getMoapPriceT();
							Integer optionDetailPrice = detailNextGenerationPrice.getMoadpPrice();
							Integer nextGenerationPriceValue = optionPrice + optionDetailPrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodThree = getMethod(cls, valueThree);
						Method myMethodFour = getMethod(cls, valueFour);
						Object[] argsValueThree = { new BigDecimal(0) };
						Object[] argsValueFour = { 0 };
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						if (myMethodFour != null) {
							ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * 標準PANTS_下代工賃とPANTS_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoStandardPtNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_PANTS.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionPantsStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_PANTS.getValue();

		PantsCoOptionStandardNextGenerationPriceEnum[] nextGenerationPriceEnum = PantsCoOptionStandardNextGenerationPriceEnum
				.values();
		for (PantsCoOptionStandardNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPantsStandardInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice ptNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(ptNextGenerationPrice.getKeyCode())) {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						// オプション工賃
						BigDecimal optionWage = ptNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = optionWage;
						// オプション付属
						Integer optionPrice = ptNextGenerationPrice.getMoapPrice();
						Integer nextGenerationPriceValue = optionPrice;
						Object[] argsValueTwo = { nextGenerationWageValue };
						Object[] argsValueThree = { nextGenerationPriceValue };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0.0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * PANTSのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoStandardPtDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_PANTS.getKey();

		String optionCode = "00033";
		String optionBranchCode = orderCoForm.getCoOptionPantsStandardInfo().getOpButton();
		String optionBranchDetailCode = orderCoForm.getCoOptionPantsStandardInfo().getOpBtnMateStkNo();

		String keyDetailCode = itemCode + subItemCode + optionCode + optionBranchCode + optionBranchDetailCode;
		for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
			if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
				// オプション工賃
				BigDecimal mowWageT = detailNextGenerationPrice.getMowWageT();
				BigDecimal nextGenerationWageValue = mowWageT;
				// オプション付属 + オプション付属詳細
				Integer moapPriceT = detailNextGenerationPrice.getMoapPriceT();
				Integer moadpPrice = detailNextGenerationPrice.getMoadpPrice();
				Integer nextGenerationPriceValue = moapPriceT + moadpPrice;
				order.setPtBtnMaterialWsWage(nextGenerationWageValue);
				order.setPtBtnMaterialWsPrice(nextGenerationPriceValue);
				break;
			} else {
				order.setPtBtnMaterialWsWage(new BigDecimal(0));
				order.setPtBtnMaterialWsPrice(0);
			}
		}
	}
	
	/**
	 * 標準GILET_下代工賃とGILET_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoStandardGlNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_GILET.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_GILET.getValue();

		GiletCoOptionStandardNextGenerationPriceEnum[] nextGenerationPriceEnum = GiletCoOptionStandardNextGenerationPriceEnum
				.values();
		for (GiletCoOptionStandardNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletStandardInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice glNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(glNextGenerationPrice.getKeyCode())) {
						// GILETモデルはBS01-DまたはET15-Dの場合、該当itemはダブル
						if ("BS01-D".equals(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel()) || "ET15-D".equals(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = glNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionDoublePrice = glNextGenerationPrice.getMoapDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						} else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = glNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionPrice = glNextGenerationPrice.getMoapPrice();
							Integer nextGenerationPriceValue = optionPrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * 標準GILETのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoStandardGlDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_GILET.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_GILET.getValue();

		GiletCoOptionDetailStandardNextGenerationPriceEnum[] nextGenerationPriceEnum = GiletCoOptionDetailStandardNextGenerationPriceEnum
				.values();
		for (GiletCoOptionDetailStandardNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {
			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();
			String valueFour = nextGenerationPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Method myMethodTwo = getMethod(cls, valueTwo);
				Object[] args = {};
				Object[] argsTwo = {};
				Object resultOne = null;
				Object resultTwo = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletStandardInfo(), args);
				}

				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionGiletStandardInfo(), argsTwo);
				}

				String keyDetailCode = itemCode + subItemCode + key + resultOne + resultTwo;
				for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
					if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
						// GILETモデルはBS01-DまたはET15-Dの場合、該当itemはダブル
						if ("BS01-D".equals(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel()) || "ET15-D".equals(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionDoublePrice = detailNextGenerationPrice.getMoapDoublePriceT();
							Integer optionDetailDoublePrice = detailNextGenerationPrice.getMoadpDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice + optionDetailDoublePrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						} else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionPrice = detailNextGenerationPrice.getMoapPriceT();
							Integer optionDetailPrice = detailNextGenerationPrice.getMoadpPrice();
							Integer nextGenerationPriceValue = optionPrice + optionDetailPrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodThree = getMethod(cls, valueThree);
						Method myMethodFour = getMethod(cls, valueFour);
						Object[] argsValueThree = { new BigDecimal(0.0) };
						Object[] argsValueFour = { 0 };
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						if (myMethodFour != null) {
							ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * 標準PANTS2_下代工賃とPANTS2_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 * 
	 */
	public void getCoStandardPt2NextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_PANTS2.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionPants2StandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_PANTS2.getValue();

		Pants2CoOptionStandardNextGenerationPriceEnum[] nextGenerationPriceEnum = Pants2CoOptionStandardNextGenerationPriceEnum
				.values();
		for (Pants2CoOptionStandardNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPants2StandardInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice pt2NextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(pt2NextGenerationPrice.getKeyCode())) {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						// オプション工賃
						BigDecimal optionWage = pt2NextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = optionWage;
						// オプション付属
						Integer optionPrice = pt2NextGenerationPrice.getMoapPrice();
						Integer nextGenerationPriceValue = optionPrice;
						Object[] argsValueTwo = { nextGenerationWageValue };
						Object[] argsValueThree = { nextGenerationPriceValue };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * 標準PANTS2のオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoStandardPt2DetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_PANTS2.getKey();
		String optionCode = "00033";
		String optionBranchCode = orderCoForm.getCoOptionPants2StandardInfo().getOp2Button();
		String optionBranchDetailCode = orderCoForm.getCoOptionPants2StandardInfo().getOp2BtnMateStkNo();

		String keyDetailCode = itemCode + subItemCode + optionCode + optionBranchCode + optionBranchDetailCode;
		for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
			if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
				// オプション工賃
				BigDecimal mowWageT = detailNextGenerationPrice.getMowWageT();
				BigDecimal nextGenerationWageValue = mowWageT;
				// オプション付属 + オプション付属詳細
				Integer moapPriceT = detailNextGenerationPrice.getMoapPriceT();
				Integer moadpPrice = detailNextGenerationPrice.getMoadpPrice();
				Integer nextGenerationPriceValue = moapPriceT + moadpPrice;
				order.setPt2BtnMaterialWsWage(nextGenerationWageValue);
				order.setPt2BtnMaterialWsPrice(nextGenerationPriceValue);
				break;
			} else {
				order.setPt2BtnMaterialWsWage(new BigDecimal(0));
				order.setPt2BtnMaterialWsPrice(0);
			}
		}
	}
	
	/**
	 * 標準Coat下代工賃とCoat_下代付属をデータベースに入力する
	 * @param orderCoForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoStandardCtNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {
		
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_COAT.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionCoatStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_COAT.getValue();

		CoatCoOptionStandardNextGenerationPriceEnum[] nextGenerationPriceEnum = CoatCoOptionStandardNextGenerationPriceEnum
				.values();
		for (CoatCoOptionStandardNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionCoatStandardInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice ptNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(ptNextGenerationPrice.getKeyCode())) {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						// オプション工賃
						BigDecimal optionWage = ptNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = optionWage;
						// オプション付属
						Integer optionPrice = ptNextGenerationPrice.getMoapPrice();
						Integer nextGenerationPriceValue = optionPrice;
						Object[] argsValueTwo = { nextGenerationWageValue };
						Object[] argsValueThree = { nextGenerationPriceValue };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0.0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * 標準Coatのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoStandardCtDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_COAT.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_COAT.getValue();

		CoatCoOptionDetailStandardNextGenerationPriceEnum[] nextGenerationPriceEnum = CoatCoOptionDetailStandardNextGenerationPriceEnum
				.values();
		for (CoatCoOptionDetailStandardNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {
			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();
			String valueFour = nextGenerationPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Method myMethodTwo = getMethod(cls, valueTwo);
				Object[] args = {};
				Object[] argsTwo = {};
				Object resultOne = null;
				Object resultTwo = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionCoatStandardInfo(), args);
				}

				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionCoatStandardInfo(), argsTwo);
				}

				String keyDetailCode = itemCode + subItemCode + key + resultOne + resultTwo;
				for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
					if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionPrice = detailNextGenerationPrice.getMoapPriceT();
							Integer optionDetailPrice = detailNextGenerationPrice.getMoadpPrice();
							Integer nextGenerationPriceValue = optionPrice + optionDetailPrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						break;
					}
					 else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodThree = getMethod(cls, valueThree);
						Method myMethodFour = getMethod(cls, valueFour);
						Object[] argsValueThree = { new BigDecimal(0) };
						Object[] argsValueFour = { 0 };
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						if (myMethodFour != null) {
							ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * 標準Shirt下代工賃とShirt_下代付属をデータベースに入力する
	 * @param orderCoForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoStandardStNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {
		
		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassStandardEnum.ITEM_CODE_SHIRTS.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionShirtStandardInfoの取得
		String className = CoItemClassStandardEnum.ITEM_CODE_SHIRTS.getValue();

		ShirtCoOptionStandardNextGenerationPriceEnum[] nextGenerationPriceEnum = ShirtCoOptionStandardNextGenerationPriceEnum
				.values();
		for (ShirtCoOptionStandardNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionShirtStandardInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice ptNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(ptNextGenerationPrice.getKeyCode())) {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						// オプション工賃
						BigDecimal optionWage = ptNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = optionWage;
						// オプション付属
						Integer optionPrice = ptNextGenerationPrice.getMoapPrice();
						Integer nextGenerationPriceValue = optionPrice;
						Object[] argsValueTwo = { nextGenerationWageValue };
						Object[] argsValueThree = { nextGenerationPriceValue };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0.0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 *タキシードJACKET_下代工賃とJACKET_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoTuxedoJkNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_JACKET.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionJacketTuxedoInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_JACKET.getValue();

		JacketCoOptionTuxedoNextGenerationPriceEnum[] nextGenerationPriceEnum = JacketCoOptionTuxedoNextGenerationPriceEnum
				.values();
		for (JacketCoOptionTuxedoNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketTuxedoInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice jkNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(jkNextGenerationPrice.getKeyCode())) {
						// フロント釦数はダブル6つボタンまたはダブル4つボタンの場合、該当itemはダブル
						if ("0000105".equals(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt()) || "0000106".equals(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = jkNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionDoublePrice = jkNextGenerationPrice.getMoapDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						}
						// 該当itemはダブル以外の場合
						else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = jkNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionPrice = jkNextGenerationPrice.getMoapPrice();
							Integer nextGenerationPriceValue = optionPrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0.0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}

	/**
	 * タキシードJACKETのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoTuxedoJkDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_JACKET.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionJacketTuxedoInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_JACKET.getValue();

		JacketCoOptionDetailTuxedoNextGenerationPriceEnum[] nextGenerationPriceEnum = JacketCoOptionDetailTuxedoNextGenerationPriceEnum
				.values();

		for (JacketCoOptionDetailTuxedoNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();
			String valueFour = nextGenerationPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, valueOne);
				Method myMethodTwo = getMethod(cls, valueTwo);
				Object[] args = {};
				Object[] argsTwo = {};
				Object resultOne = null;
				Object resultTwo = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketTuxedoInfo(), args);
				}

				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionJacketTuxedoInfo(), argsTwo);
				}

				String keyDetailCode = itemCode + subItemCode + key + resultOne + resultTwo;
				for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
					if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
						// フロント釦数はダブル6つボタンまたはダブル4つボタンの場合、該当itemはダブル
						if ("0000105".equals(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt()) || "0000106".equals(orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionDoublePrice = detailNextGenerationPrice.getMoapDoublePriceT();
							Integer optionDetailDoublePrice = detailNextGenerationPrice.getMoadpDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice + optionDetailDoublePrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						} else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionPrice = detailNextGenerationPrice.getMoapPriceT();
							Integer optionDetailPrice = detailNextGenerationPrice.getMoadpPrice();
							Integer nextGenerationPriceValue = optionPrice + optionDetailPrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodThree = getMethod(cls, valueThree);
						Method myMethodFour = getMethod(cls, valueFour);
						Object[] argsValueThree = { new BigDecimal(0) };
						Object[] argsValueFour = { 0 };
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						if (myMethodFour != null) {
							ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 *タキシードPANTS_下代工賃とPANTS_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoTuxedoPtNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_PANTS.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionPantsTuxedoInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_PANTS.getValue();

		PantsCoOptionTuxedoNextGenerationPriceEnum[] nextGenerationPriceEnum = PantsCoOptionTuxedoNextGenerationPriceEnum
				.values();
		for (PantsCoOptionTuxedoNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPantsTuxedoInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice ptNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(ptNextGenerationPrice.getKeyCode())) {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						// オプション工賃
						BigDecimal optionWage = ptNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = optionWage;
						// オプション付属
						Integer optionPrice = ptNextGenerationPrice.getMoapPrice();
						Integer nextGenerationPriceValue = optionPrice;
						Object[] argsValueTwo = { nextGenerationWageValue };
						Object[] argsValueThree = { nextGenerationPriceValue };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0.0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 *タキシード PANTSのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoTuxedoPtDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_PANTS.getKey();

		String optionCode = "00033";
		String optionBranchCode = orderCoForm.getCoOptionPantsTuxedoInfo().getTpButton();
		String optionBranchDetailCode = orderCoForm.getCoOptionPantsTuxedoInfo().getTpBtnMateStkNo();

		String keyDetailCode = itemCode + subItemCode + optionCode + optionBranchCode + optionBranchDetailCode;
		for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
			if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
				// オプション工賃
				BigDecimal mowWageT = detailNextGenerationPrice.getMowWageT();
				BigDecimal nextGenerationWageValue = mowWageT;
				// オプション付属 + オプション付属詳細
				Integer moapPriceT = detailNextGenerationPrice.getMoapPriceT();
				Integer moadpPrice = detailNextGenerationPrice.getMoadpPrice();
				Integer nextGenerationPriceValue = moapPriceT + moadpPrice;
				order.setPtBtnMaterialWsWage(nextGenerationWageValue);
				order.setPtBtnMaterialWsPrice(nextGenerationPriceValue);
				break;
			} else {
				order.setPtBtnMaterialWsWage(new BigDecimal(0));
				order.setPtBtnMaterialWsPrice(0);
			}
		}
	}
	
	/**
	 * タキシードGILET_下代工賃とGILET_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoTuxedoGlNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_GILET.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletTuxedoInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_GILET.getValue();

		GiletCoOptionTuxedoNextGenerationPriceEnum[] nextGenerationPriceEnum = GiletCoOptionTuxedoNextGenerationPriceEnum
				.values();
		for (GiletCoOptionTuxedoNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletTuxedoInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice glNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(glNextGenerationPrice.getKeyCode())) {
						// GILETモデルはBS01-DまたはET15-Dの場合、該当itemはダブル
						if ("BS01-D".equals(orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel()) || "ET15-D".equals(orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = glNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionDoublePrice = glNextGenerationPrice.getMoapDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						} else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = glNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionPrice = glNextGenerationPrice.getMoapPrice();
							Integer nextGenerationPriceValue = optionPrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * タキシードGILETのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoTuxedoGlDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_GILET.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletTuxedoInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_GILET.getValue();

		GiletCoOptionDetailTuxedoNextGenerationPriceEnum[] nextGenerationPriceEnum = GiletCoOptionDetailTuxedoNextGenerationPriceEnum
				.values();
		for (GiletCoOptionDetailTuxedoNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {
			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();
			String valueFour = nextGenerationPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Method myMethodTwo = getMethod(cls, valueTwo);
				Object[] args = {};
				Object[] argsTwo = {};
				Object resultOne = null;
				Object resultTwo = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletTuxedoInfo(), args);
				}

				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionGiletTuxedoInfo(), argsTwo);
				}

				String keyDetailCode = itemCode + subItemCode + key + resultOne + resultTwo;
				for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
					if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
						// GILETモデルはBS01-DまたはET15-Dの場合、該当itemはダブル
						if ("BS01-D".equals(orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel()) || "ET15-D".equals(orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionDoublePrice = detailNextGenerationPrice.getMoapDoublePriceT();
							Integer optionDetailDoublePrice = detailNextGenerationPrice.getMoadpDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice + optionDetailDoublePrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						} else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionPrice = detailNextGenerationPrice.getMoapPriceT();
							Integer optionDetailPrice = detailNextGenerationPrice.getMoadpPrice();
							Integer nextGenerationPriceValue = optionPrice + optionDetailPrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodThree = getMethod(cls, valueThree);
						Method myMethodFour = getMethod(cls, valueFour);
						Object[] argsValueThree = { new BigDecimal(0.0) };
						Object[] argsValueFour = { 0 };
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						if (myMethodFour != null) {
							ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 *タキシードPANTS2_下代工賃とPANTS2_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 * 
	 */
	public void getCoTuxedoPt2NextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_PANTS2.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionPants2TuxedoInfoの取得
		String className = CoItemClassTuxedoEnum.ITEM_CODE_PANTS2.getValue();

		Pants2CoOptionTuxedoNextGenerationPriceEnum[] nextGenerationPriceEnum = Pants2CoOptionTuxedoNextGenerationPriceEnum
				.values();
		for (Pants2CoOptionTuxedoNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPants2TuxedoInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice pt2NextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(pt2NextGenerationPrice.getKeyCode())) {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						// オプション工賃
						BigDecimal optionWage = pt2NextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = optionWage;
						// オプション付属
						Integer optionPrice = pt2NextGenerationPrice.getMoapPrice();
						Integer nextGenerationPriceValue = optionPrice;
						Object[] argsValueTwo = { nextGenerationWageValue };
						Object[] argsValueThree = { nextGenerationPriceValue };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * タキシードPANTS2のオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoTuxedoPt2DetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_PANTS2.getKey();
		String optionCode = "00033";
		String optionBranchCode = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2Button();
		String optionBranchDetailCode = orderCoForm.getCoOptionPants2TuxedoInfo().getTp2BtnMateStkNo();

		String keyDetailCode = itemCode + subItemCode + optionCode + optionBranchCode + optionBranchDetailCode;
		for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
			if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
				// オプション工賃
				BigDecimal mowWageT = detailNextGenerationPrice.getMowWageT();
				BigDecimal nextGenerationWageValue = mowWageT;
				// オプション付属 + オプション付属詳細
				Integer moapPriceT = detailNextGenerationPrice.getMoapPriceT();
				Integer moadpPrice = detailNextGenerationPrice.getMoadpPrice();
				Integer nextGenerationPriceValue = moapPriceT + moadpPrice;
				order.setPt2BtnMaterialWsWage(nextGenerationWageValue);
				order.setPt2BtnMaterialWsPrice(nextGenerationPriceValue);
				break;
			} else {
				order.setPt2BtnMaterialWsWage(new BigDecimal(0));
				order.setPt2BtnMaterialWsPrice(0);
			}
		}
	}
	
	/**
	 *ウォッシャブルJACKET_下代工賃とJACKET_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoWashableJkNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_JACKET.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionJacketTuxedoInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_JACKET.getValue();

		JacketCoOptionWashableNextGenerationPriceEnum[] nextGenerationPriceEnum = JacketCoOptionWashableNextGenerationPriceEnum
				.values();
		for (JacketCoOptionWashableNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketWashableInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice jkNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(jkNextGenerationPrice.getKeyCode())) {
						// フロント釦数はダブル6つボタンまたはダブル4つボタンの場合、該当itemはダブル
						if ("0000105".equals(orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt()) || "0000106".equals(orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = jkNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionDoublePrice = jkNextGenerationPrice.getMoapDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						}
						// 該当itemはダブル以外の場合
						else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = jkNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionPrice = jkNextGenerationPrice.getMoapPrice();
							Integer nextGenerationPriceValue = optionPrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0.0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}

	/**
	 * ウォッシャブルJACKETのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoWashableJkDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_JACKET.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionJacketWashableInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_JACKET.getValue();

		JacketCoOptionDetailWashableNextGenerationPriceEnum[] nextGenerationPriceEnum = JacketCoOptionDetailWashableNextGenerationPriceEnum
				.values();

		for (JacketCoOptionDetailWashableNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();
			String valueFour = nextGenerationPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName(className);
				Method myMethodOne = getMethod(cls, valueOne);
				Method myMethodTwo = getMethod(cls, valueTwo);
				Object[] args = {};
				Object[] argsTwo = {};
				Object resultOne = null;
				Object resultTwo = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketWashableInfo(), args);
				}

				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionJacketWashableInfo(), argsTwo);
				}

				String keyDetailCode = itemCode + subItemCode + key + resultOne + resultTwo;
				for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
					if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
						// フロント釦数はダブル6つボタンまたはダブル4つボタンの場合、該当itemはダブル
						if ("0000105".equals(orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt()) || "0000106".equals(orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionDoublePrice = detailNextGenerationPrice.getMoapDoublePriceT();
							Integer optionDetailDoublePrice = detailNextGenerationPrice.getMoadpDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice + optionDetailDoublePrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						} else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionPrice = detailNextGenerationPrice.getMoapPriceT();
							Integer optionDetailPrice = detailNextGenerationPrice.getMoadpPrice();
							Integer nextGenerationPriceValue = optionPrice + optionDetailPrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodThree = getMethod(cls, valueThree);
						Method myMethodFour = getMethod(cls, valueFour);
						Object[] argsValueThree = { new BigDecimal(0) };
						Object[] argsValueFour = { 0 };
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						if (myMethodFour != null) {
							ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 *ウォッシャブルPANTS_下代工賃とPANTS_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoWashablePtNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_PANTS.getKey();
		// co.jp.aoyama.macchinetta.app.order.coinfo.CoOptionPantsWashableInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_PANTS.getValue();

		PantsCoOptionWashableNextGenerationPriceEnum[] nextGenerationPriceEnum = PantsCoOptionWashableNextGenerationPriceEnum
				.values();
		for (PantsCoOptionWashableNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPantsWashableInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice ptNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(ptNextGenerationPrice.getKeyCode())) {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						// オプション工賃
						BigDecimal optionWage = ptNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = optionWage;
						// オプション付属
						Integer optionPrice = ptNextGenerationPrice.getMoapPrice();
						Integer nextGenerationPriceValue = optionPrice;
						Object[] argsValueTwo = { nextGenerationWageValue };
						Object[] argsValueThree = { nextGenerationPriceValue };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0.0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 *ウォッシャブル PANTSのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoWashablePtDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_PANTS.getKey();

		String optionCode = "00033";
		String optionBranchCode = orderCoForm.getCoOptionPantsWashableInfo().getWpButton();
		String optionBranchDetailCode = orderCoForm.getCoOptionPantsWashableInfo().getWpBtnMateStkNo();

		String keyDetailCode = itemCode + subItemCode + optionCode + optionBranchCode + optionBranchDetailCode;
		for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
			if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
				// オプション工賃
				BigDecimal mowWageT = detailNextGenerationPrice.getMowWageT();
				BigDecimal nextGenerationWageValue = mowWageT;
				// オプション付属 + オプション付属詳細
				Integer moapPriceT = detailNextGenerationPrice.getMoapPriceT();
				Integer moadpPrice = detailNextGenerationPrice.getMoadpPrice();
				Integer nextGenerationPriceValue = moapPriceT + moadpPrice;
				order.setPtBtnMaterialWsWage(nextGenerationWageValue);
				order.setPtBtnMaterialWsPrice(nextGenerationPriceValue);
				break;
			} else {
				order.setPtBtnMaterialWsWage(new BigDecimal(0));
				order.setPtBtnMaterialWsPrice(0);
			}
		}
	}
	
	/**
	 *  ウォッシャブルGILET_下代工賃とGILET_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCoWashableGlNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_GILET.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletWashableInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_GILET.getValue();

		GiletCoOptionWashableNextGenerationPriceEnum[] nextGenerationPriceEnum = GiletCoOptionWashableNextGenerationPriceEnum
				.values();
		for (GiletCoOptionWashableNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletWashableInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice glNextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(glNextGenerationPrice.getKeyCode())) {
						// GILETモデルはBS01-DまたはET15-Dの場合、該当itemはダブル
						if ("BS01-D".equals(orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel()) || "ET15-D".equals(orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = glNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionDoublePrice = glNextGenerationPrice.getMoapDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						} else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodTwo = getMethod(cls, valueTwo);
							Method myMethodThree = getMethod(cls, valueThree);
							// オプション工賃
							BigDecimal optionWage = glNextGenerationPrice.getMowWage();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属
							Integer optionPrice = glNextGenerationPrice.getMoapPrice();
							Integer nextGenerationPriceValue = optionPrice;
							Object[] argsValueTwo = { nextGenerationWageValue };
							Object[] argsValueThree = { nextGenerationPriceValue };
							if (myMethodTwo != null) {
								ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
							}
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * ウォッシャブルGILETのオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoWashableGlDetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_GILET.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionGiletWashableInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_GILET.getValue();

		GiletCoOptionDetailWashableNextGenerationPriceEnum[] nextGenerationPriceEnum = GiletCoOptionDetailWashableNextGenerationPriceEnum
				.values();
		for (GiletCoOptionDetailWashableNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {
			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();
			String valueFour = nextGenerationPrice.getValueFour();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Method myMethodTwo = getMethod(cls, valueTwo);
				Object[] args = {};
				Object[] argsTwo = {};
				Object resultOne = null;
				Object resultTwo = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletWashableInfo(), args);
				}

				if (myMethodTwo != null) {
					resultTwo = ReflectionUtils.invoke(myMethodTwo, orderCoForm.getCoOptionGiletWashableInfo(), argsTwo);
				}

				String keyDetailCode = itemCode + subItemCode + key + resultOne + resultTwo;
				for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
					if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
						// GILETモデルはBS01-DまたはET15-Dの場合、該当itemはダブル
						if ("BS01-D".equals(orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel()) || "ET15-D".equals(orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel())) {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionDoublePrice = detailNextGenerationPrice.getMoapDoublePriceT();
							Integer optionDetailDoublePrice = detailNextGenerationPrice.getMoadpDoublePrice();
							Integer nextGenerationPriceValue = optionDoublePrice + optionDetailDoublePrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						} else {
							cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
							Method myMethodThree = getMethod(cls, valueThree);
							Method myMethodFour = getMethod(cls, valueFour);
							// オプション工賃
							BigDecimal optionWage = detailNextGenerationPrice.getMowWageT();
							BigDecimal nextGenerationWageValue = optionWage;
							// オプション付属 + オプション付属詳細
							Integer optionPrice = detailNextGenerationPrice.getMoapPriceT();
							Integer optionDetailPrice = detailNextGenerationPrice.getMoadpPrice();
							Integer nextGenerationPriceValue = optionPrice + optionDetailPrice;
							Object[] argsValueThree = { nextGenerationWageValue };
							Object[] argsValueFour = { nextGenerationPriceValue };
							if (myMethodThree != null) {
								ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
							}
							if (myMethodFour != null) {
								ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
							}
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodThree = getMethod(cls, valueThree);
						Method myMethodFour = getMethod(cls, valueFour);
						Object[] argsValueThree = { new BigDecimal(0.0) };
						Object[] argsValueFour = { 0 };
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						if (myMethodFour != null) {
							ReflectionUtils.invoke(myMethodFour, order, argsValueFour);
						}
					}
				}

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 *ウォッシャブルPANTS2_下代工賃とPANTS2_下代付属をデータベースに入力する
	 * 
	 * @param orderForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 * 
	 */
	public void getCoWashablePt2NextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_PANTS2.getKey();
		// co.jp.aoyama.macchinetta.app.order.info.OptionPants2WashableInfoの取得
		String className = CoItemClassWashableEnum.ITEM_CODE_PANTS2.getValue();

		Pants2CoOptionWashableNextGenerationPriceEnum[] nextGenerationPriceEnum = Pants2CoOptionWashableNextGenerationPriceEnum
				.values();
		for (Pants2CoOptionWashableNextGenerationPriceEnum nextGenerationPrice : nextGenerationPriceEnum) {

			String key = nextGenerationPrice.getKey();
			String valueOne = nextGenerationPrice.getValueOne();
			String valueTwo = nextGenerationPrice.getValueTwo();
			String valueThree = nextGenerationPrice.getValueThree();

			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, valueOne);
				Object[] args = {};
				Object resultOne = null;

				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPants2WashableInfo(), args);
				}

				String keyCode = itemCode + subItemCode + key + resultOne;

				for (NextGenerationPrice pt2NextGenerationPrice : optionNextGenerationPriceList) {
					if (keyCode.equals(pt2NextGenerationPrice.getKeyCode())) {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						// オプション工賃
						BigDecimal optionWage = pt2NextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = optionWage;
						// オプション付属
						Integer optionPrice = pt2NextGenerationPrice.getMoapPrice();
						Integer nextGenerationPriceValue = optionPrice;
						Object[] argsValueTwo = { nextGenerationWageValue };
						Object[] argsValueThree = { nextGenerationPriceValue };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
						break;
					} else {
						cls = Class.forName("co.jp.aoyama.macchinetta.domain.model.Order");
						Method myMethodTwo = getMethod(cls, valueTwo);
						Method myMethodThree = getMethod(cls, valueThree);
						Object[] argsValueTwo = { new BigDecimal(0) };
						Object[] argsValueThree = { 0 };
						if (myMethodTwo != null) {
							ReflectionUtils.invoke(myMethodTwo, order, argsValueTwo);
						}
						if (myMethodThree != null) {
							ReflectionUtils.invoke(myMethodThree, order, argsValueThree);
						}
					}
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
				logger.error(e.toString());
			}
		}
	}
	
	/**
	 * ウォッシャブルPANTS2のオプション付属詳細価格
	 * 
	 * @param orderForm
	 * @param order
	 * @param detailNextGenerationPriceList
	 */
	public void getCoWashablePt2DetailNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> detailNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// subItemCodeの取得
		String subItemCode = CoItemClassWashableEnum.ITEM_CODE_PANTS2.getKey();
		String optionCode = "00033";
		String optionBranchCode = orderCoForm.getCoOptionPants2WashableInfo().getWp2Button();
		String optionBranchDetailCode = orderCoForm.getCoOptionPants2WashableInfo().getWp2BtnMateStkNo();

		String keyDetailCode = itemCode + subItemCode + optionCode + optionBranchCode + optionBranchDetailCode;
		for (NextGenerationPrice detailNextGenerationPrice : detailNextGenerationPriceList) {
			if (keyDetailCode.equals(detailNextGenerationPrice.getKeyDetailCode())) {
				// オプション工賃
				BigDecimal mowWageT = detailNextGenerationPrice.getMowWageT();
				BigDecimal nextGenerationWageValue = mowWageT;
				// オプション付属 + オプション付属詳細
				Integer moapPriceT = detailNextGenerationPrice.getMoapPriceT();
				Integer moadpPrice = detailNextGenerationPrice.getMoadpPrice();
				Integer nextGenerationPriceValue = moapPriceT + moadpPrice;
				order.setPt2BtnMaterialWsWage(nextGenerationWageValue);
				order.setPt2BtnMaterialWsPrice(nextGenerationPriceValue);
				break;
			} else {
				order.setPt2BtnMaterialWsWage(new BigDecimal(0));
				order.setPt2BtnMaterialWsPrice(0);
			}
		}
	}
	
	/**
	 * ３Pieceの上代をデータベースに入力する
	 * 
	 * @param orderCoForm
	 * @param order
	 * 
	 */
	public void order3PiecePrice(OrderCoForm orderCoForm, Order order,Map<String, Integer> retailPriceRelatedMap) {
		
		String productIs3Piece = orderCoForm.getProductIs3Piece();
		String productIs3PieceYes = "0009902";
		if(productIs3PieceYes.equals(productIs3Piece)) {
			Integer single3PieceRetailPrice = retailPriceRelatedMap.get("price3Piece");
			order.setProductIs3pieceRtPrice(single3PieceRetailPrice);
		}
		else {
			Integer price = 0;
			order.setProductIs3pieceRtPrice(price);
		}
	}

	/**
	 * スペアパンツの上代をデータベースに入力する
	 * 
	 * @param orderCoForm
	 * @param order
	 */
	public void orderSparePantsPrice(OrderCoForm orderCoForm, Order order,Map<String, Integer> retailPriceRelatedMap) {
		
		String productSparePantsClass = orderCoForm.getProductSparePantsClass();
		String productSparePantsClassYes = "0009902";
		
		if(productSparePantsClassYes.equals(productSparePantsClass)) {
			Integer sparePantsPrice = retailPriceRelatedMap.get("sparePants");
			order.setProductSparePantsRtPrice(sparePantsPrice);
		}
		else {
			Integer price = 0;
			order.setProductSparePantsRtPrice(price);
		}
	}
	
	/**
	 * お客様情報_納期短縮下代工賃と下代付属をデータベースに入力する
	 * @param orderCoForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getCustIsDeliverShortningWsNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {
		// アイテムコード
		String itemCode = "99";
		// サブアイテムコード
		String subItemCode = "99";
		String optionCode = "90009";
		String optionBranchCode = orderCoForm.getCustIsDeliverShortning();
		String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
		
		for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
			if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {
				Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
				BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
				// お客様情報_納期短縮_下代工賃
				order.setCustIsDeliverShortningWsWage(mowWage);
				// お客様情報_納期短縮_下代付属
				order.setCustIsDeliverShortningWsPrice(moapPrice);
				break;
			}
			else {
				// お客様情報_納期短縮_下代工賃
				order.setCustIsDeliverShortningWsWage(new BigDecimal(0));
				// お客様情報_納期短縮_下代付属
				order.setCustIsDeliverShortningWsPrice(0);
			}
		}
	}
	
	/**
	 * 商品情報_LCR縫製下代工賃と下代付属をデータベースに入力する
	 * @param orderCoForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getProductLcrSewingWsNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {
		// アイテムコード
		String itemCode = "99";
		// サブアイテムコード
		String subItemCode = "99";
		String optionCode = "90002";
		String optionBranchCode = orderCoForm.getProductLcrSewing();
		String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
		
		for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
			if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {
				Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
				BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
				// 商品情報_LCR縫製下代工賃
				order.setProductLcrSewingWsWage(mowWage);
				// 商品情報_LCR縫製_下代付属
				order.setProductLcrSewingWsPrice(moapPrice);
				break;
			}
			else {
				// 商品情報_LCR縫製下代工賃
				order.setProductLcrSewingWsWage(new BigDecimal(0));
				// 商品情報_LCR縫製_下代付属
				order.setProductLcrSewingWsPrice(0);
			}
		}
	}
	
	/**
	 * 商品情報_刺繍箇所下代工賃と下代付属をデータベースに入力する
	 * @param orderCoForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getProductEmbroideryNmPosWsNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {
		// アイテムコード
		String itemCode = "05";
		// サブアイテムコード
		String subItemCode = "05";
		String optionCode = "00022";
		String optionBranchCode = orderCoForm.getProductEmbroideryNmPos();
		String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
		
		for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
			if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {
				Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
				BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
				// 商品情報_刺繍箇所_下代工賃
				order.setProductEmbroideryNmPosWsWage(mowWage);
				// 商品情報_刺繍箇所_下代付属
				order.setProductEmbroideryNmPosWsPrice(moapPrice);
				break;
			}
			else {
				// 商品情報_刺繍箇所_下代工賃
				order.setProductEmbroideryNmPosWsWage(new BigDecimal(0));
				// 商品情報_刺繍箇所_下代付属
				order.setProductEmbroideryNmPosWsPrice(0);
			}
		}
	}
	
	/**
	 * 商品情報_ガゼット刺繍下代工賃と下代付属をデータベースに入力する
	 * @param orderCoForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getProductEmbroideryGazetteNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {
		// アイテムコード
		String itemCode = "05";
		// サブアイテムコード
		String subItemCode = "05";
		String optionCode = "00023";
		String optionBranchCode = orderCoForm.getProductEmbroideryGazette();
		String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
		
		for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
			if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {
				Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
				BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
				// 商品情報_ガゼット刺繍_下代工賃
				order.setProductEmbroideryGazetteWsWage(mowWage);
				// 商品情報_ガゼット刺繍_下代付属
				order.setProductEmbroideryGazetteWsPrice(moapPrice);
				break;
			}
			else {
				// 商品情報_ガゼット刺繍_下代工賃
				order.setProductEmbroideryGazetteWsWage(new BigDecimal(0));
				// 商品情報_ガゼット刺繍_下代付属
				order.setProductEmbroideryGazetteWsPrice(0);
			}
		}
	}
	
	
	/**
	 * 商品情報_３Piece_下代工賃と下代付属をデータベースに入力する
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getGl3PieceNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		//カテゴリ
		String productCategory = orderCoForm.getProductCategory();

		String optionCode = "00099";
		String optionBranchCode = orderCoForm.getProductIs3Piece();
		// 0 ：標準
		if("9000101".equals(productCategory)) {
			// subItemCodeの取得
			String subItemCode = CoItemClassStandardEnum.ITEM_CODE_GILET.getKey();
			String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
			for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
				if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {
					if ("BS01-D".equals(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel()) || "ET15-D".equals(orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel())) {
						BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = mowWage;

						Integer moapDoublePrice = optionNextGenerationPrice.getMoapDoublePrice();
						Integer nextGenerationPriceValue = moapDoublePrice;
						order.setProductIs3pieceWsWage(nextGenerationWageValue);
						order.setProductIs3pieceWsPrice(nextGenerationPriceValue);
					} else {
						Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
						BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = mowWage;
						Integer nextGenerationPriceValue = moapPrice;
						order.setProductIs3pieceWsWage(nextGenerationWageValue);
						order.setProductIs3pieceWsPrice(nextGenerationPriceValue);
					}
					break;
				} else {
					order.setProductIs3pieceWsWage(new BigDecimal(0));
					order.setProductIs3pieceWsPrice(0);
				}
			}
		}
		// 2：タキシード
		else if("9000102".equals(productCategory)) {
			// subItemCodeの取得
			String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_GILET.getKey();
			String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
			for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
				if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {
					if ("BS01-D".equals(orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel()) || "ET15-D".equals(orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel())) {
						BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = mowWage;

						Integer moapDoublePrice = optionNextGenerationPrice.getMoapDoublePrice();
						Integer nextGenerationPriceValue = moapDoublePrice;
						order.setProductIs3pieceWsWage(nextGenerationWageValue);
						order.setProductIs3pieceWsPrice(nextGenerationPriceValue);
					} else {
						Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
						BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = mowWage;
						Integer nextGenerationPriceValue = moapPrice;
						order.setProductIs3pieceWsWage(nextGenerationWageValue);
						order.setProductIs3pieceWsPrice(nextGenerationPriceValue);
					}
					break;
				} else {
					order.setProductIs3pieceWsWage(new BigDecimal(0));
					order.setProductIs3pieceWsPrice(0);
				}
			}
		}
		// 1：ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// subItemCodeの取得
			String subItemCode = CoItemClassWashableEnum.ITEM_CODE_GILET.getKey();
			String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
			for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
				if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {
					if ("BS01-D".equals(orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel()) || "ET15-D".equals(orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel())) {
						BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = mowWage;

						Integer moapDoublePrice = optionNextGenerationPrice.getMoapDoublePrice();
						Integer nextGenerationPriceValue = moapDoublePrice;
						order.setProductIs3pieceWsWage(nextGenerationWageValue);
						order.setProductIs3pieceWsPrice(nextGenerationPriceValue);
					} else {
						Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
						BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
						BigDecimal nextGenerationWageValue = mowWage;
						Integer nextGenerationPriceValue = moapPrice;
						order.setProductIs3pieceWsWage(nextGenerationWageValue);
						order.setProductIs3pieceWsPrice(nextGenerationPriceValue);
					}
					break;
				} else {
					order.setProductIs3pieceWsWage(new BigDecimal(0));
					order.setProductIs3pieceWsPrice(0);
				}
			}
		}
		
	}

	/**
	 * 商品情報_スペアパンツ_下代工賃と下代付属をデータベースに入力する
	 * 
	 * @param orderCoForm
	 * @param order
	 * @param optionNextGenerationPriceList
	 */
	public void getSparePantsNextGenerationPrice(OrderCoForm orderCoForm, Order order,
			List<NextGenerationPrice> optionNextGenerationPriceList) {

		// itemCodeの取得
		String itemCode = orderCoForm.getProductItem();
		// カテゴリ
		String productCategory = orderCoForm.getProductCategory(); 

		String optionCode = "00099";
		String optionBranchCode = orderCoForm.getProductSparePantsClass();
		// 0 ：標準
		if("9000101".equals(productCategory)) {
			// subItemCodeの取得
			String subItemCode = CoItemClassStandardEnum.ITEM_CODE_PANTS.getKey();
			String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
			for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
				if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {

					BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
					BigDecimal nextGenerationWageValue = mowWage;

					Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
					Integer nextGenerationPriceValue = moapPrice;
					order.setProductSparePantsWsWage(nextGenerationWageValue);
					order.setProductSparePantsWsPrice(nextGenerationPriceValue);
					break;
				} else {
					order.setProductSparePantsWsWage(new BigDecimal(0.0));
					order.setProductSparePantsWsPrice(0);
				}
			}
		}
		// 2：タキシード
		else if("9000102".equals(productCategory)) {
			// subItemCodeの取得
			String subItemCode = CoItemClassTuxedoEnum.ITEM_CODE_PANTS.getKey();
			String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
			for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
				if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {

					BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
					BigDecimal nextGenerationWageValue = mowWage;

					Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
					Integer nextGenerationPriceValue = moapPrice;
					order.setProductSparePantsWsWage(nextGenerationWageValue);
					order.setProductSparePantsWsPrice(nextGenerationPriceValue);
					break;
				} else {
					order.setProductSparePantsWsWage(new BigDecimal(0.0));
					order.setProductSparePantsWsPrice(0);
				}
			}
		}
		// 1：ウォッシャブル
		else if("9000103".equals(productCategory)) {
			// subItemCodeの取得
			String subItemCode = CoItemClassWashableEnum.ITEM_CODE_PANTS.getKey();
			String keyCode = itemCode + subItemCode + optionCode + optionBranchCode;
			for (NextGenerationPrice optionNextGenerationPrice : optionNextGenerationPriceList) {
				if (keyCode.equals(optionNextGenerationPrice.getKeyCode())) {

					BigDecimal mowWage = optionNextGenerationPrice.getMowWage();
					BigDecimal nextGenerationWageValue = mowWage;

					Integer moapPrice = optionNextGenerationPrice.getMoapPrice();
					Integer nextGenerationPriceValue = moapPrice;
					order.setProductSparePantsWsWage(nextGenerationWageValue);
					order.setProductSparePantsWsPrice(nextGenerationPriceValue);
					break;
				} else {
					order.setProductSparePantsWsWage(new BigDecimal(0.0));
					order.setProductSparePantsWsPrice(0);
				}
			}
		}
		
	}
	
	/**
	 * 標準のJACKET上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> standardFrameJkDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> standardJacketUpperPrice = new HashMap<String,String>();
		String className = CoItemClassStandardEnum.ITEM_CODE_JACKET.getValue();
		JacketOptionCoStandardPriceEnum[] jacketOptionCoStandardPriceEnum = JacketOptionCoStandardPriceEnum.values();
		
		for(JacketOptionCoStandardPriceEnum jacketOptionCoStandardPrice : jacketOptionCoStandardPriceEnum) {
			String mapKey = jacketOptionCoStandardPrice.getValueFour();
			String mapValue = jacketOptionCoStandardPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketStandardInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				
				standardJacketUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return standardJacketUpperPrice;
	}
	
	/**
	 * 標準のGILET上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> standardFrameGlDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> standardGiletUpperPrice = new HashMap<String,String>();
		String className = CoItemClassStandardEnum.ITEM_CODE_GILET.getValue();
		GiletOptionCoStandardPriceEnum[] giletOptionCoStandardPriceEnum = GiletOptionCoStandardPriceEnum.values();
		
		for(GiletOptionCoStandardPriceEnum giletOptionCoStandardPrice : giletOptionCoStandardPriceEnum) {
			String mapKey = giletOptionCoStandardPrice.getValueFour();
			String mapValue = giletOptionCoStandardPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletStandardInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				standardGiletUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return standardGiletUpperPrice;
	}
	
	/**
	 * 標準のPANTS上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> standardFramePtDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> standardPantsUpperPrice = new HashMap<String,String>();
		String className = CoItemClassStandardEnum.ITEM_CODE_PANTS.getValue();
		PantsCoOptionStandardPriceEnum[] pantsCoOptionStandardPriceEnum = PantsCoOptionStandardPriceEnum.values();
		
		for(PantsCoOptionStandardPriceEnum pantsCoOptionStandardPrice : pantsCoOptionStandardPriceEnum) {
			String mapKey = pantsCoOptionStandardPrice.getValueFour();
			String mapValue = pantsCoOptionStandardPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPantsStandardInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				standardPantsUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return standardPantsUpperPrice;
	}
	
	/**
	 * 標準のPANTS2上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> standardFramePt2DisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> standardPants2UpperPrice = new HashMap<String,String>();
		String className = CoItemClassStandardEnum.ITEM_CODE_PANTS2.getValue();
		Pants2CoOptionStandardPriceEnum[] pants2CoOptionStandardPriceEnum = Pants2CoOptionStandardPriceEnum.values();
		
		for(Pants2CoOptionStandardPriceEnum pants2CoOptionStandardPrice : pants2CoOptionStandardPriceEnum) {
			String mapKey = pants2CoOptionStandardPrice.getValueFour();
			String mapValue = pants2CoOptionStandardPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPants2StandardInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				standardPants2UpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return standardPants2UpperPrice;
	}
	
	/**
	 * 標準のSHIRT上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> standardFrameStDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> standardShirtUpperPrice = new HashMap<String,String>();
		String className = CoItemClassStandardEnum.ITEM_CODE_SHIRTS.getValue();
		ShirtCoOptionStandardPriceEnum[] shirtCoOptionStandardPriceEnum = ShirtCoOptionStandardPriceEnum.values();
		
		for(ShirtCoOptionStandardPriceEnum shirtCoOptionStandardPrice : shirtCoOptionStandardPriceEnum) {
			String mapKey = shirtCoOptionStandardPrice.getValueFour();
			String mapValue = shirtCoOptionStandardPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionShirtStandardInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				standardShirtUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return standardShirtUpperPrice;
	}
	
	/**
	 * 標準のCOAT上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> standardFrameCtDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> standardCoatUpperPrice = new HashMap<String,String>();
		String className = CoItemClassStandardEnum.ITEM_CODE_COAT.getValue();
		CoatCoOptionStandardPriceEnum[] coatCoOptionStandardPriceEnum = CoatCoOptionStandardPriceEnum.values();
		
		for(CoatCoOptionStandardPriceEnum coatCoOptionStandardPrice : coatCoOptionStandardPriceEnum) {
			String mapKey = coatCoOptionStandardPrice.getValueFour();
			String mapValue = coatCoOptionStandardPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionCoatStandardInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				standardCoatUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return standardCoatUpperPrice;
	}
	
	/**
	 * タキシードのJACKET上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> tuxedoFrameJkDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> tuxedoJacketUpperPrice = new HashMap<String,String>();
		String className = CoItemClassTuxedoEnum.ITEM_CODE_JACKET.getValue();
		JacketOptionCoTuxedoPriceEnum[] jacketOptionCoTuxedoPriceEnum = JacketOptionCoTuxedoPriceEnum.values();
		
		for(JacketOptionCoTuxedoPriceEnum jacketOptionCoTuxedoPrice : jacketOptionCoTuxedoPriceEnum) {
			String mapKey = jacketOptionCoTuxedoPrice.getValueFour();
			String mapValue = jacketOptionCoTuxedoPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketTuxedoInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				
				tuxedoJacketUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return tuxedoJacketUpperPrice;
	}
	
	/**
	 * タキシードのGILET上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> tuxedoFrameGlDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> tuxedoGiletUpperPrice = new HashMap<String,String>();
		String className = CoItemClassTuxedoEnum.ITEM_CODE_GILET.getValue();
		GiletOptionCoTuxedoPriceEnum[] giletOptionCoTuxedoPriceEnum = GiletOptionCoTuxedoPriceEnum.values();
		
		for(GiletOptionCoTuxedoPriceEnum giletOptionCoTuxedoPrice : giletOptionCoTuxedoPriceEnum) {
			String mapKey = giletOptionCoTuxedoPrice.getValueFour();
			String mapValue = giletOptionCoTuxedoPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletTuxedoInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				tuxedoGiletUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return tuxedoGiletUpperPrice;
	}
	
	/**
	 * タキシードのPANTS上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> tuxedoFramePtDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> tuxedoPantsUpperPrice = new HashMap<String,String>();
		String className = CoItemClassTuxedoEnum.ITEM_CODE_PANTS.getValue();
		PantsCoOptionTuxedoPriceEnum[] pantsCoOptionTuxedoPriceEnum = PantsCoOptionTuxedoPriceEnum.values();
		
		for(PantsCoOptionTuxedoPriceEnum pantsCoOptionTuxedoPrice : pantsCoOptionTuxedoPriceEnum) {
			String mapKey = pantsCoOptionTuxedoPrice.getValueFour();
			String mapValue = pantsCoOptionTuxedoPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPantsTuxedoInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				tuxedoPantsUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return tuxedoPantsUpperPrice;
	}
	
	/**
	 * タキシードのPANTS2上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> tuxedoFramePt2DisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> tuxedoPants2UpperPrice = new HashMap<String,String>();
		String className = CoItemClassTuxedoEnum.ITEM_CODE_PANTS2.getValue();
		Pants2CoOptionTuxedoPriceEnum[] pants2CoOptionTuxedoPriceEnum = Pants2CoOptionTuxedoPriceEnum.values();
		
		for(Pants2CoOptionTuxedoPriceEnum pants2CoOptionTuxedoPrice : pants2CoOptionTuxedoPriceEnum) {
			String mapKey = pants2CoOptionTuxedoPrice.getValueFour();
			String mapValue = pants2CoOptionTuxedoPrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPants2TuxedoInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				tuxedoPants2UpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return tuxedoPants2UpperPrice;
	}
	
	/**
	 * ウォッシャブルのJACKET上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> washableFrameJkDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> washableJacketUpperPrice = new HashMap<String,String>();
		String className = CoItemClassWashableEnum.ITEM_CODE_JACKET.getValue();
		JacketOptionCoWashablePriceEnum[] jacketOptionCoWashablePriceEnum = JacketOptionCoWashablePriceEnum.values();
		
		for(JacketOptionCoWashablePriceEnum jacketOptionCoWashablePrice	 : jacketOptionCoWashablePriceEnum) {
			String mapKey = jacketOptionCoWashablePrice.getValueFour();
			String mapValue = jacketOptionCoWashablePrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionJacketWashableInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				washableJacketUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return washableJacketUpperPrice;
	}
	
	/**
	 * ウォッシャブルのGILET上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> washableFrameGlDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> washableGiletUpperPrice = new HashMap<String,String>();
		String className = CoItemClassWashableEnum.ITEM_CODE_GILET.getValue();
		GiletOptionCoWashablePriceEnum[] giletOptionCoWashablePriceEnum = GiletOptionCoWashablePriceEnum.values();
		
		for(GiletOptionCoWashablePriceEnum giletOptionCoWashablePrice : giletOptionCoWashablePriceEnum) {
			String mapKey = giletOptionCoWashablePrice.getValueFour();
			String mapValue = giletOptionCoWashablePrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionGiletWashableInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				washableGiletUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return washableGiletUpperPrice;
	}
	
	/**
	 * ウォッシャブルのPANTS上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> washableFramePtDisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> washablePantsUpperPrice = new HashMap<String,String>();
		String className = CoItemClassWashableEnum.ITEM_CODE_PANTS.getValue();
		PantsCoOptionWashablePriceEnum[] pantsCoOptionWashablePriceEnum = PantsCoOptionWashablePriceEnum.values();
		
		for(PantsCoOptionWashablePriceEnum pantsCoOptionWashablePrice : pantsCoOptionWashablePriceEnum) {
			String mapKey = pantsCoOptionWashablePrice.getValueFour();
			String mapValue = pantsCoOptionWashablePrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPantsWashableInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				washablePantsUpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return washablePantsUpperPrice;
	}
	
	/**
	 * ウォッシャブルのPANTS2上代
	 * @param orderCoForm
	 * @return
	 */
	public Map<String, String> washableFramePt2DisplayUpperPrice(OrderCoForm orderCoForm){
		
		Map<String,String> washablePants2UpperPrice = new HashMap<String,String>();
		String className = CoItemClassWashableEnum.ITEM_CODE_PANTS2.getValue();
		Pants2CoOptionWashablePriceEnum[] pants2CoOptionWashablePriceEnum = Pants2CoOptionWashablePriceEnum.values();
		
		for(Pants2CoOptionWashablePriceEnum pants2CoOptionWashablePrice : pants2CoOptionWashablePriceEnum) {
			String mapKey = pants2CoOptionWashablePrice.getValueFour();
			String mapValue = pants2CoOptionWashablePrice.getValueSix();
			
			Class<?> cls;
			try {
				cls = Class.forName(className);

				Method myMethodOne = getMethod(cls, mapValue);
				Object[] args = {};
				Object resultOne = null;
				if (myMethodOne != null) {
					resultOne = ReflectionUtils.invoke(myMethodOne, orderCoForm.getCoOptionPants2WashableInfo(), args);
				}
				String mapValueString = resultOne.toString();
				String stringValue = null;
				if("0".equals(mapValueString)) {
					stringValue = "無料";
				}
				else {
					stringValue = "￥" + formatPrice(mapValueString);
				}
				washablePants2UpperPrice.put(mapKey, stringValue);
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return washablePants2UpperPrice;
	}

	public void findStockModelDoublePrice(OrderFindFabric orderFindFabric, OrderCoForm orderCoForm) {
		String productItem = orderCoForm.getProductItem();
		String productCategory = orderCoForm.getProductCategory();
		String productIs3Piece = orderCoForm.getProductIs3Piece();
		// 上代
		Integer retailPrice = orderFindFabric.getRetailPrice();
		if ("01".equals(productItem)) {
			// JACKET
			// ダブルJACKET
			// JACKET
			if ("9000101".equals(productCategory)) {
				String ojFrontBtnCnt = orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt();
				if (ojFrontBtnCnt != null && !"".equals(ojFrontBtnCnt)) {
					if ("0000105".equals(ojFrontBtnCnt) || "0000106".equals(ojFrontBtnCnt)) {
						Integer additionalDoubleJacketRate = orderFindFabric.getAdditionalDoubleJacketRate();
						BigDecimal jkDoublePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(additionalDoubleJacketRate).divide(new BigDecimal("100"))));
						orderFindFabric.setJkDoublePrice(String.valueOf(jkDoublePice.setScale(0)));
					} else {
						orderFindFabric.setJkDoublePrice("0");
					}
				} else {
					orderFindFabric.setJkDoublePrice("0");
				}
				
				if("0009902".equals(productIs3Piece)) {
					String ogGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel();
					if(!"".equals(ogGiletModel)&&ogGiletModel != null) {
						if ("ET15-D".equals(ogGiletModel) || "BS01-D".equals(ogGiletModel)) {
							Integer additionalDoubleGiletRate = orderFindFabric.getAdditionalDoubleGiletRate();
							BigDecimal glDoublePice = new BigDecimal(retailPrice)
									.multiply((new BigDecimal(additionalDoubleGiletRate).divide(new BigDecimal("100"))));
							orderFindFabric.setGlDoublePrice(String.valueOf(glDoublePice.setScale(0)));
						} else {
							orderFindFabric.setGlDoublePrice("0");
						}
					}else {
						orderFindFabric.setGlDoublePrice("0");
					}
					orderCoForm.setGlDoubleModelPrice(orderFindFabric.getGlDoublePrice());
				}else {
					orderFindFabric.setGlDoublePrice("0");
					orderCoForm.setGlDoubleModelPrice("0");
				}

			} else if ("9000102".equals(productCategory)) {
				String tjFrontBtnCnt = orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt();
				if (tjFrontBtnCnt != null && !"".equals(tjFrontBtnCnt)) {
					if ("0000105".equals(tjFrontBtnCnt) || "0000106".equals(tjFrontBtnCnt)) {
						Integer additionalDoubleJacketRate = orderFindFabric.getAdditionalDoubleJacketRate();
						BigDecimal jkDoublePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(additionalDoubleJacketRate).divide(new BigDecimal("100"))));
						orderFindFabric.setJkDoublePrice(String.valueOf(jkDoublePice.setScale(0)));
					} else {
						orderFindFabric.setJkDoublePrice("0");
					}
				} else {
					orderFindFabric.setJkDoublePrice("0");
				}
				
				if("0009902".equals(productIs3Piece)) {
					String tgGiletModel = orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel();
					if(!"".equals(tgGiletModel)&&tgGiletModel != null) {
						if ("ET15-D".equals(tgGiletModel) || "BS01-D".equals(tgGiletModel)) {
							Integer additionalDoubleGiletRate = orderFindFabric.getAdditionalDoubleGiletRate();
							BigDecimal glDoublePice = new BigDecimal(retailPrice)
									.multiply((new BigDecimal(additionalDoubleGiletRate).divide(new BigDecimal("100"))));
							orderFindFabric.setGlDoublePrice(String.valueOf(glDoublePice.setScale(0)));
						} else {
							orderFindFabric.setGlDoublePrice("0");
						}
					}else {
						orderFindFabric.setGlDoublePrice("0");
					}
					orderCoForm.setGlDoubleModelPrice(orderFindFabric.getGlDoublePrice());
				}else {
					orderFindFabric.setGlDoublePrice("0");
					orderCoForm.setGlDoubleModelPrice("0");
				}
				
			} else if ("9000103".equals(productCategory)) {
				String wjFrontBtnCnt = orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt();
				if (wjFrontBtnCnt != null && !"".equals(wjFrontBtnCnt)) {
					if ("0000105".equals(wjFrontBtnCnt) || "0000106".equals(wjFrontBtnCnt)) {
						Integer additionalDoubleJacketRate = orderFindFabric.getAdditionalDoubleJacketRate();
						BigDecimal jkDoublePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(additionalDoubleJacketRate).divide(new BigDecimal("100"))));
						orderFindFabric.setJkDoublePrice(String.valueOf(jkDoublePice.setScale(0)));
					} else {
						orderFindFabric.setJkDoublePrice("0");
					}
				} else {
					orderFindFabric.setJkDoublePrice("0");
				}
				
				if("0009902".equals(productIs3Piece)) {
					String wgGiletModel = orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel();
					if(!"".equals(wgGiletModel)&&wgGiletModel != null) {
						if ("ET15-D".equals(wgGiletModel) || "BS01-D".equals(wgGiletModel)) {
							Integer additionalDoubleGiletRate = orderFindFabric.getAdditionalDoubleGiletRate();
							BigDecimal glDoublePice = new BigDecimal(retailPrice)
									.multiply((new BigDecimal(additionalDoubleGiletRate).divide(new BigDecimal("100"))));
							orderFindFabric.setGlDoublePrice(String.valueOf(glDoublePice.setScale(0)));
						} else {
							orderFindFabric.setGlDoublePrice("0");
						}
					}else {
						orderFindFabric.setGlDoublePrice("0");
					}
					orderCoForm.setGlDoubleModelPrice(orderFindFabric.getGlDoublePrice());
				}else {
					orderFindFabric.setGlDoublePrice("0");
					orderCoForm.setGlDoubleModelPrice("0");
				}
			}
			orderCoForm.setJkDoubleModelPrice(orderFindFabric.getJkDoublePrice());
		} else if ("02".equals(productItem)) {
			// JACKET
			if ("9000101".equals(productCategory)) {
				String ojFrontBtnCnt = orderCoForm.getCoOptionJacketStandardInfo().getOjFrontBtnCnt();
				if (ojFrontBtnCnt != null && !"".equals(ojFrontBtnCnt)) {
					if ("0000105".equals(ojFrontBtnCnt) || "0000106".equals(ojFrontBtnCnt)) {
						Integer doubleJacketOnlyRate = orderFindFabric.getDoubleJacketOnlyRate();
						Integer jkDoubleOnlyPlusAlphaPrice = orderFindFabric.getJkDoubleOnlyPlusAlphaPrice();
						Integer singleJacketOnlyRate = orderFindFabric.getSingleJacketOnlyRate();
						Integer jkSingleOnlyPlusAlphaPrice = orderFindFabric.getJkSingleOnlyPlusAlphaPrice();

						BigDecimal jkDoublePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(doubleJacketOnlyRate).divide(new BigDecimal("100"))))
								.add(new BigDecimal(jkDoubleOnlyPlusAlphaPrice));

						BigDecimal jkSinglePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(singleJacketOnlyRate).divide(new BigDecimal("100"))))
								.add(new BigDecimal(jkSingleOnlyPlusAlphaPrice));

						BigDecimal subtract = jkDoublePice.subtract(jkSinglePice);
						orderFindFabric.setJkDoublePrice(String.valueOf(subtract.setScale(0)));
					} else {
						orderFindFabric.setJkDoublePrice("0");
					}
				} else {
					orderFindFabric.setJkDoublePrice("0");
				}

			} else if ("9000102".equals(productCategory)) {
				String tjFrontBtnCnt = orderCoForm.getCoOptionJacketTuxedoInfo().getTjFrontBtnCnt();
				if (tjFrontBtnCnt != null && !"".equals(tjFrontBtnCnt)) {
					if ("0000105".equals(tjFrontBtnCnt) || "0000106".equals(tjFrontBtnCnt)) {
						Integer doubleJacketOnlyRate = orderFindFabric.getDoubleJacketOnlyRate();
						Integer jkDoubleOnlyPlusAlphaPrice = orderFindFabric.getJkDoubleOnlyPlusAlphaPrice();
						Integer singleJacketOnlyRate = orderFindFabric.getSingleJacketOnlyRate();
						Integer jkSingleOnlyPlusAlphaPrice = orderFindFabric.getJkSingleOnlyPlusAlphaPrice();

						BigDecimal jkDoublePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(doubleJacketOnlyRate).divide(new BigDecimal("100"))))
								.add(new BigDecimal(jkDoubleOnlyPlusAlphaPrice));

						BigDecimal jkSinglePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(singleJacketOnlyRate).divide(new BigDecimal("100"))))
								.add(new BigDecimal(jkSingleOnlyPlusAlphaPrice));

						BigDecimal subtract = jkDoublePice.subtract(jkSinglePice);
						orderFindFabric.setJkDoublePrice(String.valueOf(subtract.setScale(0)));
					} else {
						orderFindFabric.setJkDoublePrice("0");
					}
				} else {
					orderFindFabric.setJkDoublePrice("0");
				}
			} else if ("9000103".equals(productCategory)) {
				String wjFrontBtnCnt = orderCoForm.getCoOptionJacketWashableInfo().getWjFrontBtnCnt();
				if (wjFrontBtnCnt != null && !"".equals(wjFrontBtnCnt)) {
					if ("0000105".equals(wjFrontBtnCnt) || "0000106".equals(wjFrontBtnCnt)) {
						Integer doubleJacketOnlyRate = orderFindFabric.getDoubleJacketOnlyRate();
						Integer jkDoubleOnlyPlusAlphaPrice = orderFindFabric.getJkDoubleOnlyPlusAlphaPrice();
						Integer singleJacketOnlyRate = orderFindFabric.getSingleJacketOnlyRate();
						Integer jkSingleOnlyPlusAlphaPrice = orderFindFabric.getJkSingleOnlyPlusAlphaPrice();

						BigDecimal jkDoublePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(doubleJacketOnlyRate).divide(new BigDecimal("100"))))
								.add(new BigDecimal(jkDoubleOnlyPlusAlphaPrice));

						BigDecimal jkSinglePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(singleJacketOnlyRate).divide(new BigDecimal("100"))))
								.add(new BigDecimal(jkSingleOnlyPlusAlphaPrice));

						BigDecimal subtract = jkDoublePice.subtract(jkSinglePice);
						orderFindFabric.setJkDoublePrice(String.valueOf(subtract.setScale(0)));
					} else {
						orderFindFabric.setJkDoublePrice("0");
					}
				} else {
					orderFindFabric.setJkDoublePrice("0");
				}
			}
			orderCoForm.setJkDoubleModelPrice(orderFindFabric.getJkDoublePrice());
		}else if("04".equals(productItem)) {
			if ("9000101".equals(productCategory)) {
				String ogGiletModel = orderCoForm.getCoOptionGiletStandardInfo().getOgGiletModel();
				if(!"".equals(ogGiletModel)&&ogGiletModel!=null) {
					if ("ET15-D".equals(ogGiletModel) || "BS01-D".equals(ogGiletModel)) {
						Integer doubleGiletOnlyRate = orderFindFabric.getDoubleGiletOnlyRate();
						Integer glDoubleOnlyPlusAlphaPrice = orderFindFabric.getGlDoubleOnlyPlusAlphaPrice();
						Integer singleGiletOnlyRate = orderFindFabric.getSingleGiletOnlyRate();
						Integer glSingleOnlyPlusAlphaPrice = orderFindFabric.getGlSingleOnlyPlusAlphaPrice();
						
						BigDecimal glDoublePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(doubleGiletOnlyRate).divide(new BigDecimal("100")))).add(new BigDecimal(glDoubleOnlyPlusAlphaPrice));
						
						BigDecimal glSinglePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(singleGiletOnlyRate).divide(new BigDecimal("100")))).add(new BigDecimal(glSingleOnlyPlusAlphaPrice));
						
						BigDecimal subtract = glDoublePice.subtract(glSinglePice);
						orderFindFabric.setGlDoublePrice(String.valueOf(subtract.setScale(0)));
					} else {
						orderFindFabric.setGlDoublePrice("0");
					}
				}else {
					orderFindFabric.setGlDoublePrice("0");
				}
			} else if ("9000102".equals(productCategory)) {
				String tgGiletModel = orderCoForm.getCoOptionGiletTuxedoInfo().getTgGiletModel();
				if(!"".equals(tgGiletModel)&&tgGiletModel!=null) {
					if ("ET15-D".equals(tgGiletModel) || "BS01-D".equals(tgGiletModel)) {
						Integer doubleGiletOnlyRate = orderFindFabric.getDoubleGiletOnlyRate();
						Integer glDoubleOnlyPlusAlphaPrice = orderFindFabric.getGlDoubleOnlyPlusAlphaPrice();
						Integer singleGiletOnlyRate = orderFindFabric.getSingleGiletOnlyRate();
						Integer glSingleOnlyPlusAlphaPrice = orderFindFabric.getGlSingleOnlyPlusAlphaPrice();
						
						BigDecimal glDoublePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(doubleGiletOnlyRate).divide(new BigDecimal("100")))).add(new BigDecimal(glDoubleOnlyPlusAlphaPrice));
						
						BigDecimal glSinglePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(singleGiletOnlyRate).divide(new BigDecimal("100")))).add(new BigDecimal(glSingleOnlyPlusAlphaPrice));
						
						BigDecimal subtract = glDoublePice.subtract(glSinglePice);
						orderFindFabric.setGlDoublePrice(String.valueOf(subtract.setScale(0)));
					} else {
						orderFindFabric.setGlDoublePrice("0");
					}
				}else {
					orderFindFabric.setGlDoublePrice("0");
				}
			} else if ("9000103".equals(productCategory)) {
				String wgGiletModel = orderCoForm.getCoOptionGiletWashableInfo().getWgGiletModel();
				if(!"".equals(wgGiletModel)&&wgGiletModel!=null) {
					if ("ET15-D".equals(wgGiletModel) || "BS01-D".equals(wgGiletModel)) {
						Integer doubleGiletOnlyRate = orderFindFabric.getDoubleGiletOnlyRate();
						Integer glDoubleOnlyPlusAlphaPrice = orderFindFabric.getGlDoubleOnlyPlusAlphaPrice();
						Integer singleGiletOnlyRate = orderFindFabric.getSingleGiletOnlyRate();
						Integer glSingleOnlyPlusAlphaPrice = orderFindFabric.getGlSingleOnlyPlusAlphaPrice();
						
						BigDecimal glDoublePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(doubleGiletOnlyRate).divide(new BigDecimal("100")))).add(new BigDecimal(glDoubleOnlyPlusAlphaPrice));
						
						BigDecimal glSinglePice = new BigDecimal(retailPrice)
								.multiply((new BigDecimal(singleGiletOnlyRate).divide(new BigDecimal("100")))).add(new BigDecimal(glSingleOnlyPlusAlphaPrice));
						
						BigDecimal subtract = glDoublePice.subtract(glSinglePice);
						orderFindFabric.setGlDoublePrice(String.valueOf(subtract.setScale(0)));
					} else {
						orderFindFabric.setGlDoublePrice("0");
					}
				}else {
					orderFindFabric.setGlDoublePrice("0");
				}
			}
			orderCoForm.setGlDoubleModelPrice(orderFindFabric.getGlDoublePrice());
		}else if("06".equals(productItem)) {
			String coatModel = orderCoForm.getCoOptionCoatStandardInfo().getCoatModel();
			if(coatModel!=null&&!"".equals(coatModel)) {
				if("DoubleChester".equals(coatModel)||"DoublePolo".equals(coatModel)) {
					Integer coatDoubleOnlyRate = orderFindFabric.getCoatDoubleOnlyRate();
					Integer ctDoubleOnlyPlusAlphaPrice = orderFindFabric.getCtDoubleOnlyPlusAlphaPrice();
					Integer coatSingleOnlyRate = orderFindFabric.getCoatSingleOnlyRate();
					Integer ctSingleOnlyPlusAlphaPrice = orderFindFabric.getCtSingleOnlyPlusAlphaPrice();
					
					BigDecimal ctDoublePice = new BigDecimal(retailPrice)
							.multiply((new BigDecimal(coatDoubleOnlyRate).divide(new BigDecimal("100")))).add(new BigDecimal(ctDoubleOnlyPlusAlphaPrice));
					
					BigDecimal ctSinglePice = new BigDecimal(retailPrice)
							.multiply((new BigDecimal(coatSingleOnlyRate).divide(new BigDecimal("100")))).add(new BigDecimal(ctSingleOnlyPlusAlphaPrice));
					
					BigDecimal subtract = ctDoublePice.subtract(ctSinglePice);
					orderFindFabric.setCtDoublePrice(String.valueOf(subtract.setScale(0)));
				}else {
					orderFindFabric.setCtDoublePrice("0");
				}
			}else {
				orderFindFabric.setCtDoublePrice("0");
			}
			orderCoForm.setCtDoubleModelPrice(orderFindFabric.getCtDoublePrice());
		}
	}
	
	/**
	 * 
	 * @param price
	 * @return
	 */
	public String subStrPriceMethod(String price) {
		if(price.indexOf(".") != -1) {
			price = price.substring(0,price.indexOf("."));
		}
		return price;
	}
	
	
	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String,String> modelDoublePriceShow(OrderCoForm orderCoForm){
		Map<String,String> modelDoublePriceMap = new HashMap<String,String>();
		String stringJkValue = null;
		String stringGlValue = null;
		String stringCtValue = null;
		String jkDoubleModelPrice = orderCoForm.getJkDoubleModelPrice();
		
		if("0".equals(jkDoubleModelPrice)) {
			stringJkValue = "無料";
		}
		else {
			stringJkValue = "￥" + formatPrice(subStrPriceMethod(jkDoubleModelPrice));
		}
		modelDoublePriceMap.put("jkDoubleModelPrice", stringJkValue);
		
		String glDoubleModelPrice = orderCoForm.getGlDoubleModelPrice();
		if("0".equals(glDoubleModelPrice)) {
			stringGlValue = "無料";
		}
		else {
			stringGlValue = "￥" + formatPrice(subStrPriceMethod(glDoubleModelPrice));
		}
		modelDoublePriceMap.put("glDoubleModelPrice", stringGlValue);
		
		String ctDoubleModelPrice = orderCoForm.getCtDoubleModelPrice();
		if("0".equals(ctDoubleModelPrice)) {
			stringCtValue = "無料";
		}
		else {
			stringCtValue = "￥" + formatPrice(subStrPriceMethod(ctDoubleModelPrice));
		}
		modelDoublePriceMap.put("ctDoubleModelPrice", stringCtValue);
		
		return modelDoublePriceMap;
	}
	
	/**
	 * 
	 * @param orderCoForm
	 * @return
	 */
	public Map<String,String> productAboutPrice(OrderCoForm orderCoForm) {
		Map<String,String> productAboutPriceMap = new HashMap<String,String>();
		// 納期短縮金額
		String expediteDeliveryPrice = orderCoForm.getExpediteDeliveryPrice();
		if("0".equals(expediteDeliveryPrice)) {
			productAboutPriceMap.put("expediteDeliveryPrice", "無料");
		}
		else {
			productAboutPriceMap.put("expediteDeliveryPrice", "￥" + formatPrice(expediteDeliveryPrice));			
		}
		
		// LCR縫製
		String lcrSewingPrice = orderCoForm.getLcrSewingPrice();
		if("0".equals(lcrSewingPrice)) {
			productAboutPriceMap.put("lcrSewingPrice", "無料");
		}
		else {
			productAboutPriceMap.put("lcrSewingPrice", "￥" + formatPrice(lcrSewingPrice));
		}
		
		// 刺繍箇所
		String embroideryNmPosPrice = orderCoForm.getEmbroideryNmPosPrice();
		if(embroideryNmPosPrice == null || "0".equals(embroideryNmPosPrice)) {
			productAboutPriceMap.put("embroideryNmPosPrice", "無料");
		}
		else {
			productAboutPriceMap.put("embroideryNmPosPrice", "￥" + formatPrice(embroideryNmPosPrice));
		}
		
		// ガゼット刺繍
		String gadgetPrice = orderCoForm.getGadgetPrice();
		if(gadgetPrice == null || "0".equals(gadgetPrice)) {
			productAboutPriceMap.put("gadgetPrice", "無料");
		}
		else {
			productAboutPriceMap.put("gadgetPrice", "￥" + formatPrice(gadgetPrice));
		}
		
		return productAboutPriceMap;
	}

	public void getProductDate(List<OptionBranch> productList, OrderCoForm orderCoForm) {
		try {

			// クラス名
			String classPath = "co.jp.aoyama.macchinetta.app.order.coinfo.CoProductInfo";
			productData(classPath, orderCoForm, productList);

		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
		}
	}

	private void productData(String classPath, OrderCoForm orderCoForm, List<OptionBranch> productList) {
		try {
			CoProductInfo proInfo = new CoProductInfo();
			Class<?> cls = Class.forName(classPath);
			CoProductEnum[] coProductEnum = CoProductEnum.values();
			for (CoProductEnum one : coProductEnum) {
				String[] codeVules = one.toString().split(",");
				productNameData(codeVules,productList,cls,proInfo);
			}
			orderCoForm.setCoProductInfo(proInfo);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	private void productNameData(String[] codeVules, List<OptionBranch> productList, Class<?> cls, Object obj) {
		Map<String, String> productNameMap = new LinkedHashMap<String, String>();

		for (OptionBranch optionBranch : productList) {
			if (codeVules[0].equals(optionBranch.getOptionCode())) {
				productNameMap.put(optionBranch.getOptionBranchCode(), optionBranch.getOptionBranchName());
			}
		}
		// オプションコード対応方法を取得
		Method myMethod = getMethod(cls, codeVules[1]);
		Object[] args = { productNameMap };
		if (myMethod != null) {
			ReflectionUtils.invoke(myMethod, obj, args);
		}
	}

	public void setDbDefaultValue(Order order, OrderCoForm orderCoForm, OrderListService orderListService,ModelService modelService, OrderService orderService, String orderFlag) {
		String productItem = order.getProductItem();
		String productIs3piece = order.getProductIs3piece();
		String productSparePantsClass = order.getProductSparePantsClass();
		String productCategory = order.getProductCategory();
		String productFabricNo = order.getProductFabricNo();
		OrderCoController orderCoController = new OrderCoController();
		
		if("01".equals(productItem)) {
			//JACKET
			optionJacketDbToOrder(productItem,productCategory,orderCoController,order,orderCoForm,orderListService,modelService,orderService);
			//PANTS
			optionPantsDbToOrder(productItem,productCategory,orderCoController,order,orderCoForm,orderListService,modelService);
			if("0009902".equals(productIs3piece)) {
				//GILET
//				optionGiletDbToOrder(productItem,productCategory,orderCoController,order,orderCoForm,orderListService,modelService,orderService);
			}
			
			if("0009902".equals(productSparePantsClass)) {
				//2PANTS
				optionPants2DbToOrder(productItem,productCategory,orderCoController,order,orderCoForm,orderListService,modelService);
			}
		}else if("02".equals(productItem)) {
			optionJacketDbToOrder(productItem,productCategory,orderCoController,order,orderCoForm,orderListService,modelService,orderService);
		}else if("03".equals(productItem)) {			
			optionPantsDbToOrder(productItem,productCategory,orderCoController,order,orderCoForm,orderListService,modelService);	
		}else if("04".equals(productItem)) {
			Order orderGl = orderListService.findOrderGlOptionByOrderId(order.getOrderId());
			if(orderGl !=null ) {
				this.giletDefaultValueFromDb(orderCoForm, orderGl);
			}else {
				this.giletDefaultValue(orderCoForm);
			}
			
			Order orderGlAd = orderListService.findOrderGlByPk(orderCoForm.getCoCustomerMessageInfo().getOrderId());
			CoAdjustGiletStandardInfo coAdjustGiletStandardInfo = orderCoForm.getCoAdjustGiletStandardInfo();
			if(coAdjustGiletStandardInfo == null ) {
				coAdjustGiletStandardInfo = new CoAdjustGiletStandardInfo();
				orderCoForm.setCoAdjustGiletStandardInfo(coAdjustGiletStandardInfo);
			}
			if (orderGlAd != null) {
				this.giletAdjustFromDb(orderCoForm, orderGlAd);
			}
			
			if("9000101".equals(productCategory)) {
				CoOptionGiletStandardInfo coOptionGiletStandardInfo = orderCoForm.getCoOptionGiletStandardInfo();
				String code = productItem.concat("04").concat(coOptionGiletStandardInfo.getOgGiletModel());
				orderCoController.getOrderPriceForGiletStandardModel(orderCoForm, code);
				//ステッチ箇所変更
				String stitchModifyCode = productItem.concat("04").concat(coOptionGiletStandardInfo.getOgGiletModel()).concat("00007");
				String stitchModifyValueName = "og_stitchModify_id";
				String stitchModifyCountArr = coOptionGiletStandardInfo.getOgStitchModifyPlace();
				String stitchModifyValue = coOptionGiletStandardInfo.getOgStitchModify();
				orderCoController.getOrderPriceForGiletStandardProject(orderCoForm, stitchModifyCode, stitchModifyValueName, "", "", stitchModifyCountArr, stitchModifyValue, "");
				//ダブルステッチ変更
				String dStitchModifyCode = productItem.concat("04").concat(coOptionGiletStandardInfo.getOgGiletModel()).concat("00027");
				String dSitchModifyValueName = "og_dStitchModify_id";
				String dSitchModifyCountArr = coOptionGiletStandardInfo.getOgDStitchModifyPlace();
				String dSitchModifyValue = coOptionGiletStandardInfo.getOgDStitchModify();
				orderCoController.getOrderPriceForGiletStandardProject(orderCoForm, dStitchModifyCode, dSitchModifyValueName, "", "", dSitchModifyCountArr, dSitchModifyValue, "");
				//AMF色指定
				String glAmfColorCd = orderGl.getGlAmfColorCd();
				if(glAmfColorCd!=null&&!"".equals(glAmfColorCd)) {
					String amfValueName = "og_amfColor_id";
					String amfCode = productItem.concat("04").concat(coOptionGiletStandardInfo.getOgGiletModel());
					Map<String,String> colorMap = new HashMap<String,String>();
					String[] glAmfColorSplit = glAmfColorCd.split(",");
					for (String amfColor : glAmfColorSplit) {
						colorMap.put(amfColor, amfColor);
					}
					String amfColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String amfColorCode = "00010".concat(valuesList.get(0));
					orderCoController.getOrderPriceForGiletStandardProject(orderCoForm, amfCode, amfValueName, amfColorCode, amfColorCount, "", "", "");
				}
				//ボタンホール色指定
				String glBtnholeColorCd = orderGl.getGlBtnholeColorCd();
				if(glBtnholeColorCd!=null&&!"".equals(glBtnholeColorCd)) {
					String bhValueName = "og_bhColor_id";
					String bhCode = productItem.concat("04").concat(coOptionGiletStandardInfo.getOgGiletModel());
					Map<String,String> colorMap = new HashMap<String,String>();
					String[] glBtnholeColorSplit = glBtnholeColorCd.split(",");
					for (String btnholeColor : glBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00013".concat(valuesList.get(0));
					orderCoController.getOrderPriceForGiletStandardProject(orderCoForm, bhCode, bhValueName, bhColorCode, bhColorCount, "", "", "");
				}
				//ボタン付け糸指定
				String glBtnthreadColorCd = orderGl.getGlBtnthreadColorCd();
				if(glBtnthreadColorCd!=null&&!"".equals(glBtnthreadColorCd)) {
					String byValueName = "og_byColor_id";
					String byCode = productItem.concat("04").concat(coOptionGiletStandardInfo.getOgGiletModel());
					Map<String,String> colorMap = new HashMap<String,String>();
					String[] glBtnthreadColorSplit = glBtnthreadColorCd.split(",");
					for (String btnthreadColor : glBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00016".concat(valuesList.get(0));
					orderCoController.getOrderPriceForGiletStandardProject(orderCoForm, byCode, byValueName, byColorCode, byColorCount, "", "", "");
				}
			}else if("9000102".equals(productCategory)) {
				
			}else if("9000103".equals(productCategory)) {
				
			}
			
			
			List<co.jp.aoyama.macchinetta.domain.model.Model> modelList = modelService.getItemModel(order.getOrderPattern(), productItem,
					"04");
			this.getGiletModelMap(orderCoForm, modelList);
		}else if("05".equals(productItem)) {
			//SHIRTのオプション情報を取得
			Order orderSt = orderListService.findOrderStOptionByOrderId(order.getOrderId());
			
			//初期化設定
			CoOptionShirtStandardInfo coOptionShirtStandardInfo = orderCoForm.getCoOptionShirtStandardInfo();
			if(coOptionShirtStandardInfo == null) {
				coOptionShirtStandardInfo = new CoOptionShirtStandardInfo();
				orderCoForm.setCoOptionShirtStandardInfo(coOptionShirtStandardInfo);
			}
			
			//オプション情報が存在する場合、レコード値を設定
			if(orderSt !=null ) {
				this.shirtDefaultValueFromDb(coOptionShirtStandardInfo, orderSt);
			//オプション情報が存在しない場合、初期値を設定
			}else {
				this.shirtDefaultValue(orderCoForm);
			}
			
			//SHIRTの補正情報を取得
			Order orderStAd = orderListService.findOrderStByPk(orderCoForm.getCoCustomerMessageInfo().getOrderId());
			
			//初期化設定
			CoAdjustShirtStandardInfo coAdjustShirtStandardInfo = orderCoForm.getCoAdjustShirtStandardInfo();
			if(coAdjustShirtStandardInfo == null ) {
				coAdjustShirtStandardInfo = new CoAdjustShirtStandardInfo();
				orderCoForm.setCoAdjustShirtStandardInfo(coAdjustShirtStandardInfo);
			}
			if (orderStAd != null) {
				this.shirtAdjustFromDb(orderCoForm, orderStAd);
			}
			
			String code = productItem.concat("05").concat(coOptionShirtStandardInfo.getOsShirtModel());
			orderCoController.getOrderPriceForShirtModel(orderCoForm, code);
			List<co.jp.aoyama.macchinetta.domain.model.Model> modelList = modelService.getItemModel(order.getOrderPattern(), productItem,
					"05");
			this.getShirtModelMap(orderCoForm, modelList);
		}else if("06".equals(productItem)) {
			Order orderCt = orderListService.findOrderCtOptionByOrderId(order.getOrderId());
			CoOptionCoatStandardInfo coOptionCoatStandardInfo = orderCoForm.getCoOptionCoatStandardInfo();
			if(coOptionCoatStandardInfo == null) {
				coOptionCoatStandardInfo = new CoOptionCoatStandardInfo();
				orderCoForm.setCoOptionCoatStandardInfo(coOptionCoatStandardInfo);
			}
			if(orderCt !=null ) {
				this.coatDefaultValueFromDb(orderCoForm, orderCt);
			}else {
				this.coatDefaultValue(orderCoForm);
			}
			
			Order orderCtAd = orderListService.findOrderCtByPk(orderCoForm.getCoCustomerMessageInfo().getOrderId());
			CoAdjustCoatStandardInfo coAdjustCoatStandardInfo = orderCoForm.getCoAdjustCoatStandardInfo();
			if(coAdjustCoatStandardInfo == null ) {
				coAdjustCoatStandardInfo = new CoAdjustCoatStandardInfo();
				orderCoForm.setCoAdjustCoatStandardInfo(coAdjustCoatStandardInfo);
			}
			if (orderCtAd != null) {
				this.coatAdjustFromDb(orderCoForm, orderCtAd);
			}
			
			String code = productItem.concat("06").concat(coOptionCoatStandardInfo.getCoatModel());
			orderCoController.getOrderPriceForCoatModel(orderCoForm, code);
			List<co.jp.aoyama.macchinetta.domain.model.Model> modelList = modelService.getItemModel(order.getOrderPattern(), productItem,
					"06");
			this.getCoatModelMap(orderCoForm, modelList);
		}
		
		if(productFabricNo !=null && !"".equals(productFabricNo)) {
			OrderFindFabric orderFindFabric = orderService.getOrderFabric(productFabricNo, order.getOrderPattern());
			if(orderFindFabric!=null) {
				this.setGoodsPrice(orderFindFabric, orderCoForm);
				this.findStockModelDoublePrice(orderFindFabric, orderCoForm);
				this.set3Piece2PantsPrice(orderFindFabric,orderCoForm);
				this.setProdectPrice(orderCoForm,orderCoController);
			}else {
				orderCoForm.setProductPrice("0");
			}
		}else {
			orderCoForm.setJkDoubleModelPrice("0");
			orderCoForm.setGlDoubleModelPrice("0");
			orderCoForm.setCtDoubleModelPrice("0");
			orderCoForm.setIs2PantsPrice("0");
			orderCoForm.setIs2PantsPrice("0");
			orderCoForm.setProductPrice("0");
		}
		this.getCoAllPrice(orderCoForm);
	}

	private void getCoAllPrice(OrderCoForm orderCoForm) {
		String productItem = orderCoForm.getProductItem();
		String productIs3Piece = orderCoForm.getProductIs3Piece();
		String productSparePantsClass = orderCoForm.getProductSparePantsClass();
		// オプション金額
		BigDecimal optionPrice = null;
		// 3piece
		String is3PiecePrice = orderCoForm.getIs3PiecePrice();
		// 2pants
		String is2PantsPrice = orderCoForm.getIs2PantsPrice();
		// 刺繍箇所
		String embroideryNmPosPrice = orderCoForm.getEmbroideryNmPosPrice();
		// ガゼット刺繍
		String gadgetPrice = orderCoForm.getGadgetPrice();
		
		if("01".equals(productItem)) {
			String jkOptionPrice = orderCoForm.getJkOptionPrice();
			String jkDoubleModelPrice = orderCoForm.getJkDoubleModelPrice();
			
			String ptOptionPrice = orderCoForm.getPtOptionPrice();
			
			optionPrice = new BigDecimal(jkOptionPrice).add(new BigDecimal(jkDoubleModelPrice)).add(new BigDecimal(ptOptionPrice));
			
			if("0009902".equals(productIs3Piece)) {
				String glOptionPrice = orderCoForm.getGlOptionPrice();
				String glDoubleModelPrice = orderCoForm.getGlDoubleModelPrice();
				optionPrice = optionPrice.add(new BigDecimal(glOptionPrice)).add(new BigDecimal(glDoubleModelPrice)).add(new BigDecimal(is3PiecePrice));
			}
			
			if("0009902".equals(productSparePantsClass)) {
				String pt2OptionPrice = orderCoForm.getPt2OptionPrice();
				optionPrice = optionPrice.add(new BigDecimal(pt2OptionPrice)).add(new BigDecimal(is2PantsPrice));
			}
		}else if("02".equals(productItem)){
			String jkOptionPrice = orderCoForm.getJkOptionPrice();
			String jkDoubleModelPrice = orderCoForm.getJkDoubleModelPrice();
			optionPrice = new BigDecimal(jkOptionPrice).add(new BigDecimal(jkDoubleModelPrice));
		}else if("03".equals(productItem)){
			String ptOptionPrice = orderCoForm.getPtOptionPrice();
			optionPrice = new BigDecimal(ptOptionPrice);
		}else if("04".equals(productItem)) {
			String glOptionPrice = orderCoForm.getGlOptionPrice();
			String glDoubleModelPrice = orderCoForm.getGlDoubleModelPrice();
			optionPrice = new BigDecimal(glOptionPrice).add(new BigDecimal(glDoubleModelPrice));
		}else if("05".equals(productItem)) {
			String stOptionPrice = orderCoForm.getStOptionPrice();
			optionPrice = new BigDecimal(stOptionPrice);
		}else if("06".equals(productItem)) {
			String ctOptionPrice = orderCoForm.getCtOptionPrice();
			String ctDoubleModelPrice = orderCoForm.getCtDoubleModelPrice();
			optionPrice = new BigDecimal(ctOptionPrice).add(new BigDecimal(ctDoubleModelPrice))
					    .add(new BigDecimal(embroideryNmPosPrice)).add(new BigDecimal(gadgetPrice));
		}
		
		// lcr
		String lcrSewingPrice = orderCoForm.getLcrSewingPrice();
		// 納期短縮
		String expediteDeliveryPrice = orderCoForm.getExpediteDeliveryPrice();
		
		optionPrice = optionPrice.add(new BigDecimal(lcrSewingPrice)).add(new BigDecimal(expediteDeliveryPrice));
		
		optionPrice.setScale(0);
		
		orderCoForm.setOptionPrice(String.valueOf(optionPrice));
		
		// 商品金額
		String productPrice = orderCoForm.getProductPrice();
		
		BigDecimal productPriceBig = new BigDecimal(productPrice);
		
		productPriceBig = productPriceBig.setScale(0);
		
		// 合計金額
		BigDecimal totalPrice = optionPrice.add(productPriceBig);
		
		orderCoForm.setTotalPrice(String.valueOf(totalPrice));
		
		// 内消費税
		BigDecimal consumptionTaxAmount = null;
				
		String taxRate = orderCoForm.getTaxRate();
		
		consumptionTaxAmount = totalPrice.multiply(new BigDecimal(taxRate)).setScale(0);
		
		orderCoForm.setConsumptionTaxAmount(String.valueOf(consumptionTaxAmount));
		
		// ご請求金額.
		BigDecimal bibillingAmount = null;

		bibillingAmount = consumptionTaxAmount.add(totalPrice).setScale(0);
				
		orderCoForm.setBillingAmount(String.valueOf(bibillingAmount));
	}

	private void setProdectPrice(OrderCoForm orderCoForm, OrderCoController orderCoController) {
		String productItem = orderCoForm.getProductItem();
		String productCode = "9999ALL";
		//LCR縫製
		String productLcrSewing = orderCoForm.getProductLcrSewing();
		String productLcrSewingId = "lcrSewing";
		String productLcrPrice = orderCoController.productPrice(orderCoForm,productCode,productLcrSewing,productLcrSewingId);
		orderCoForm.setLcrSewingPrice(productLcrPrice);
		//納期短縮
		String custIsDeliverShortning = orderCoForm.getCustIsDeliverShortning();
		String custIsDeliverShortningId = "expediteDelivery";
		String productDeliveryPrice = orderCoController.productPrice(orderCoForm,productCode,custIsDeliverShortning,custIsDeliverShortningId);
		orderCoForm.setExpediteDeliveryPrice(productDeliveryPrice);
		if("05".equals(productItem)) {
			//刺繍箇所
			String productEmbroideryNmPos = orderCoForm.getProductEmbroideryNmPos();
			String productEmbroideryNmPosId = "productEmbroideryNmPos";
			String productEmbroideryNmPosPrice = orderCoController.productPrice(orderCoForm,productCode,productEmbroideryNmPos,productEmbroideryNmPosId);
			orderCoForm.setEmbroideryNmPosPrice(productEmbroideryNmPosPrice);
			//ガゼット刺繍
			String productEmbroideryGazette = orderCoForm.getProductEmbroideryGazette();
			String productEmbroideryGazetteId = "gadget";
			String productEmbroideryGazettePrice = orderCoController.productPrice(orderCoForm,productCode,productEmbroideryGazette,productEmbroideryGazetteId);
			orderCoForm.setGadgetPrice(productEmbroideryGazettePrice);
		}else {
			orderCoForm.setEmbroideryNmPosPrice("0");
			orderCoForm.setGadgetPrice("0");
		}
	}

	public void set3Piece2PantsPrice(OrderFindFabric orderFindFabric, OrderCoForm orderCoForm) {
		String productItem = orderCoForm.getProductItem();
		String productIs3Piece = orderCoForm.getProductIs3Piece();
		String productSparePantsClass = orderCoForm.getProductSparePantsClass();
		if("01".equals(productItem)) {
			if("0009901".equals(productIs3Piece)&&"0009901".equals(productSparePantsClass)) {
				orderCoForm.setIs3PiecePrice("0");
				orderCoForm.setIs2PantsPrice("0");
				orderFindFabric.setIs3PiecePrice("0");
				orderFindFabric.setIs2PantsPrice("0");
			}else if("0009901".equals(productIs3Piece)&&"0009902".equals(productSparePantsClass)) {
				// 上代
				Integer retailPrice = orderFindFabric.getRetailPrice();
				// PANTS追加増額率
				Integer additionalPantsRate = orderFindFabric.getAdditionalPantsRate();
				// 上代*PANTS追加増額率/100
				BigDecimal sparePantsPrice = new BigDecimal(retailPrice).multiply(new BigDecimal(additionalPantsRate).divide(new BigDecimal("100")));
				orderCoForm.setIs2PantsPrice(String.valueOf(sparePantsPrice.setScale(0)));
				orderCoForm.setIs3PiecePrice("0");
				orderFindFabric.setIs2PantsPrice(String.valueOf(sparePantsPrice.setScale(0)));
				orderFindFabric.setIs3PiecePrice("0");
			}else if("0009902".equals(productIs3Piece)&&"0009901".equals(productSparePantsClass)) {
				// 上代
				Integer retailPrice = orderFindFabric.getRetailPrice();
				// シングルGILET追加増額率
				Integer additionalSingleGiletRate = orderFindFabric.getAdditionalSingleGiletRate();
				BigDecimal threePiecePrice = new BigDecimal(retailPrice).multiply(new BigDecimal(additionalSingleGiletRate).divide(new BigDecimal("100")));
				orderCoForm.setIs3PiecePrice(String.valueOf(threePiecePrice.setScale(0)));
				orderCoForm.setIs2PantsPrice("0");
				orderFindFabric.setIs3PiecePrice(String.valueOf(threePiecePrice.setScale(0)));
				orderFindFabric.setIs2PantsPrice("0");
			}else if("0009902".equals(productIs3Piece)&&"0009902".equals(productSparePantsClass)) {
				// 上代
				Integer retailPrice = orderFindFabric.getRetailPrice();
				// シングルGILET追加増額率
				Integer additionalSingleGiletRate = orderFindFabric.getAdditionalSingleGiletRate();
				//シングルGILET追加増額率/100
				BigDecimal threePiecePrice = new BigDecimal(retailPrice).multiply(new BigDecimal(additionalSingleGiletRate).divide(new BigDecimal("100")));
				orderCoForm.setIs3PiecePrice(String.valueOf(threePiecePrice.setScale(0)));
				orderFindFabric.setIs3PiecePrice(String.valueOf(threePiecePrice.setScale(0)));
				
				// PANTS追加増額率
				Integer additionalPantsRate = orderFindFabric.getAdditionalPantsRate();
				// 上代*PANTS追加増額率/100
				BigDecimal sparePantsPrice = new BigDecimal(retailPrice).multiply(new BigDecimal(additionalPantsRate).divide(new BigDecimal("100")));
				orderCoForm.setIs2PantsPrice(String.valueOf(sparePantsPrice.setScale(0)));
				orderFindFabric.setIs2PantsPrice(String.valueOf(sparePantsPrice.setScale(0)));
			}
		}else {
			orderCoForm.setIs3PiecePrice("0");
			orderCoForm.setIs2PantsPrice("0");
			orderFindFabric.setIs3PiecePrice("0");
			orderFindFabric.setIs2PantsPrice("0");
		}
	}

	private void optionJacketDbToOrder(String productItem, String productCategory, OrderCoController orderCoController,
			Order order, OrderCoForm orderCoForm, OrderListService orderListService, ModelService modelService,
			OrderService orderService) {
		Order orderJk = orderListService.findOrderJkOptionByOrderId(order.getOrderId());
//		if(coOptionJacketStandardInfo == null) {
//			coOptionJacketStandardInfo = new CoOptionJacketStandardInfo();
//			orderCoForm.setCoOptionJacketStandardInfo(coOptionJacketStandardInfo);
//		}
		if (orderJk != null) {
			this.jacketDefaultValueFromDb(orderCoForm, orderJk);
		} else {
			this.jacketDefaultValue(orderCoForm);
		}

		Order orderJkAd = orderListService.findOrderJkByPk(orderCoForm.getCoCustomerMessageInfo().getOrderId());
		CoAdjustJacketStandardInfo coAdjustJacketStandardInfo = orderCoForm.getCoAdjustJacketStandardInfo();
		if (coAdjustJacketStandardInfo == null) {
			coAdjustJacketStandardInfo = new CoAdjustJacketStandardInfo();
			orderCoForm.setCoAdjustJacketStandardInfo(coAdjustJacketStandardInfo);
		}
		if (orderJkAd != null) {
			this.jacketAdjustFromDb(orderCoForm, orderJkAd);
		}

		if ("9000101".equals(productCategory)) {
			CoOptionJacketStandardInfo coOptionJacketStandardInfo = orderCoForm.getCoOptionJacketStandardInfo();
			String ojJacketModel = coOptionJacketStandardInfo.getOjJacketModel();
			if (ojJacketModel != null && !"".equals(ojJacketModel)) {
				String code = productItem.concat("02").concat(ojJacketModel);
				orderCoController.getOrderPriceForJacketModel(orderCoForm, code);
				// ステッチ箇所変更
				String stitchModifyValue = coOptionJacketStandardInfo.getOjStitchModify();
				if ("0002402".equals(stitchModifyValue)) {
					String stitchModifyCode = productItem.concat("02").concat(ojJacketModel).concat("00025");
					String stitchModifyCountArr = coOptionJacketStandardInfo.getOjStitchModifyPlace();
					String stitchModifyValueName = "stitchModify_id";
					orderCoController.getOrderPriceForJacketProject(orderCoForm, stitchModifyCode,
							stitchModifyValueName, "", "", stitchModifyCountArr, stitchModifyValue, "");
				}

				// ダブルステッチ変更
				String dSitchModifyValue = coOptionJacketStandardInfo.getOjDStitchModify();
				if ("0002602".equals(stitchModifyValue)) {
					String dStitchModifyCode = productItem.concat("02").concat(ojJacketModel).concat("00027");
					String dSitchModifyCountArr = coOptionJacketStandardInfo.getOjDStitchModifyPlace();
					String dSitchModifyValueName = "dStitchModify_id";
					orderCoController.getOrderPriceForJacketProject(orderCoForm, dStitchModifyCode,
							dSitchModifyValueName, "", "", dSitchModifyCountArr, dSitchModifyValue, "");
				}

				// AMF色指定
				String jkAmfColorCd = orderJk.getJkAmfColorCd();
				if (jkAmfColorCd != null && !"".equals(jkAmfColorCd)) {
					String amfValueName = "amfColor_id";
					String amfCode = productItem.concat("02").concat(ojJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkAmfColorSplit = jkAmfColorCd.split(",");
					for (String amfColor : jkAmfColorSplit) {
						colorMap.put(amfColor, amfColor);
					}
					String amfColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String amfColorCode = "00030".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketProject(orderCoForm, amfCode, amfValueName, amfColorCode,
							amfColorCount, "", "", "");
				}
				// ボタンホール色指定
				String jkBtnholeColorCd = orderJk.getJkBtnholeColorCd();
				if (jkBtnholeColorCd != null && !"".equals(jkBtnholeColorCd)) {
					String bhValueName = "bhColor_id";
					String bhCode = productItem.concat("02").concat(ojJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnholeColorSplit = jkBtnholeColorCd.split(",");
					for (String btnholeColor : jkBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00033".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketProject(orderCoForm, bhCode, bhValueName, bhColorCode,
							bhColorCount, "", "", "");
				}
				// ボタン付け糸指定
				String jkBtnthreadColorCd = orderJk.getJkBtnthreadColorCd();
				if (jkBtnthreadColorCd != null && !"".equals(jkBtnthreadColorCd)) {
					String byValueName = "byColor_id";
					String byCode = productItem.concat("02").concat(ojJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnthreadColorSplit = jkBtnthreadColorCd.split(",");
					for (String btnthreadColor : jkBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00036".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketProject(orderCoForm, byCode, byValueName, byColorCode,
							byColorCount, "", "", "");
				}
			}else {
				orderCoForm.setJkOptionPrice("0");
			}
		} else if ("9000102".equals(productCategory)) {
			CoOptionJacketTuxedoInfo coOptionJacketTuxedoInfo = orderCoForm.getCoOptionJacketTuxedoInfo();
			String tjJacketModel = coOptionJacketTuxedoInfo.getTjJacketModel();
			if (tjJacketModel != null && !"".equals(tjJacketModel)) {
				String code = productItem.concat("02").concat(tjJacketModel);
				orderCoController.getOrderPriceForJacketTuxedoModel(orderCoForm, code);
				// ボタンホール色指定
				String jkBtnholeColorCd = orderJk.getJkBtnholeColorCd();
				if (jkBtnholeColorCd != null && !"".equals(jkBtnholeColorCd)) {
					String bhValueName = "tj_bhColor_id";
					String bhCode = productItem.concat("02").concat(tjJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnholeColorSplit = jkBtnholeColorCd.split(",");
					for (String btnholeColor : jkBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00033".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketTuxedoProject(orderCoForm, bhCode, bhValueName, bhColorCode,
							bhColorCount, "", "", "");
				}
				// ボタン付け糸指定
				String jkBtnthreadColorCd = orderJk.getJkBtnthreadColorCd();
				if (jkBtnthreadColorCd != null && !"".equals(jkBtnthreadColorCd)) {
					String byValueName = "tj_byColor_id";
					String byCode = productItem.concat("02").concat(tjJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnthreadColorSplit = jkBtnthreadColorCd.split(",");
					for (String btnthreadColor : jkBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00036".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketTuxedoProject(orderCoForm, byCode, byValueName, byColorCode,
							byColorCount, "", "", "");
				}
			}else {
				orderCoForm.setJkOptionPrice("0");
			}
		} else if ("9000103".equals(productCategory)) {
			CoOptionJacketWashableInfo coOptionJacketWashableInfo = orderCoForm.getCoOptionJacketWashableInfo();
			String wjJacketModel = coOptionJacketWashableInfo.getWjJacketModel();
			if (wjJacketModel != null && !"".equals(wjJacketModel)) {
				String code = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel());
				orderCoController.getOrderPriceForJacketWashableModel(orderCoForm, code);
				
				// ステッチ箇所変更
				String stitchModifyValue = coOptionJacketWashableInfo.getWjStitchModify();
				if ("0002402".equals(stitchModifyValue)) {
					String stitchModifyCode = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel())
							.concat("00025");
					String stitchModifyCountArr = coOptionJacketWashableInfo.getWjStitchModifyPlace();
					String stitchModifyValueName = "wj_stitchModify_id";
					orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, stitchModifyCode,
							stitchModifyValueName, "", "", stitchModifyCountArr, stitchModifyValue, "");
				}
				
				// ダブルステッチ変更
				String dSitchModifyValue = coOptionJacketWashableInfo.getWjDStitchModify();
				if ("0002602".equals(stitchModifyValue)) {
					String dStitchModifyCode = productItem.concat("02")
							.concat(coOptionJacketWashableInfo.getWjJacketModel()).concat("00027");
					String dSitchModifyValueName = "wj_dStitchModify_id";
					String dSitchModifyCountArr = coOptionJacketWashableInfo.getWjDStitchModifyPlace();
					orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, dStitchModifyCode,
							dSitchModifyValueName, "", "", dSitchModifyCountArr, dSitchModifyValue, "");
				}
				// AMF色指定
				String jkAmfColorCd = orderJk.getJkAmfColorCd();
				if (jkAmfColorCd != null && !"".equals(jkAmfColorCd)) {
					String amfValueName = "wj_amfColor_id";
					String amfCode = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel());
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkAmfColorSplit = jkAmfColorCd.split(",");
					for (String amfColor : jkAmfColorSplit) {
						colorMap.put(amfColor, amfColor);
					}
					String amfColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String amfColorCode = "00030".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, amfCode, amfValueName,
							amfColorCode, amfColorCount, "", "", "");
				}
				// ボタンホール色指定
				String jkBtnholeColorCd = orderJk.getJkBtnholeColorCd();
				if (jkBtnholeColorCd != null && !"".equals(jkBtnholeColorCd)) {
					String bhValueName = "wj_bhColor_id";
					String bhCode = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel());
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnholeColorSplit = jkBtnholeColorCd.split(",");
					for (String btnholeColor : jkBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00033".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, bhCode, bhValueName,
							bhColorCode, bhColorCount, "", "", "");
				}
				// ボタン付け糸指定
				String jkBtnthreadColorCd = orderJk.getJkBtnthreadColorCd();
				if (jkBtnthreadColorCd != null && !"".equals(jkBtnthreadColorCd)) {
					String byValueName = "wj_byColor_id";
					String byCode = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel());
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnthreadColorSplit = jkBtnthreadColorCd.split(",");
					for (String btnthreadColor : jkBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00036".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, byCode, byValueName,
							byColorCode, byColorCount, "", "", "");
				}
			}else {
				orderCoForm.setJkOptionPrice("0");
			}
		}
		List<co.jp.aoyama.macchinetta.domain.model.Model> modelList = modelService.getItemModel(order.getOrderPattern(),
				productItem, "02");
		this.getJacketModelMap(orderCoForm, modelList);
	}
	private void optionPantsDbToOrder(String productItem, String productCategory, OrderCoController orderCoController, Order order, OrderCoForm orderCoForm,
			OrderListService orderListService, ModelService modelService) {
		Order orderPt = orderListService.findOrderPtOptionByOrderId(order.getOrderId());
		if(orderPt !=null ) {
			this.pantsDefaultValueFromDb(orderCoForm, orderPt);
		}else {
			this.pantsDefaultValue(orderCoForm);
		}
		
		Order orderPtAd = orderListService.findOrderPtByPk(orderCoForm.getCoCustomerMessageInfo().getOrderId());
		CoAdjustPantsStandardInfo coAdjustPantsStandardInfo = orderCoForm.getCoAdjustPantsStandardInfo();
		if(coAdjustPantsStandardInfo == null ) {
			coAdjustPantsStandardInfo = new CoAdjustPantsStandardInfo();
			orderCoForm.setCoAdjustPantsStandardInfo(coAdjustPantsStandardInfo);
		}
		if (orderPtAd != null) {
			this.pantsAdjustFromDb(orderCoForm, orderPtAd);
		}
		
		if("9000101".equals(productCategory)) {
			CoOptionPantsStandardInfo coOptionPantsStandardInfo = orderCoForm.getCoOptionPantsStandardInfo();
			String opPantsModel = coOptionPantsStandardInfo.getOpPantsModel();
			if(opPantsModel!=null&&!"".equals(opPantsModel)) {
				String code = productItem.concat("03").concat(coOptionPantsStandardInfo.getOpPantsModel());
				orderCoController.getOrderPriceForPantsModel(orderCoForm, code);
				//ステッチ箇所変更
				String stitchModifyCode = productItem.concat("03").concat(coOptionPantsStandardInfo.getOpPantsModel()).concat("00021");
				String stitchModifyValueName = "op_stitchModify_id";
				String stitchModifyCountArr = coOptionPantsStandardInfo.getOpStitchModifyPlace();
				String stitchModifyValue = coOptionPantsStandardInfo.getOpStitchModify();
				orderCoController.getOrderPriceForPantsSProject(orderCoForm, stitchModifyCode, stitchModifyValueName, "", "", stitchModifyCountArr, stitchModifyValue, "");
				//ダブルステッチ変更
				String dStitchModifyCode = productItem.concat("03").concat(coOptionPantsStandardInfo.getOpPantsModel()).concat("00023");
				String dSitchModifyValueName = "op_dStitch_id";
				String dSitchModifyCountArr = coOptionPantsStandardInfo.getOpDStitchPlace();
				String dSitchModifyValue = coOptionPantsStandardInfo.getOpDStitch();
				orderCoController.getOrderPriceForPantsSProject(orderCoForm, dStitchModifyCode, dSitchModifyValueName, "", "", dSitchModifyCountArr, dSitchModifyValue, "");
				//AMF色指定
				String ptAmfColorCd = orderPt.getPtAmfColorCd();
				if(ptAmfColorCd!=null&&!"".equals(ptAmfColorCd)) {
					String amfValueName = "op_amfColor_id";
					String amfCode = productItem.concat("03").concat(coOptionPantsStandardInfo.getOpPantsModel());
					Map<String,String> colorMap = new HashMap<String,String>();
					String[] ptAmfColorSplit = ptAmfColorCd.split(",");
					for (String amfColor : ptAmfColorSplit) {
						colorMap.put(amfColor, amfColor);
					}
					String amfColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String amfColorCode = "00025".concat(valuesList.get(0));
					orderCoController.getOrderPriceForPantsSProject(orderCoForm, amfCode, amfValueName, amfColorCode, amfColorCount, "", "", "");
				}
				//ボタンホール色指定
				String ptBtnholeColorCd = orderPt.getPtBtnholeColorCd();
				if(ptBtnholeColorCd!=null&&!"".equals(ptBtnholeColorCd)) {
					String bhValueName = "op_bhColor_id";
					String bhCode = productItem.concat("03").concat(coOptionPantsStandardInfo.getOpPantsModel());
					Map<String,String> colorMap = new HashMap<String,String>();
					String[] ptBtnholeColorSplit = ptBtnholeColorCd.split(",");
					for (String btnholeColor : ptBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00028".concat(valuesList.get(0));
					orderCoController.getOrderPriceForPantsSProject(orderCoForm, bhCode, bhValueName, bhColorCode, bhColorCount, "", "", "");
				}
				//ボタン付け糸指定
				String ptBtnthreadColorCd = orderPt.getPtBtnthreadColorCd();
				if(ptBtnthreadColorCd!=null&&!"".equals(ptBtnthreadColorCd)) {
					String byValueName = "op_byColor_id";
					String byCode = productItem.concat("03").concat(coOptionPantsStandardInfo.getOpPantsModel());
					Map<String,String> colorMap = new HashMap<String,String>();
					String[] ptBtnthreadColorSplit = ptBtnthreadColorCd.split(",");
					for (String btnthreadColor : ptBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00031".concat(valuesList.get(0));
					orderCoController.getOrderPriceForPantsSProject(orderCoForm, byCode, byValueName, byColorCode, byColorCount, "", "", "");
				}
			}else {
				orderCoForm.setPtOptionPrice("0");
			}
			
		}else if("9000102".equals(productCategory)) {
							
			CoOptionPantsTuxedoInfo coOptionPantsTuxedoInfo = orderCoForm.getCoOptionPantsTuxedoInfo();
			String tpPantsModel = coOptionPantsTuxedoInfo.getTpPantsModel();
			if(tpPantsModel!=null&&!"".equals(tpPantsModel)) {
				String code = productItem.concat("03").concat(coOptionPantsTuxedoInfo.getTpPantsModel());
				orderCoController.getOrderPriceForPantsTuModel(orderCoForm, code);
				//ボタンホール色指定
				String ptBtnholeColorCd = orderPt.getPtBtnholeColorCd();
				if(ptBtnholeColorCd!=null&&!"".equals(ptBtnholeColorCd)) {
					String bhValueName = "tp_bhColor_id";
					String bhCode = productItem.concat("03").concat(coOptionPantsTuxedoInfo.getTpPantsModel());
					Map<String,String> colorMap = new HashMap<String,String>();
					String[] ptBtnholeColorSplit = ptBtnholeColorCd.split(",");
					for (String btnholeColor : ptBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00028".concat(valuesList.get(0));
					orderCoController.getOrderPriceForPantsSTuProject(orderCoForm, bhCode, bhValueName, bhColorCode, bhColorCount, "", "", "");
				}
				//ボタン付け糸指定
				String ptBtnthreadColorCd = orderPt.getPtBtnthreadColorCd();
				if(ptBtnthreadColorCd!=null&&!"".equals(ptBtnthreadColorCd)) {
					String byValueName = "tp_byColor_id";
					String byCode = productItem.concat("03").concat(coOptionPantsTuxedoInfo.getTpPantsModel());
					Map<String,String> colorMap = new HashMap<String,String>();
					String[] ptBtnthreadColorSplit = ptBtnthreadColorCd.split(",");
					for (String btnthreadColor : ptBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00031".concat(valuesList.get(0));
					orderCoController.getOrderPriceForPantsSTuProject(orderCoForm, byCode, byValueName, byColorCode, byColorCount, "", "", "");
				}
			}else {
				orderCoForm.setPtOptionPrice("0");
			}
		}else if("9000103".equals(productCategory)) {
			CoOptionPantsWashableInfo coOptionPantsWashableInfo = orderCoForm.getCoOptionPantsWashableInfo();
			String wpPantsModel = coOptionPantsWashableInfo.getWpPantsModel();
			if (wpPantsModel != null && !"".equals(wpPantsModel)) {
				String code = productItem.concat("03").concat(coOptionPantsWashableInfo.getWpPantsModel());
				orderCoController.getOrderPriceForPantsWPModel(orderCoForm, code);
				// ステッチ箇所変更
				String stitchModifyCode = productItem.concat("03").concat(coOptionPantsWashableInfo.getWpPantsModel())
						.concat("00021");
				String stitchModifyValueName = "wp_stitchModify_id";
				String stitchModifyCountArr = coOptionPantsWashableInfo.getWpStitchModifyPlace();
				String stitchModifyValue = coOptionPantsWashableInfo.getWpStitchModify();
				orderCoController.getOrderPriceForPantsSWPProject(orderCoForm, stitchModifyCode, stitchModifyValueName,
						"", "", stitchModifyCountArr, stitchModifyValue, "");
				// ダブルステッチ変更
				String dStitchModifyCode = productItem.concat("03").concat(coOptionPantsWashableInfo.getWpPantsModel())
						.concat("00023");
				String dSitchModifyValueName = "wp_dStitch_id";
				String dSitchModifyCountArr = coOptionPantsWashableInfo.getWpDStitchPlace();
				String dSitchModifyValue = coOptionPantsWashableInfo.getWpDStitch();
				orderCoController.getOrderPriceForPantsSWPProject(orderCoForm, dStitchModifyCode, dSitchModifyValueName,
						"", "", dSitchModifyCountArr, dSitchModifyValue, "");
				// AMF色指定
				String ptAmfColorCd = orderPt.getPtAmfColorCd();
				if (ptAmfColorCd != null && !"".equals(ptAmfColorCd)) {
					String amfValueName = "wp_amfColor_id";
					String amfCode = productItem.concat("03").concat(coOptionPantsWashableInfo.getWpPantsModel());
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] ptAmfColorSplit = ptAmfColorCd.split(",");
					for (String amfColor : ptAmfColorSplit) {
						colorMap.put(amfColor, amfColor);
					}
					String amfColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String amfColorCode = "00025".concat(valuesList.get(0));
					orderCoController.getOrderPriceForPantsSWPProject(orderCoForm, amfCode, amfValueName, amfColorCode,
							amfColorCount, "", "", "");
				}
				// ボタンホール色指定
				String ptBtnholeColorCd = orderPt.getPtBtnholeColorCd();
				if (ptBtnholeColorCd != null && !"".equals(ptBtnholeColorCd)) {
					String bhValueName = "wp_bhColor_id";
					String bhCode = productItem.concat("03").concat(coOptionPantsWashableInfo.getWpPantsModel());
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] ptBtnholeColorSplit = ptBtnholeColorCd.split(",");
					for (String btnholeColor : ptBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00028".concat(valuesList.get(0));
					orderCoController.getOrderPriceForPantsSWPProject(orderCoForm, bhCode, bhValueName, bhColorCode,
							bhColorCount, "", "", "");
				}
				// ボタン付け糸指定
				String ptBtnthreadColorCd = orderPt.getPtBtnthreadColorCd();
				if (ptBtnthreadColorCd != null && !"".equals(ptBtnthreadColorCd)) {
					String byValueName = "wp_byColor_id";
					String byCode = productItem.concat("03").concat(coOptionPantsWashableInfo.getWpPantsModel());
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] ptBtnthreadColorSplit = ptBtnthreadColorCd.split(",");
					for (String btnthreadColor : ptBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00031".concat(valuesList.get(0));
					orderCoController.getOrderPriceForPantsSWPProject(orderCoForm, byCode, byValueName, byColorCode,
							byColorCount, "", "", "");
				}
			}else {
				orderCoForm.setPtOptionPrice("0");
			}
		}
		List<co.jp.aoyama.macchinetta.domain.model.Model> modelList = modelService.getItemModel(order.getOrderPattern(), productItem,
				"03");
		this.getPantsModelMap(orderCoForm, modelList);
	}
	
	private void optionPants2DbToOrder(String productItem, String productCategory, OrderCoController orderCoController, Order order, OrderCoForm orderCoForm,
			OrderListService orderListService, ModelService modelService) {
		Order orderPt = orderListService.findOrderPtOptionByOrderId(order.getOrderId());
		if(orderPt !=null ) {
			this.pants2DefaultValueFromDb(orderCoForm, orderPt);
		}else {
			this.pants2DefaultValue(orderCoForm);
		}
		
		Order orderPtAd = orderListService.findOrderPt2ByPk(orderCoForm.getCoCustomerMessageInfo().getOrderId());
		CoAdjustPants2StandardInfo coAdjustPants2StandardInfo = orderCoForm.getCoAdjustPants2StandardInfo();
		if(coAdjustPants2StandardInfo == null ) {
			coAdjustPants2StandardInfo = new CoAdjustPants2StandardInfo();
			orderCoForm.setCoAdjustPants2StandardInfo(coAdjustPants2StandardInfo);
		}
		if (orderPtAd != null) {
			this.pants2AdjustFromDb(orderCoForm, orderPtAd);
		}
		
		if("9000101".equals(productCategory)) {
			CoOptionPants2StandardInfo coOptionPants2StandardInfo = orderCoForm.getCoOptionPants2StandardInfo();
			String code = productItem.concat("07").concat(coOptionPants2StandardInfo.getOp2PantsModel());
			orderCoController.getOrderPriceForPants2Model(orderCoForm, code);
			//ステッチ箇所変更
			String stitchModifyCode = productItem.concat("07").concat(coOptionPants2StandardInfo.getOp2PantsModel()).concat("00021");
			String stitchModifyValueName = "op2_stitchModify_id";
			String stitchModifyCountArr = coOptionPants2StandardInfo.getOp2StitchModifyPlace();
			String stitchModifyValue = coOptionPants2StandardInfo.getOp2StitchModify();
			orderCoController.getOrderPriceForPants2Project(orderCoForm, stitchModifyCode, stitchModifyValueName, "", "", stitchModifyCountArr, stitchModifyValue, "");
			//ダブルステッチ変更
			String dStitchModifyCode = productItem.concat("07").concat(coOptionPants2StandardInfo.getOp2PantsModel()).concat("00023");
			String dSitchModifyValueName = "op2_dStitch_id";
			String dSitchModifyCountArr = coOptionPants2StandardInfo.getOp2DStitchPlace();
			String dSitchModifyValue = coOptionPants2StandardInfo.getOp2DStitch();
			orderCoController.getOrderPriceForPants2Project(orderCoForm, dStitchModifyCode, dSitchModifyValueName, "", "", dSitchModifyCountArr, dSitchModifyValue, "");
			//AMF色指定
			String ptAmfColorCd = orderPt.getPt2AmfColorCd();
			if(ptAmfColorCd!=null&&!"".equals(ptAmfColorCd)) {
				String amfValueName = "op2_amfColor_id";
				String amfCode = productItem.concat("07").concat(coOptionPants2StandardInfo.getOp2PantsModel());
				Map<String,String> colorMap = new HashMap<String,String>();
				String[] ptAmfColorSplit = ptAmfColorCd.split(",");
				for (String amfColor : ptAmfColorSplit) {
					colorMap.put(amfColor, amfColor);
				}
				String amfColorCount = String.valueOf(colorMap.size());
				List<String> valuesList = new ArrayList<String>(colorMap.values());
				String amfColorCode = "00025".concat(valuesList.get(0));
				orderCoController.getOrderPriceForPants2Project(orderCoForm, amfCode, amfValueName, amfColorCode, amfColorCount, "", "", "");
			}
			//ボタンホール色指定
			String ptBtnholeColorCd = orderPt.getPt2BtnholeColorCd();
			if(ptBtnholeColorCd!=null&&!"".equals(ptBtnholeColorCd)) {
				String bhValueName = "op2_bhColor_id";
				String bhCode = productItem.concat("07").concat(coOptionPants2StandardInfo.getOp2PantsModel());
				Map<String,String> colorMap = new HashMap<String,String>();
				String[] ptBtnholeColorSplit = ptBtnholeColorCd.split(",");
				for (String btnholeColor : ptBtnholeColorSplit) {
					colorMap.put(btnholeColor, btnholeColor);
				}
				String bhColorCount = String.valueOf(colorMap.size());
				List<String> valuesList = new ArrayList<String>(colorMap.values());
				String bhColorCode = "00028".concat(valuesList.get(0));
				orderCoController.getOrderPriceForPants2Project(orderCoForm, bhCode, bhValueName, bhColorCode, bhColorCount, "", "", "");
			}
			//ボタン付け糸指定
			String ptBtnthreadColorCd = orderPt.getPt2BtnthreadColorCd();
			if(ptBtnthreadColorCd!=null&&!"".equals(ptBtnthreadColorCd)) {
				String byValueName = "op2_byColor_id";
				String byCode = productItem.concat("07").concat(coOptionPants2StandardInfo.getOp2PantsModel());
				Map<String,String> colorMap = new HashMap<String,String>();
				String[] ptBtnthreadColorSplit = ptBtnthreadColorCd.split(",");
				for (String btnthreadColor : ptBtnthreadColorSplit) {
					colorMap.put(btnthreadColor, btnthreadColor);
				}
				String byColorCount = String.valueOf(colorMap.size());
				List<String> valuesList = new ArrayList<String>(colorMap.values());
				String byColorCode = "00031".concat(valuesList.get(0));
				orderCoController.getOrderPriceForPants2Project(orderCoForm, byCode, byValueName, byColorCode, byColorCount, "", "", "");
			}
		}else if("9000102".equals(productCategory)) {
							
			CoOptionPants2TuxedoInfo coOptionPants2TuxedoInfo = orderCoForm.getCoOptionPants2TuxedoInfo();
			String code = productItem.concat("07").concat(coOptionPants2TuxedoInfo.getTp2PantsModel());
			orderCoController.getOrderPriceForPants2tModel(orderCoForm, code);
			
			//ボタンホール色指定
			String ptBtnholeColorCd = orderPt.getPt2BtnholeColorCd();
			if(ptBtnholeColorCd!=null&&!"".equals(ptBtnholeColorCd)) {
				String bhValueName = "tp2_bhColor_id";
				String bhCode = productItem.concat("07").concat(coOptionPants2TuxedoInfo.getTp2PantsModel());
				Map<String,String> colorMap = new HashMap<String,String>();
				String[] ptBtnholeColorSplit = ptBtnholeColorCd.split(",");
				for (String btnholeColor : ptBtnholeColorSplit) {
					colorMap.put(btnholeColor, btnholeColor);
				}
				String bhColorCount = String.valueOf(colorMap.size());
				List<String> valuesList = new ArrayList<String>(colorMap.values());
				String bhColorCode = "00028".concat(valuesList.get(0));
				orderCoController.getOrderPriceForPants2tProject(orderCoForm, bhCode, bhValueName, bhColorCode, bhColorCount, "", "", "");
			}
			//ボタン付け糸指定
			String ptBtnthreadColorCd = orderPt.getPt2BtnthreadColorCd();
			if(ptBtnthreadColorCd!=null&&!"".equals(ptBtnthreadColorCd)) {
				String byValueName = "tp2_byColor_id";
				String byCode = productItem.concat("07").concat(coOptionPants2TuxedoInfo.getTp2PantsModel());
				Map<String,String> colorMap = new HashMap<String,String>();
				String[] ptBtnthreadColorSplit = ptBtnthreadColorCd.split(",");
				for (String btnthreadColor : ptBtnthreadColorSplit) {
					colorMap.put(btnthreadColor, btnthreadColor);
				}
				String byColorCount = String.valueOf(colorMap.size());
				List<String> valuesList = new ArrayList<String>(colorMap.values());
				String byColorCode = "00031".concat(valuesList.get(0));
				orderCoController.getOrderPriceForPants2tProject(orderCoForm, byCode, byValueName, byColorCode, byColorCount, "", "", "");
			}
		}else if("9000103".equals(productCategory)) {
				
			CoOptionPants2WashableInfo coOptionPants2WashableInfo = orderCoForm.getCoOptionPants2WashableInfo();
			String code = productItem.concat("07").concat(coOptionPants2WashableInfo.getWp2PantsModel());
			orderCoController.getOrderPriceForPants2wModel(orderCoForm, code);
			//ステッチ箇所変更
			String stitchModifyCode = productItem.concat("07").concat(coOptionPants2WashableInfo.getWp2PantsModel()).concat("00021");
			String stitchModifyValueName = "wp2_stitchModify_id";
			String stitchModifyCountArr = coOptionPants2WashableInfo.getWp2StitchModifyPlace();
			String stitchModifyValue = coOptionPants2WashableInfo.getWp2StitchModify();
			orderCoController.getOrderPriceForPants2wProject(orderCoForm, stitchModifyCode, stitchModifyValueName, "", "", stitchModifyCountArr, stitchModifyValue, "");
			//ダブルステッチ変更
			String dStitchModifyCode = productItem.concat("07").concat(coOptionPants2WashableInfo.getWp2PantsModel()).concat("00023");
			String dSitchModifyValueName = "wp2_dStitch_id";
			String dSitchModifyCountArr = coOptionPants2WashableInfo.getWp2DStitchPlace();
			String dSitchModifyValue = coOptionPants2WashableInfo.getWp2DStitch();
			orderCoController.getOrderPriceForPants2wProject(orderCoForm, dStitchModifyCode, dSitchModifyValueName, "", "", dSitchModifyCountArr, dSitchModifyValue, "");
			//AMF色指定
			String ptAmfColorCd = orderPt.getPt2AmfColorCd();
			if(ptAmfColorCd!=null&&!"".equals(ptAmfColorCd)) {
				String amfValueName = "wp2_amfColor_id";
				String amfCode = productItem.concat("07").concat(coOptionPants2WashableInfo.getWp2PantsModel());
				Map<String,String> colorMap = new HashMap<String,String>();
				String[] ptAmfColorSplit = ptAmfColorCd.split(",");
				for (String amfColor : ptAmfColorSplit) {
					colorMap.put(amfColor, amfColor);
				}
				String amfColorCount = String.valueOf(colorMap.size());
				List<String> valuesList = new ArrayList<String>(colorMap.values());
				String amfColorCode = "00025".concat(valuesList.get(0));
				orderCoController.getOrderPriceForPants2wProject(orderCoForm, amfCode, amfValueName, amfColorCode, amfColorCount, "", "", "");
			}
			//ボタンホール色指定
			String ptBtnholeColorCd = orderPt.getPt2BtnholeColorCd();
			if(ptBtnholeColorCd!=null&&!"".equals(ptBtnholeColorCd)) {
				String bhValueName = "wp2_bhColor_id";
				String bhCode = productItem.concat("07").concat(coOptionPants2WashableInfo.getWp2PantsModel());
				Map<String,String> colorMap = new HashMap<String,String>();
				String[] ptBtnholeColorSplit = ptBtnholeColorCd.split(",");
				for (String btnholeColor : ptBtnholeColorSplit) {
					colorMap.put(btnholeColor, btnholeColor);
				}
				String bhColorCount = String.valueOf(colorMap.size());
				List<String> valuesList = new ArrayList<String>(colorMap.values());
				String bhColorCode = "00028".concat(valuesList.get(0));
				orderCoController.getOrderPriceForPants2wProject(orderCoForm, bhCode, bhValueName, bhColorCode, bhColorCount, "", "", "");
			}
			//ボタン付け糸指定
			String ptBtnthreadColorCd = orderPt.getPt2BtnthreadColorCd();
			if(ptBtnthreadColorCd!=null&&!"".equals(ptBtnthreadColorCd)) {
				String byValueName = "wp2_byColor_id";
				String byCode = productItem.concat("07").concat(coOptionPants2WashableInfo.getWp2PantsModel());
				Map<String,String> colorMap = new HashMap<String,String>();
				String[] ptBtnthreadColorSplit = ptBtnthreadColorCd.split(",");
				for (String btnthreadColor : ptBtnthreadColorSplit) {
					colorMap.put(btnthreadColor, btnthreadColor);
				}
				String byColorCount = String.valueOf(colorMap.size());
				List<String> valuesList = new ArrayList<String>(colorMap.values());
				String byColorCode = "00031".concat(valuesList.get(0));
				orderCoController.getOrderPriceForPants2wProject(orderCoForm, byCode, byValueName, byColorCode, byColorCount, "", "", "");
			}
		}
		
		
		List<co.jp.aoyama.macchinetta.domain.model.Model> modelList = modelService.getItemModel(order.getOrderPattern(), productItem,
				"07");
		this.getPants2ModelMap(orderCoForm, modelList);
		
		
	}
	
	private void optionGiletDbToOrder(String productItem, String productCategory, OrderCoController orderCoController,
			Order order, OrderCoForm orderCoForm, OrderListService orderListService, ModelService modelService,
			OrderService orderService) {
		Order orderJk = orderListService.findOrderJkOptionByOrderId(order.getOrderId());
//		if(coOptionJacketStandardInfo == null) {
//			coOptionJacketStandardInfo = new CoOptionJacketStandardInfo();
//			orderCoForm.setCoOptionJacketStandardInfo(coOptionJacketStandardInfo);
//		}
		if (orderJk != null) {
			this.jacketDefaultValueFromDb(orderCoForm, orderJk);
		} else {
			this.jacketDefaultValue(orderCoForm);
		}

		Order orderJkAd = orderListService.findOrderJkByPk(orderCoForm.getCoCustomerMessageInfo().getOrderId());
		CoAdjustJacketStandardInfo coAdjustJacketStandardInfo = orderCoForm.getCoAdjustJacketStandardInfo();
		if (coAdjustJacketStandardInfo == null) {
			coAdjustJacketStandardInfo = new CoAdjustJacketStandardInfo();
			orderCoForm.setCoAdjustJacketStandardInfo(coAdjustJacketStandardInfo);
		}
		if (orderJkAd != null) {
			this.jacketAdjustFromDb(orderCoForm, orderJkAd);
		}

		if ("9000101".equals(productCategory)) {
			CoOptionJacketStandardInfo coOptionJacketStandardInfo = orderCoForm.getCoOptionJacketStandardInfo();
			String ojJacketModel = coOptionJacketStandardInfo.getOjJacketModel();
			if (ojJacketModel != null && !"".equals(ojJacketModel)) {
				String code = productItem.concat("02").concat(ojJacketModel);
				orderCoController.getOrderPriceForJacketModel(orderCoForm, code);
				// ステッチ箇所変更
				String stitchModifyValue = coOptionJacketStandardInfo.getOjStitchModify();
				if ("0002402".equals(stitchModifyValue)) {
					String stitchModifyCode = productItem.concat("02").concat(ojJacketModel).concat("00025");
					String stitchModifyCountArr = coOptionJacketStandardInfo.getOjStitchModifyPlace();
					String stitchModifyValueName = "stitchModify_id";
					orderCoController.getOrderPriceForJacketProject(orderCoForm, stitchModifyCode,
							stitchModifyValueName, "", "", stitchModifyCountArr, stitchModifyValue, "");
				}

				// ダブルステッチ変更
				String dSitchModifyValue = coOptionJacketStandardInfo.getOjDStitchModify();
				if ("0002602".equals(stitchModifyValue)) {
					String dStitchModifyCode = productItem.concat("02").concat(ojJacketModel).concat("00027");
					String dSitchModifyCountArr = coOptionJacketStandardInfo.getOjDStitchModifyPlace();
					String dSitchModifyValueName = "dStitchModify_id";
					orderCoController.getOrderPriceForJacketProject(orderCoForm, dStitchModifyCode,
							dSitchModifyValueName, "", "", dSitchModifyCountArr, dSitchModifyValue, "");
				}

				// AMF色指定
				String jkAmfColorCd = orderJk.getJkAmfColorCd();
				if (jkAmfColorCd != null && !"".equals(jkAmfColorCd)) {
					String amfValueName = "amfColor_id";
					String amfCode = productItem.concat("02").concat(ojJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkAmfColorSplit = jkAmfColorCd.split(",");
					for (String amfColor : jkAmfColorSplit) {
						colorMap.put(amfColor, amfColor);
					}
					String amfColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String amfColorCode = "00030".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketProject(orderCoForm, amfCode, amfValueName, amfColorCode,
							amfColorCount, "", "", "");
				}
				// ボタンホール色指定
				String jkBtnholeColorCd = orderJk.getJkBtnholeColorCd();
				if (jkBtnholeColorCd != null && !"".equals(jkBtnholeColorCd)) {
					String bhValueName = "bhColor_id";
					String bhCode = productItem.concat("02").concat(ojJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnholeColorSplit = jkBtnholeColorCd.split(",");
					for (String btnholeColor : jkBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00033".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketProject(orderCoForm, bhCode, bhValueName, bhColorCode,
							bhColorCount, "", "", "");
				}
				// ボタン付け糸指定
				String jkBtnthreadColorCd = orderJk.getJkBtnthreadColorCd();
				if (jkBtnthreadColorCd != null && !"".equals(jkBtnthreadColorCd)) {
					String byValueName = "byColor_id";
					String byCode = productItem.concat("02").concat(ojJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnthreadColorSplit = jkBtnthreadColorCd.split(",");
					for (String btnthreadColor : jkBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00036".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketProject(orderCoForm, byCode, byValueName, byColorCode,
							byColorCount, "", "", "");
				}
			}
		} else if ("9000102".equals(productCategory)) {
			CoOptionJacketTuxedoInfo coOptionJacketTuxedoInfo = orderCoForm.getCoOptionJacketTuxedoInfo();
			String tjJacketModel = coOptionJacketTuxedoInfo.getTjJacketModel();
			if (tjJacketModel != null && !"".equals(tjJacketModel)) {
				String code = productItem.concat("02").concat(tjJacketModel);
				orderCoController.getOrderPriceForJacketTuxedoModel(orderCoForm, code);
				// ボタンホール色指定
				String jkBtnholeColorCd = orderJk.getJkBtnholeColorCd();
				if (jkBtnholeColorCd != null && !"".equals(jkBtnholeColorCd)) {
					String bhValueName = "tj_bhColor_id";
					String bhCode = productItem.concat("02").concat(tjJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnholeColorSplit = jkBtnholeColorCd.split(",");
					for (String btnholeColor : jkBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00033".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketTuxedoProject(orderCoForm, bhCode, bhValueName, bhColorCode,
							bhColorCount, "", "", "");
				}
				// ボタン付け糸指定
				String jkBtnthreadColorCd = orderJk.getJkBtnthreadColorCd();
				if (jkBtnthreadColorCd != null && !"".equals(jkBtnthreadColorCd)) {
					String byValueName = "tj_byColor_id";
					String byCode = productItem.concat("02").concat(tjJacketModel);
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnthreadColorSplit = jkBtnthreadColorCd.split(",");
					for (String btnthreadColor : jkBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00036".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketTuxedoProject(orderCoForm, byCode, byValueName, byColorCode,
							byColorCount, "", "", "");
				}
			}
		} else if ("9000103".equals(productCategory)) {
			CoOptionJacketWashableInfo coOptionJacketWashableInfo = orderCoForm.getCoOptionJacketWashableInfo();
			String wjJacketModel = coOptionJacketWashableInfo.getWjJacketModel();
			if (wjJacketModel != null && !"".equals(wjJacketModel)) {
				String code = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel());
				orderCoController.getOrderPriceForJacketWashableModel(orderCoForm, code);
				// ステッチ箇所変更
				String stitchModifyCode = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel())
						.concat("00025");
				String stitchModifyValueName = "wj_stitchModify_id";
				String stitchModifyCountArr = coOptionJacketWashableInfo.getWjStitchModifyPlace();
				String stitchModifyValue = coOptionJacketWashableInfo.getWjStitchModify();
				orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, stitchModifyCode,
						stitchModifyValueName, "", "", stitchModifyCountArr, stitchModifyValue, "");
				// ダブルステッチ変更
				String dStitchModifyCode = productItem.concat("02")
						.concat(coOptionJacketWashableInfo.getWjJacketModel()).concat("00027");
				String dSitchModifyValueName = "wj_dStitchModify_id";
				String dSitchModifyCountArr = coOptionJacketWashableInfo.getWjDStitchModifyPlace();
				String dSitchModifyValue = coOptionJacketWashableInfo.getWjDStitchModify();
				orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, dStitchModifyCode,
						dSitchModifyValueName, "", "", dSitchModifyCountArr, dSitchModifyValue, "");
				// AMF色指定
				String jkAmfColorCd = orderJk.getJkAmfColorCd();
				if (jkAmfColorCd != null && !"".equals(jkAmfColorCd)) {
					String amfValueName = "wj_amfColor_id";
					String amfCode = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel());
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkAmfColorSplit = jkAmfColorCd.split(",");
					for (String amfColor : jkAmfColorSplit) {
						colorMap.put(amfColor, amfColor);
					}
					String amfColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String amfColorCode = "00030".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, amfCode, amfValueName,
							amfColorCode, amfColorCount, "", "", "");
				}
				// ボタンホール色指定
				String jkBtnholeColorCd = orderJk.getJkBtnholeColorCd();
				if (jkBtnholeColorCd != null && !"".equals(jkBtnholeColorCd)) {
					String bhValueName = "wj_bhColor_id";
					String bhCode = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel());
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnholeColorSplit = jkBtnholeColorCd.split(",");
					for (String btnholeColor : jkBtnholeColorSplit) {
						colorMap.put(btnholeColor, btnholeColor);
					}
					String bhColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String bhColorCode = "00033".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, bhCode, bhValueName,
							bhColorCode, bhColorCount, "", "", "");
				}
				// ボタン付け糸指定
				String jkBtnthreadColorCd = orderJk.getJkBtnthreadColorCd();
				if (jkBtnthreadColorCd != null && !"".equals(jkBtnthreadColorCd)) {
					String byValueName = "wj_byColor_id";
					String byCode = productItem.concat("02").concat(coOptionJacketWashableInfo.getWjJacketModel());
					Map<String, String> colorMap = new HashMap<String, String>();
					String[] jkBtnthreadColorSplit = jkBtnthreadColorCd.split(",");
					for (String btnthreadColor : jkBtnthreadColorSplit) {
						colorMap.put(btnthreadColor, btnthreadColor);
					}
					String byColorCount = String.valueOf(colorMap.size());
					List<String> valuesList = new ArrayList<String>(colorMap.values());
					String byColorCode = "00036".concat(valuesList.get(0));
					orderCoController.getOrderPriceForJacketWashableProject(orderCoForm, byCode, byValueName,
							byColorCode, byColorCount, "", "", "");
				}
			}
		}
		List<co.jp.aoyama.macchinetta.domain.model.Model> modelList = modelService.getItemModel(order.getOrderPattern(),
				productItem, "02");
		this.getJacketModelMap(orderCoForm, modelList);
	}
	
	/**
	 * SHIRTの入力チェック
	 * @param orderCoForm
	 * @param messages
	 * @return
	 */
	public boolean shirtCheck(OrderCoForm orderCoForm, ResultMessages messages) {
		
		boolean shirtFlag = false;
		
		//SHIRT モデル未選択の場合
		String osShirtModel = orderCoForm.getCoOptionShirtStandardInfo().getOsShirtModel();
		if ("".equals(osShirtModel)  || null == osShirtModel) {
	        messages.add("E031", "SHIRT モデル");
	        shirtFlag = true;
		}

		//襟型未選択の場合
		String osChainModel = orderCoForm.getCoOptionShirtStandardInfo().getOsChainModel();
		if ("0000100".equals(osChainModel)  || null == osChainModel || "".equals(osChainModel) ) {
	        messages.add("E031", "襟型");
	        shirtFlag = true;
		}

		//カフス未選択の場合
		String osCuffs = orderCoForm.getCoOptionShirtStandardInfo().getOsCuffs();
		if ("0000200".equals(osCuffs)  || null == osCuffs || "".equals(osCuffs) ) {
	        messages.add("E031", "カフス");
	        shirtFlag = true;
		}
		
		//ボタン位置変更未選択の場合
		String osBtnPosChg = orderCoForm.getCoOptionShirtStandardInfo().getOsBtnPosChg();
		BigDecimal stNeckbandBtnPosChg = orderCoForm.getCoOptionShirtStandardInfo().getStNeckbandBtnPosChg();
		BigDecimal stFrtfirstBtnPosChg = orderCoForm.getCoOptionShirtStandardInfo().getStFrtfirstBtnPosChg();
		BigDecimal stFrtsecondBtnPosChg = orderCoForm.getCoOptionShirtStandardInfo().getStFrtsecondBtnPosChg();
		
		if ("0002102".equals(osBtnPosChg) && (BigDecimal.ZERO.equals(stNeckbandBtnPosChg) || null == stNeckbandBtnPosChg)
				&& (BigDecimal.ZERO.equals(stFrtfirstBtnPosChg) || null == stFrtfirstBtnPosChg)
				&& (BigDecimal.ZERO.equals(stFrtsecondBtnPosChg) || null == stFrtsecondBtnPosChg)) {
			messages.add("E029", "ボタン位置変更値");
	        shirtFlag = true;
		}
		
		//カジュアルヘムライン値未選択の場合
		String osCasHemLine = orderCoForm.getCoOptionShirtStandardInfo().getOsCasHemLine();
		BigDecimal stCasualHemlineSize = orderCoForm.getCoOptionShirtStandardInfo().getStCasualHemlineSize();
		if ("0002002".equals(osCasHemLine) && ((BigDecimal.ZERO).equals(stCasualHemlineSize) || null == stCasualHemlineSize)) {
	        messages.add("E029", "カジュアルヘムライン値");
	        shirtFlag = true;
		}
		
		//SHIRTサイズ
		CoAdjustShirtStandardInfo coAdjustShirtStandardInfo = orderCoForm.getCoAdjustShirtStandardInfo();
		if(coAdjustShirtStandardInfo == null) {
            messages.add("E031", "SHIRTサイズ");
            shirtFlag = true;
		}else {
			String corStSize = coAdjustShirtStandardInfo.getCorStSize();
			if("".equals(corStSize) || corStSize == null) {
	            messages.add("E031", "SHIRTサイズ");
	            shirtFlag = true;
			}
		}
		
		return shirtFlag;
	}
	
	/**
	 * 
	 * @param order
	 * @return 
	 */
	public void checkBasicValue(Order order) {
		ResultMessages messages = ResultMessages.error(); 

		int i = 0; 

		// ３Pieceまたはスペアパンツは有り
		String productYes = "0009902";

		String productItem = order.getProductItem();
		String productSparePantsClass = order.getProductSparePantsClass();
		String productIs3Piece = order.getProductIs3piece();

		if ("01".equals(productItem)) {
			// JACKET_着丈_型サイズ
			BigDecimal corJkBodylengthSize = order.getCorJkBodylengthSize();
			// JACKET_ウエスト_型サイズ
			BigDecimal corJkWaistSize = order.getCorJkWaistSize();
			// JACKET_袖丈右_型サイズ
			BigDecimal corJkRightsleeveSize = order.getCorJkRightsleeveSize();
			// JACKET_袖丈左_型サイズ
			BigDecimal corJkLeftsleeveSize = order.getCorJkLeftsleeveSize();

			// PANTS_ウエスト_型サイズ
			BigDecimal corPtWaistSize = order.getCorPtWaistSize();
			// PANTS_ヒップ_型サイズ
			BigDecimal corPtHipSize = order.getCorPtHipSize();
			// PANTS_ワタリ_型サイズ
			BigDecimal corPtThighwidthSize = order.getCorPtThighwidthSize();
			// PANTS_裾幅_修正_型サイズ
			BigDecimal corPtHemwidthSize = order.getCorPtHemwidthSize();
			// PANTS_裾幅_修正指定区分
			String corPtHemwidthType = order.getCorPtHemwidthType();

			if (corJkBodylengthSize == null || corJkBodylengthSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "JACKETの着丈修正");
				i += 1;
			} else if (corJkWaistSize == null || corJkWaistSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "JACKETのウエスト修正");
				i += 1;
			} else if (corJkRightsleeveSize == null || corJkRightsleeveSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "JACKETの袖丈右修正");
				i += 1;
			} else if (corJkLeftsleeveSize == null || corJkLeftsleeveSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "JACKETの袖丈左修正");
				i += 1;
			} else if (corPtWaistSize == null || corPtWaistSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "PANTSのウエスト修正");
				i += 1;
			}else if (corPtHipSize == null || corPtHipSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "PANTSのヒップ修正");
				i += 1;
			}else if (corPtThighwidthSize == null || corPtThighwidthSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "PANTSのワタリ幅修正");
				i += 1;
			}else if ("1".equals(corPtHemwidthType)) {
				if (corPtHemwidthSize == null || corPtHemwidthSize.compareTo(BigDecimal.ZERO) == 0) {
					messages.add("E034", "PANTSの裾幅修正");
					i += 1;
				}
			}

			if (productYes.equals(productSparePantsClass)) {
				// 2PANTS_ウエスト_型サイズ
				BigDecimal corPt2WaistSize = order.getCorPt2WaistSize();
				// 2PANTS_ヒップ_型サイズ
				BigDecimal corPt2HipSize = order.getCorPt2HipSize();
				// 2PANTS_ワタリ_型サイズ
				BigDecimal corPt2ThighwidthSize = order.getCorPt2ThighwidthSize();
				// 2PANTS_裾幅_修正_型サイズ
				BigDecimal corPt2HemwidthSize = order.getCorPt2HemwidthSize();
				// 2PANTS_裾幅_修正指定区分
				String corPt2HemwidthType = order.getCorPt2HemwidthType();
				if (corPt2WaistSize == null || corPt2WaistSize.compareTo(BigDecimal.ZERO) == 0) {
					messages.add("E034", "2PANTSウエスト修正");
					i += 1;
				}else if (corPt2HipSize == null || corPt2HipSize.compareTo(BigDecimal.ZERO) == 0) {
					messages.add("E034", "2PANTSヒップ修正");
					i += 1;
				}else if (corPt2ThighwidthSize == null || corPt2ThighwidthSize.compareTo(BigDecimal.ZERO) == 0) {
					messages.add("E034", "2PANTSワタリ幅修正");
					i += 1;
				} else if ("1".equals(corPt2HemwidthType)) {
					if(corPt2HemwidthSize == null || corPt2HemwidthSize.compareTo(BigDecimal.ZERO) == 0) {
						messages.add("E034", "2PANTS裾幅修正");
						i += 1;
					}
				}
			}
			if(productYes.equals(productIs3Piece)) {
				// GILET_着丈_型サイズ
				BigDecimal corGlBodylengthSize = order.getCorGlBodylengthSize();
				// GILET_バスト_型サイズ
				BigDecimal corGlBustSize = order.getCorGlBustSize();
				// GILET_ウエスト_型サイズ
				BigDecimal corGlWaistSize = order.getCorGlWaistSize();
				if(corGlBodylengthSize == null || corGlBodylengthSize.compareTo(BigDecimal.ZERO) == 0 ) {
					messages.add("E034", "GILET着丈修正");
					i += 1;
				}
				else if(corGlBustSize == null || corGlBustSize.compareTo(BigDecimal.ZERO) == 0) {
					messages.add("E034", "GILETバスト修正");
					i += 1;
				}
				else if(corGlWaistSize == null || corGlWaistSize.compareTo(BigDecimal.ZERO) == 0) {
					messages.add("E034", "GILETウエスト修正");
					i += 1;
				}
			}
		} else if ("02".equals(productItem)) {
			// JACKET_着丈_型サイズ
			BigDecimal corJkBodylengthSize = order.getCorJkBodylengthSize();
			// JACKET_ウエスト_型サイズ
			BigDecimal corJkWaistSize = order.getCorJkWaistSize();
			// JACKET_袖丈右_型サイズ
			BigDecimal corJkRightsleeveSize = order.getCorJkRightsleeveSize();
			// JACKET_袖丈左_型サイズ
			BigDecimal corJkLeftsleeveSize = order.getCorJkLeftsleeveSize();

			if (corJkBodylengthSize == null || corJkBodylengthSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "JACKETの着丈修正");
				i += 1;
			} else if (corJkWaistSize == null || corJkWaistSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "JACKETのウエスト修正");
				i += 1;
			} else if (corJkRightsleeveSize == null || corJkRightsleeveSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "JACKETの袖丈右修正");
				i += 1;
			} else if (corJkLeftsleeveSize == null || corJkLeftsleeveSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "JACKETの袖丈左修正");
				i += 1;
			}
		} else if ("03".equals(productItem)) {
			// PANTS_ウエスト_型サイズ
			BigDecimal corPtWaistSize = order.getCorPtWaistSize();
			// PANTS_ヒップ_型サイズ
			BigDecimal corPtHipSize = order.getCorPtHipSize();
			// PANTS_ワタリ_型サイズ
			BigDecimal corPtThighwidthSize = order.getCorPtThighwidthSize();
			// PANTS_裾幅_修正_型サイズ
			BigDecimal corPtHemwidthSize = order.getCorPtHemwidthSize();
			// PANTS_裾幅_修正指定区分
			String corPtHemwidthType = order.getCorPtHemwidthType();
			
			if (corPtWaistSize == null || corPtWaistSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "PANTSのウエスト修正");
				i += 1;
			} else if(corPtHipSize == null || corPtHipSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "PANTSのヒップ修正");
				i += 1;
			} else if (corPtThighwidthSize == null || corPtThighwidthSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "PANTSのワタリ幅修正");
				i += 1;
			} else if ("1".equals(corPtHemwidthType)) {
				if (corPtHemwidthSize == null || corPtHemwidthSize.compareTo(BigDecimal.ZERO) == 0) {
					messages.add("E034", "PANTSの裾幅修正");
					i += 1;
				}
			}
		} else if("04".equals(productItem)) {
			// GILET_着丈_型サイズ
			BigDecimal corGlBodylengthSize = order.getCorGlBodylengthSize();
			// GILET_バスト_型サイズ
			BigDecimal corGlBustSize = order.getCorGlBustSize();
			// GILET_ウエスト_型サイズ
			BigDecimal corGlWaistSize = order.getCorGlWaistSize();
			if(corGlBodylengthSize == null || corGlBodylengthSize.compareTo(BigDecimal.ZERO) == 0 ) {
				messages.add("E034", "GILET着丈修正");
				i += 1;
			}
			else if(corGlBustSize == null || corGlBustSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "GILETバスト修正");
				i += 1;
			}
			else if(corGlWaistSize == null || corGlWaistSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "GILETウエスト修正");
				i += 1;
			}
			
		} else if("05".equals(productItem)) {
			// SHIRTS_ネック_型サイズ
			BigDecimal corStNeckSize = order.getCorStNeckSize();
			// SHIRTS_着丈_型サイズ
			BigDecimal corStBodylengthSize = order.getCorStBodylengthSize();
			// SHIRTS_袖丈右_型サイズ
			BigDecimal corStRightsleeveSize = order.getCorStRightsleeveSize();
			// SHIRTS_袖丈左_型サイズ
			BigDecimal corStLeftsleeveSize = order.getCorStLeftsleeveSize();
			// SHIRTS_カフス周り右_型サイズ
			BigDecimal corStRightcuffsSurroundingSize = order.getCorStRightcuffsSurroundingSize();
			// SHIRTS_カフス周り左_型サイズ
			BigDecimal corStLeftcuffsSurroundingSize = order.getCorStLeftcuffsSurroundingSize();
			// SHIRT_カジュアルヘムライン仕様_コード
			String stCasualHemlineCd = order.getStCasualHemlineCd();
			if(corStNeckSize == null || corStNeckSize.compareTo(BigDecimal.ZERO) == 0 ) {
				messages.add("E034", "SHIRTネック");
				i += 1;
			} 
			else if(!"0002002".equals(stCasualHemlineCd)) {
				if(corStBodylengthSize == null || corStBodylengthSize.compareTo(BigDecimal.ZERO) == 0) {
					messages.add("E034", "SHIRT着丈修正");
					i += 1;
				}
			}
			else if(corStRightsleeveSize == null || corStRightsleeveSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "SHIRT袖丈右修正");
				i += 1;
			}
			else if(corStLeftsleeveSize == null || corStLeftsleeveSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "SHIRT袖丈左修正");
				i += 1;
			}
			else if(corStRightcuffsSurroundingSize == null || corStRightcuffsSurroundingSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "SHIRTカフス周り右");
				i += 1;
			}
			else if(corStLeftcuffsSurroundingSize == null || corStLeftcuffsSurroundingSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "SHIRTカフス周り左");
				i += 1;
			}
		} else if("06".equals(productItem)) {
			// COAT_着丈_型サイズ
			BigDecimal corCtBodylengthSize = order.getCorCtBodylengthSize();
			// COAT_ウエスト_型サイズ
			BigDecimal corCtWaistSize = order.getCorCtWaistSize();
			// COAT_袖丈右_型サイズ
			BigDecimal corCtRightsleeveSize = order.getCorCtRightsleeveSize();
			// COAT_袖丈左_型サイズ
			BigDecimal corCtLeftsleeveSize = order.getCorCtLeftsleeveSize();
			// COAT_ベント修正（高さ）_型サイズ
			BigDecimal corCtVenthightSize = order.getCorCtVenthightSize();
			// COAT_ポケット位置_型サイズ
			BigDecimal corCtPktposSize = order.getCorCtPktposSize();
			if(corCtBodylengthSize == null || corCtBodylengthSize.compareTo(BigDecimal.ZERO) == 0 ) {
				messages.add("E034", "COAT着丈修正");
				i += 1;
			}
			else if(corCtWaistSize == null || corCtWaistSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "COATウエスト修正");
				i += 1;
			}
			else if(corCtRightsleeveSize == null || corCtRightsleeveSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "COAT袖丈右修正");
				i += 1;
			}
			else if(corCtLeftsleeveSize == null || corCtLeftsleeveSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "COAT袖丈左修正");
				i += 1;
			}
			else if(corCtVenthightSize == null || corCtVenthightSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "COATベント修正（高さ）");
				i += 1;
			}
			else if(corCtPktposSize == null || corCtPktposSize.compareTo(BigDecimal.ZERO) == 0) {
				messages.add("E034", "COATポケット位置");
				i += 1;
			}
		}
		
		if(i != 0) {
			logger.error(messages.toString());
            throw new ResourceNotFoundException(messages);
		}
	}
	
	/**
	 * 
	 * @param adjustByItem
	 * @param orderForm
	 */
	public void checkAbsolutelyAdjust(List<Adjust> adjustByItem,Order order) {
		ResultMessages messages = ResultMessages.error();
		int j = 0;
		
		// ３Pieceまたはスペアパンツは有り
		String productYes = "0009902";
		
		String productItem = order.getProductItem();
		String productSparePantsClass = order.getProductSparePantsClass();
		String productIs3Piece = order.getProductIs3piece();
		
		// JACKET_着丈_型サイズ
		BigDecimal corJkBodylengthSize = order.getCorJkBodylengthSize();
		// JACKET_着丈_グロス
		BigDecimal corJkBodylengthGross = order.getCorJkBodylengthGross();
		
		// JACKET_ウエスト_型サイズ
		BigDecimal corJkWaistSize = order.getCorJkWaistSize();
		// JACKET_ウエスト_グロス
		BigDecimal corJkWaistGross = order.getCorJkWaistGross();
				
		// JACKET_袖丈右_型サイズ
		BigDecimal corJkRightsleeveSize = order.getCorJkRightsleeveSize();
		// JACKET_袖丈右_グロス
		BigDecimal corJkRightsleeveGross = order.getCorJkRightsleeveGross();
		
		// JACKET_袖丈左_型サイズ
		BigDecimal corJkLeftsleeveSize = order.getCorJkLeftsleeveSize();
		// JACKET_袖丈左_グロス
		BigDecimal corJkLeftsleeveGross = order.getCorJkLeftsleeveGross();
		
		// PANTS_ウエスト_型サイズ
		BigDecimal corPtWaistSize = order.getCorPtWaistSize();
		// PANTS_ウエスト_グロス
		BigDecimal corPtWaistGross = order.getCorPtWaistGross();
		
		// PANTS_ヒップ_型サイズ
		BigDecimal corPtHipSize = order.getCorPtHipSize();
		// PANTS_ヒップ_グロス
		BigDecimal corPtHipGross = order.getCorPtHipGross();
		
		// PANTS_ワタリ_型サイズ
		BigDecimal corPtThighwidthSize = order.getCorPtThighwidthSize();
		// PANTS_ワタリ_グロス
		BigDecimal corPtThighwidthGross = order.getCorPtThighwidthGross();
		
		// PANTS_裾幅_修正_型サイズ
		BigDecimal corPtHemwidthSize = order.getCorPtHemwidthSize();
		// PANTS_裾幅_修正_グロス
		BigDecimal corPtHemwidthGross = order.getCorPtHemwidthGross();
		
		// 2PANTS_ウエスト_型サイズ
		BigDecimal corPt2WaistSize = order.getCorPt2WaistSize();
		// 2PANTS_ウエスト_グロス
		BigDecimal corPt2WaistGross = order.getCorPt2WaistGross();
		
		// 2PANTS_ヒップ_型サイズ
		BigDecimal corPt2HipSize = order.getCorPt2HipSize();
		// 2PANTS_ヒップ_グロス
		BigDecimal corPt2HipGross = order.getCorPt2HipGross();
		
		// 2PANTS_ワタリ_型サイズ
		BigDecimal corPt2ThighwidthSize = order.getCorPt2ThighwidthSize();
		// 2PANTS_ワタリ_グロス
		BigDecimal corPt2ThighwidthGross = order.getCorPt2ThighwidthGross();
		
		// 2PANTS_裾幅_修正_型サイズ
		BigDecimal corPt2HemwidthSize = order.getCorPt2HemwidthSize();
		// 2PANTS_裾幅_修正_グロス
		BigDecimal corPt2HemwidthGross = order.getCorPt2HemwidthGross();
		
		// GILET_着丈_型サイズ
		BigDecimal corGlBodylengthSize = order.getCorGlBodylengthSize();
		// GILET_着丈_グロス
		BigDecimal corGlBodylengthGross = order.getCorGlBodylengthGross();
		
		// GILET_バスト_型サイズ
		BigDecimal corGlBustSize = order.getCorGlBustSize();
		// GILET_バスト_グロス
		BigDecimal corGlBustGross = order.getCorGlBustGross();
		
		// GILET_ウエスト_型サイズ
		BigDecimal corGlWaistSize = order.getCorGlWaistSize();
		// GILET_ウエスト_グロス
		BigDecimal corGlWaistGross = order.getCorGlWaistGross();
		
		// SHIRTS_ネック_型サイズ
		BigDecimal corStNeckSize = order.getCorStNeckSize();
		// SHIRTS_ネック_グロス
		BigDecimal corStNeckGross = order.getCorStNeckGross();
		
		// SHIRTS_着丈_型サイズ
		BigDecimal corStBodylengthSize = order.getCorStBodylengthSize();
		// SHIRTS_着丈_グロス
		BigDecimal corStBodylengthGross = order.getCorStBodylengthGross();
		
		// SHIRTS_袖丈右_型サイズ
		BigDecimal corStRightsleeveSize = order.getCorStRightsleeveSize();
		// SHIRTS_袖丈右_グロス
		BigDecimal corStRightsleeveGross = order.getCorStRightsleeveGross();
		
		// SHIRTS_袖丈左_型サイズ
		BigDecimal corStLeftsleeveSize = order.getCorStLeftsleeveSize();
		// SHIRTS_袖丈左_グロス
		BigDecimal corStLeftsleeveGross = order.getCorStLeftsleeveGross();
		
		// SHIRTS_カフス周り右_型サイズ
		BigDecimal corStRightcuffsSurroundingSize = order.getCorStRightcuffsSurroundingSize();
		// SHIRTS_カフス周り右_グロス
		BigDecimal corStRightcuffsSurroundingGross = order.getCorStRightcuffsSurroundingGross();
		
		// SHIRTS_カフス周り左_型サイズ
		BigDecimal corStLeftcuffsSurroundingSize = order.getCorStLeftcuffsSurroundingSize();
		// SHIRTS_カフス周り左_グロス
		BigDecimal corStLeftcuffsSurroundingGross = order.getCorStLeftcuffsSurroundingGross();
		
		// COAT_着丈_型サイズ
		BigDecimal corCtBodylengthSize = order.getCorCtBodylengthSize();
		// COAT_着丈_グロス
		BigDecimal corCtBodylengthGross = order.getCorCtBodylengthGross();
		
		// COAT_ウエスト_型サイズ
		BigDecimal corCtWaistSize = order.getCorCtWaistSize();
		// COAT_ウエスト_グロス
		BigDecimal corCtWaistGross = order.getCorCtWaistGross();
		
		// COAT_袖丈右_型サイズ
		BigDecimal corCtRightsleeveSize = order.getCorCtRightsleeveSize();
		// COAT_袖丈右_グロス
		BigDecimal corCtRightsleeveGross = order.getCorCtRightsleeveGross();
		
		// COAT_袖丈左_型サイズ
		BigDecimal corCtLeftsleeveSize = order.getCorCtLeftsleeveSize();
		// COAT_袖丈左_グロス
		BigDecimal corCtLeftsleeveGross = order.getCorCtLeftsleeveGross();
		
		// COAT_ベント修正（高さ）_型サイズ
		BigDecimal corCtVenthightSize = order.getCorCtVenthightSize();
		// COAT_ベント修正（高さ）_グロス
		BigDecimal corCtVenthightGross = order.getCorCtVenthightGross();
		
		// COAT_ポケット位置_型サイズ
		BigDecimal corCtPktposSize = order.getCorCtPktposSize();
		// COAT_ポケット位置_グロス
		BigDecimal corCtPktposGross = order.getCorCtPktposGross();
		
		// SHIRT_カジュアルヘムライン仕様_コード
		String stCasualHemlineCd = order.getStCasualHemlineCd();
		
		// PANTS_裾幅_修正指定区分
		String corPtHemwidthType = order.getCorPtHemwidthType();
		
		// 2PANTS_裾幅_修正指定区分
		String corPt2HemwidthType = order.getCorPt2HemwidthType();

		for(Adjust adjust : adjustByItem) {
			if("01".equals(productItem)) {
				if("01".equals(adjust.getItemCode())) {
					if("02".equals(adjust.getSubItemCode())) {
						// 着丈修正
						if("01".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corJkBodylengthSize);
							BigDecimal addMax = adjusteMax.add(corJkBodylengthSize);
							if(corJkBodylengthGross.compareTo(addMin) == -1 || corJkBodylengthGross.compareTo(addMax) == 1) {
								messages.add("E035","JACKETの着丈修正");
								j += 1;
								break;
							}
						}
						// ウエスト修正
						if("02".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corJkWaistSize);
							BigDecimal addMax = adjusteMax.add(corJkWaistSize);
							if(corJkWaistGross.compareTo(addMin) == -1 || corJkWaistGross.compareTo(addMax) == 1) {
								messages.add("E035","JACKETのウエスト修正");
								j += 1;
								break;
							}
						}
						// 袖丈右修正
						if("03".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corJkRightsleeveSize);
							BigDecimal addMax = adjusteMax.add(corJkRightsleeveSize);
							if(corJkRightsleeveGross.compareTo(addMin) == -1 || corJkRightsleeveGross.compareTo(addMax) == 1) {
								messages.add("E035","JACKETの袖丈右修正");
								j += 1;
								break;
							}
						}
						// 袖丈左修正
						if("04".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corJkLeftsleeveSize);
							BigDecimal addMax = adjusteMax.add(corJkLeftsleeveSize);
							if(corJkLeftsleeveGross.compareTo(addMin) == -1 || corJkLeftsleeveGross.compareTo(addMax) == 1) {
								messages.add("E035","JACKETの袖丈左修正");
								j += 1;
								break;
							}
						}
					}
					if("03".equals(adjust.getSubItemCode())) {
						// ウエスト修正
						if("06".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corPtWaistSize);
							BigDecimal addMax = adjusteMax.add(corPtWaistSize);
							if(corPtWaistGross.compareTo(addMin) == -1 || corPtWaistGross.compareTo(addMax) == 1) {
								messages.add("E035","PANTSのウエスト修正");
								j += 1;
								break;
							}
						}
						// ヒップ修正
						if("05".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corPtHipSize);
							BigDecimal addMax = adjusteMax.add(corPtHipSize);
							if(corPtHipGross.compareTo(addMin) == -1 || corPtHipGross.compareTo(addMax) == 1) {
								messages.add("E035","PANTSのヒップ修正");
								j += 1;
								break;
							}
						}
						// ワタリ修正
						if("07".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corPtThighwidthSize);
							BigDecimal addMax = adjusteMax.add(corPtThighwidthSize);
							if(corPtThighwidthGross.compareTo(addMin) == -1 || corPtThighwidthGross.compareTo(addMax) == 1) {
								messages.add("E035","PANTSのワタリ修正");
								j += 1;
								break;
							}
						}
						if("1".equals(corPtHemwidthType)) {
							// 裾幅修正
							if("08".equals(adjust.getAdjusteClass())) {
								BigDecimal adjusteMax = adjust.getAdjusteMax();
								BigDecimal adjusteMin = adjust.getAdjusteMin();
								BigDecimal addMin = adjusteMin.add(corPtHemwidthSize);
								BigDecimal addMax = adjusteMax.add(corPtHemwidthSize);
								if(corPtHemwidthGross.compareTo(addMin) == -1 || corPtHemwidthGross.compareTo(addMax) == 1) {
									messages.add("E035","PANTSのワタリ修正");
									j += 1;
									break;
								}
							}
						}
						
					}
					if(productYes.equals(productSparePantsClass)) {
						if("07".equals(adjust.getSubItemCode())) {
							// ウエスト修正2
							if("06".equals(adjust.getAdjusteClass())) {
								BigDecimal adjusteMax = adjust.getAdjusteMax();
								BigDecimal adjusteMin = adjust.getAdjusteMin();
								BigDecimal addMin = adjusteMin.add(corPt2WaistSize);
								BigDecimal addMax = adjusteMax.add(corPt2WaistSize);
								if(corPt2WaistGross.compareTo(addMin) == -1 || corPt2WaistGross.compareTo(addMax) == 1) {
									messages.add("E035","2PANTSのウエスト修正2");
									j += 1;
									break;
								}
							}
							// ヒップ修正2
							if("05".equals(adjust.getAdjusteClass())) {
								BigDecimal adjusteMax = adjust.getAdjusteMax();
								BigDecimal adjusteMin = adjust.getAdjusteMin();
								BigDecimal addMin = adjusteMin.add(corPt2HipSize);
								BigDecimal addMax = adjusteMax.add(corPt2HipSize);
								if(corPt2HipGross.compareTo(addMin) == -1 || corPt2HipGross.compareTo(addMax) == 1) {
									messages.add("E035","2PANTSのヒップ修正2");
									j += 1;
									break;
								}
							}
							// ワタリ修正2
							if("07".equals(adjust.getAdjusteClass())) {
								BigDecimal adjusteMax = adjust.getAdjusteMax();
								BigDecimal adjusteMin = adjust.getAdjusteMin();
								BigDecimal addMin = adjusteMin.add(corPt2ThighwidthSize);
								BigDecimal addMax = adjusteMax.add(corPt2ThighwidthSize);
								if(corPt2ThighwidthGross.compareTo(addMin) == -1 || corPt2ThighwidthGross.compareTo(addMax) == 1) {
									messages.add("E035","2PANTSのワタリ修正2");
									j += 1;
									break;
								}
							}
							if("1".equals(corPt2HemwidthType)) {
								// 裾幅修正2
								if("08".equals(adjust.getAdjusteClass())) {
									BigDecimal adjusteMax = adjust.getAdjusteMax();
									BigDecimal adjusteMin = adjust.getAdjusteMin();
									BigDecimal addMin = adjusteMin.add(corPt2HemwidthSize);
									BigDecimal addMax = adjusteMax.add(corPt2HemwidthSize);
									if(corPt2HemwidthGross.compareTo(addMin) == -1 || corPt2HemwidthGross.compareTo(addMax) == 1) {
										messages.add("E035","2PANTSの裾幅修正2");
										j += 1;
										break;
									}
								}
							}
						}
					}
					if(productYes.equals(productIs3Piece)) {
						// 着丈修正
						if("01".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corGlBodylengthSize);
							BigDecimal addMax = adjusteMax.add(corGlBodylengthSize);
							if(corGlBodylengthGross.compareTo(addMin) == -1 || corGlBodylengthGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETの着丈修正");
								j += 1;
								break;
							}
						}
						// バスト修正
						if("14".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corGlBustSize);
							BigDecimal addMax = adjusteMax.add(corGlBustSize);
							if(corGlBustGross.compareTo(addMin) == -1 || corGlBustGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETのバスト修正");
								j += 1;
								break;
							}
						}
						// ウエスト修正
						if("02".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corGlWaistSize);
							BigDecimal addMax = adjusteMax.add(corGlWaistSize);
							if(corGlWaistGross.compareTo(addMin) == -1 || corGlWaistGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETのウエスト修正");
								j += 1;
								break;
							}
						}
					}
				}
			}
			else if("02".equals(productItem)) {
				if("02".equals(adjust.getItemCode())) {
					if("02".equals(adjust.getSubItemCode())) {
						// 着丈修正
						if("01".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corJkBodylengthSize);
							BigDecimal addMax = adjusteMax.add(corJkBodylengthSize);
							if(corJkBodylengthGross.compareTo(addMin) == -1 || corJkBodylengthGross.compareTo(addMax) == 1) {
								messages.add("E035","JACKETの着丈修正");
								j += 1;
								break;
							}
						}
						// ウエスト修正
						if("02".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corJkWaistSize);
							BigDecimal addMax = adjusteMax.add(corJkWaistSize);
							if(corJkWaistGross.compareTo(addMin) == -1 || corJkWaistGross.compareTo(addMax) == 1) {
								messages.add("E035","JACKETのウエスト修正");
								j += 1;
								break;
							}
						}
						// 袖丈右修正
						if("03".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corJkRightsleeveSize);
							BigDecimal addMax = adjusteMax.add(corJkRightsleeveSize);
							if(corJkRightsleeveGross.compareTo(addMin) == -1 || corJkRightsleeveGross.compareTo(addMax) == 1) {
								messages.add("E035","JACKETの袖丈右修正");
								j += 1;
								break;
							}
						}
						// 袖丈左修正
						if("04".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corJkLeftsleeveSize);
							BigDecimal addMax = adjusteMax.add(corJkLeftsleeveSize);
							if(corJkLeftsleeveGross.compareTo(addMin) == -1 || corJkLeftsleeveGross.compareTo(addMax) == 1) {
								messages.add("E035","JACKETの袖丈左修正");
								j += 1;
								break;
							}
						}
					}
				}
			}
			else if("03".equals(productItem)) {
				if("03".equals(adjust.getItemCode())) {
					if("03".equals(adjust.getSubItemCode())) {
						// ウエスト修正
						if("06".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corPtWaistSize);
							BigDecimal addMax = adjusteMax.add(corPtWaistSize);
							if(corPtWaistGross.compareTo(addMin) == -1 || corPtWaistGross.compareTo(addMax) == 1) {
								messages.add("E035","PANTSのウエスト修正");
								j += 1;
								break;
							}
						}
						// ヒップ修正
						if("05".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corPtHipSize);
							BigDecimal addMax = adjusteMax.add(corPtHipSize);
							if(corPtHipGross.compareTo(addMin) == -1 || corPtHipGross.compareTo(addMax) == 1) {
								messages.add("E035","PANTSのヒップ修正");
								j += 1;
								break;
							}
						}
						// ワタリ修正
						if("07".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corPtThighwidthSize);
							BigDecimal addMax = adjusteMax.add(corPtThighwidthSize);
							if(corPtThighwidthGross.compareTo(addMin) == -1 || corPtThighwidthGross.compareTo(addMax) == 1) {
								messages.add("E035","PANTSのワタリ修正");
								j += 1;
								break;
							}
						}
						if("1".equals(corPtHemwidthType)) {
							// 裾幅修正
							if("08".equals(adjust.getAdjusteClass())) {
								BigDecimal adjusteMax = adjust.getAdjusteMax();
								BigDecimal adjusteMin = adjust.getAdjusteMin();
								BigDecimal addMin = adjusteMin.add(corPtHemwidthSize);
								BigDecimal addMax = adjusteMax.add(corPtHemwidthSize);
								if(corPtHemwidthGross.compareTo(addMin) == -1 || corPtHemwidthGross.compareTo(addMax) == 1) {
									messages.add("E035","PANTSのワタリ修正");
									j += 1;
									break;
								}
							}
						}
					}
				}
			}
			else if("04".equals(productItem)) {
				if("04".equals(adjust.getItemCode())) {
					if("04".equals(adjust.getSubItemCode())) {
						// 着丈修正
						if("01".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corGlBodylengthSize);
							BigDecimal addMax = adjusteMax.add(corGlBodylengthSize);
							if(corGlBodylengthGross.compareTo(addMin) == -1 || corGlBodylengthGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETの着丈修正");
								j += 1;
								break;
							}
						}
						// バスト修正
						if("14".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corGlBustSize);
							BigDecimal addMax = adjusteMax.add(corGlBustSize);
							if(corGlBustGross.compareTo(addMin) == -1 || corGlBustGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETのバスト修正");
								j += 1;
								break;
							}
						}
						// ウエスト修正
						if("02".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corGlWaistSize);
							BigDecimal addMax = adjusteMax.add(corGlWaistSize);
							if(corGlWaistGross.compareTo(addMin) == -1 || corGlWaistGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETのウエスト修正");
								j += 1;
								break;
							}
						}
					}
				}
			}
			else if("05".equals(productItem)) {
				if("05".equals(adjust.getItemCode())) {
					if("05".equals(adjust.getSubItemCode())) {
						// ネック
						if("11".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corStNeckSize);
							BigDecimal addMax = adjusteMax.add(corStNeckSize);
							if(corStNeckGross.compareTo(addMin) == -1 || corStNeckGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETのネック");
								j += 1;
								break;
							}
						}
						if(!"0002002".equals(stCasualHemlineCd)) {
							// 着丈修正
							if("01".equals(adjust.getAdjusteClass())) {
								BigDecimal adjusteMax = adjust.getAdjusteMax();
								BigDecimal adjusteMin = adjust.getAdjusteMin();
								BigDecimal addMin = adjusteMin.add(corStBodylengthSize);
								BigDecimal addMax = adjusteMax.add(corStBodylengthSize);
								if(corStBodylengthGross.compareTo(addMin) == -1 || corStBodylengthGross.compareTo(addMax) == 1) {
									messages.add("E035","GILETの着丈修正");
									j += 1;
									break;
								}
							}
						}
						// 袖丈右修正
						if("03".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corStRightsleeveSize);
							BigDecimal addMax = adjusteMax.add(corStRightsleeveSize);
							if(corStRightsleeveGross.compareTo(addMin) == -1 || corStRightsleeveGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETの袖丈右修正");
								j += 1;
								break;
							}
						}
						// 袖丈左修正
						if("04".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corStLeftsleeveSize);
							BigDecimal addMax = adjusteMax.add(corStLeftsleeveSize);
							if(corStLeftsleeveGross.compareTo(addMin) == -1 || corStLeftsleeveGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETの袖丈左修正");
								j += 1;
								break;
							}
						}
						// カフス周り右
						if("12".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corStRightcuffsSurroundingSize);
							BigDecimal addMax = adjusteMax.add(corStRightcuffsSurroundingSize);
							if(corStRightcuffsSurroundingGross.compareTo(addMin) == -1 || corStRightcuffsSurroundingGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETのカフス周り右");
								j += 1;
								break;
							}
						}
						// カフス周り左
						if("13".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corStLeftcuffsSurroundingSize);
							BigDecimal addMax = adjusteMax.add(corStLeftcuffsSurroundingSize);
							if(corStLeftcuffsSurroundingGross.compareTo(addMin) == -1 || corStLeftcuffsSurroundingGross.compareTo(addMax) == 1) {
								messages.add("E035","GILETのカフス周り左");
								j += 1;
								break;
							}
						}
					}
				}
			}
			else if("06".equals(productItem)) {
				if("06".equals(adjust.getItemCode())) {
					if("06".equals(adjust.getSubItemCode())) {
						// 着丈修正
						if("01".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corCtBodylengthSize);
							BigDecimal addMax = adjusteMax.add(corCtBodylengthSize);
							if(corCtBodylengthGross.compareTo(addMin) == -1 || corCtBodylengthGross.compareTo(addMax) == 1) {
								messages.add("E035","COATの着丈修正");
								j += 1;
								break;
							}
						}
						// ウエスト修正
						if("02".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corCtWaistSize);
							BigDecimal addMax = adjusteMax.add(corCtWaistSize);
							if(corCtWaistGross.compareTo(addMin) == -1 || corCtWaistGross.compareTo(addMax) == 1) {
								messages.add("E035","COATのウエスト修正");
								j += 1;
								break;
							}
						}
						// 袖丈右修正
						if("03".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corCtRightsleeveSize);
							BigDecimal addMax = adjusteMax.add(corCtRightsleeveSize);
							if(corCtRightsleeveGross.compareTo(addMin) == -1 || corCtRightsleeveGross.compareTo(addMax) == 1) {
								messages.add("E035","COATの袖丈右修正");
								j += 1;
								break;
							}
						}
						// 袖丈左修正
						if("04".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corCtLeftsleeveSize);
							BigDecimal addMax = adjusteMax.add(corCtLeftsleeveSize);
							if(corCtLeftsleeveGross.compareTo(addMin) == -1 || corCtLeftsleeveGross.compareTo(addMax) == 1) {
								messages.add("E035","COATの袖丈左修正");
								j += 1;
								break;
							}
						}
						// ベント修正（高さ）
						if("17".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corCtVenthightSize);
							BigDecimal addMax = adjusteMax.add(corCtVenthightSize);
							if(corCtVenthightGross.compareTo(addMin) == -1 || corCtVenthightGross.compareTo(addMax) == 1) {
								messages.add("E035","COATのベント修正（高さ）");
								j += 1;
								break;
							}
						}
						// ポケット位置
						if("18".equals(adjust.getAdjusteClass())) {
							BigDecimal adjusteMax = adjust.getAdjusteMax();
							BigDecimal adjusteMin = adjust.getAdjusteMin();
							BigDecimal addMin = adjusteMin.add(corCtPktposSize);
							BigDecimal addMax = adjusteMax.add(corCtPktposSize);
							if(corCtPktposGross.compareTo(addMin) == -1 || corCtPktposGross.compareTo(addMax) == 1) {
								messages.add("E035","COATのポケット位置");
								j += 1;
								break;
							}
						}
					}
				}
			}
		}
		
		if(j != 0) {
			logger.error(messages.toString());
            throw new ResourceNotFoundException(messages);
		}
	}

	private void pluralPtStandardOptionItem(CoOptionPantsStandardInfo optionPantsStandardInfo, Order orderPt) {
		String regex = ",";
		//ベルトループ
		String ptBeltloopCd = orderPt.getPtBeltloopCd();
		if(ptBeltloopCd != null && !"".equals(ptBeltloopCd)) {
			String[] ptBeltloopSplit = ptBeltloopCd.split(regex);
			for (String ptBeltloopCode : ptBeltloopSplit) {
				if("0000801".equals(ptBeltloopCode)) {
					optionPantsStandardInfo.setOpBeltLoopPlace1(ptBeltloopCode);
				}else if("0000802".equals(ptBeltloopCode)) {
					optionPantsStandardInfo.setOpBeltLoopPlace2(ptBeltloopCode);
				}else if("0000803".equals(ptBeltloopCode)) {
					optionPantsStandardInfo.setOpBeltLoopPlace3(ptBeltloopCode);
				}else if("0000804".equals(ptBeltloopCode)) {
					optionPantsStandardInfo.setOpBeltLoopPlace4(ptBeltloopCode);
				}else if("0000805".equals(ptBeltloopCode)) {
					optionPantsStandardInfo.setOpBeltLoopPlace5(ptBeltloopCode);
				}else if("0000806".equals(ptBeltloopCode)) {
					optionPantsStandardInfo.setOpBeltLoopPlace6(ptBeltloopCode);
				}else if("0000807".equals(ptBeltloopCode)) {
					optionPantsStandardInfo.setOpBeltLoopPlace7(ptBeltloopCode);
				}
			}
		}
		
		//ステッチ箇所変更
		String ptStitchPlcCd = orderPt.getPtStitchPlcCd();
		if(ptStitchPlcCd != null && !"".equals(ptStitchPlcCd)) {
			String[] ptStitchPlcSplit = ptStitchPlcCd.split(regex);
			for (String stitchPlcCode : ptStitchPlcSplit) {
				if("0002101".equals(stitchPlcCode)) {
					optionPantsStandardInfo.setOpStitchModifyPlace1(stitchPlcCode);
				}else if("0002102".equals(stitchPlcCode)) {
					optionPantsStandardInfo.setOpStitchModifyPlace2(stitchPlcCode);
				}else if("0002103".equals(stitchPlcCode)) {
					optionPantsStandardInfo.setOpStitchModifyPlace3(stitchPlcCode);
				}else if("0002104".equals(stitchPlcCode)) {
					optionPantsStandardInfo.setOpStitchModifyPlace4(stitchPlcCode);
				}
			}
		}
		
		//ダブルステッチ
		String ptDblstitchPlcCd = orderPt.getPtDblstitchPlcCd();
		if(ptDblstitchPlcCd != null && !"".equals(ptDblstitchPlcCd)) {
			String[] ptDblstitchPlcSplit = ptDblstitchPlcCd.split(regex);
			for (String dblstitchPlcCode : ptDblstitchPlcSplit) {
				if("0002301".equals(dblstitchPlcCode)) {
					optionPantsStandardInfo.setOpDStitchPlace1(dblstitchPlcCode);
				}else if("0002302".equals(dblstitchPlcCode)) {
					optionPantsStandardInfo.setOpDStitchPlace2(dblstitchPlcCode);
				}else if("0002303".equals(dblstitchPlcCode)) {
					optionPantsStandardInfo.setOpDStitchPlace3(dblstitchPlcCode);
				}else if("0002304".equals(dblstitchPlcCode)) {
					optionPantsStandardInfo.setOpDStitchPlace4(dblstitchPlcCode);
				}
			}
		}
		
		//AMF色指定
		String ptAmfColorPlcCd = orderPt.getPtAmfColorPlcCd();
		String ptAmfColorCd = orderPt.getPtAmfColorCd();
		if(ptAmfColorPlcCd!=null && !"".equals(ptAmfColorPlcCd) && ptAmfColorCd !=null && !"".equals(ptAmfColorCd)) {
			String[] ptAmfColorPlcSplit = ptAmfColorPlcCd.split(regex);
			String[] ptAmfColorSplit = ptAmfColorCd.split(regex);
			for (int i = 0;i<ptAmfColorPlcSplit.length;i++) {
				if("0002601".equals(ptAmfColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpAmfColorPlace1(ptAmfColorPlcSplit[i]);
					optionPantsStandardInfo.setOpAmfColor1(ptAmfColorSplit[i]);
				}else if("0002602".equals(ptAmfColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpAmfColorPlace2(ptAmfColorPlcSplit[i]);
					optionPantsStandardInfo.setOpAmfColor2(ptAmfColorSplit[i]);
				}else if("0002603".equals(ptAmfColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpAmfColorPlace3(ptAmfColorPlcSplit[i]);
					optionPantsStandardInfo.setOpAmfColor3(ptAmfColorSplit[i]);
				}else if("0002604".equals(ptAmfColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpAmfColorPlace4(ptAmfColorPlcSplit[i]);
					optionPantsStandardInfo.setOpAmfColor4(ptAmfColorSplit[i]);
				}
			}
		}
		
		//ボタンホール色指定
		String ptBtnholeColorPlcCd = orderPt.getPtBtnholeColorPlcCd();
		String PtBtnholeColorCd = orderPt.getPtBtnholeColorCd();
		if(!"".equals(ptBtnholeColorPlcCd)&&ptBtnholeColorPlcCd!=null&&!"".equals(PtBtnholeColorCd)&&PtBtnholeColorCd!=null) {
			String[] ptBtnholeColorPlcSplit = ptBtnholeColorPlcCd.split(regex);
			String[] PtBtnholeColorSplit = PtBtnholeColorCd.split(regex);
			for (int i = 0; i < ptBtnholeColorPlcSplit.length; i++) {
				if("0002901".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpBhColorPlace1(ptBtnholeColorPlcSplit[i]);
					optionPantsStandardInfo.setOpBhColor1(PtBtnholeColorSplit[i]);
				}else if("0002902".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpBhColorPlace2(ptBtnholeColorPlcSplit[i]);
					optionPantsStandardInfo.setOpBhColor2(PtBtnholeColorSplit[i]);
				}else if("0002903".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpBhColorPlace3(ptBtnholeColorPlcSplit[i]);
					optionPantsStandardInfo.setOpBhColor3(PtBtnholeColorSplit[i]);
				}else if("0002904".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpBhColorPlace4(ptBtnholeColorPlcSplit[i]);
					optionPantsStandardInfo.setOpBhColor4(PtBtnholeColorSplit[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String ptBtnthreadColorPlcCd = orderPt.getPtBtnthreadColorPlcCd();
		String ptBtnthreadColorCd = orderPt.getPtBtnthreadColorCd();
		if(!"".equals(ptBtnthreadColorPlcCd)&&ptBtnthreadColorPlcCd!=null&&!"".equals(ptBtnthreadColorCd)&&ptBtnthreadColorCd!=null) {
			String[] ptBtnthreadColorPlcSplit = ptBtnthreadColorPlcCd.split(regex);
			String[] ptBtnthreadColorSplit = ptBtnthreadColorCd.split(regex);
			for (int i = 0; i < ptBtnthreadColorPlcSplit.length; i++) {
				if("0003201".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpByColorPlace1(ptBtnthreadColorPlcSplit[i]);
					optionPantsStandardInfo.setOpByColor1(ptBtnthreadColorSplit[i]);
				}else if("0003202".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpByColorPlace1(ptBtnthreadColorPlcSplit[i]);
					optionPantsStandardInfo.setOpByColor1(ptBtnthreadColorSplit[i]);
				}else if("0003203".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpByColorPlace1(ptBtnthreadColorPlcSplit[i]);
					optionPantsStandardInfo.setOpByColor1(ptBtnthreadColorSplit[i]);
				}else if("0003204".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsStandardInfo.setOpByColorPlace1(ptBtnthreadColorPlcSplit[i]);
					optionPantsStandardInfo.setOpByColor1(ptBtnthreadColorSplit[i]);
				}
			}
		}
	}
	
	private void pluralPtTuxedoOptionItem(CoOptionPantsTuxedoInfo optionPantsTuxedoInfo, Order orderPt) {
		String regex = ",";
		//ベルトループ
		String ptBeltloopCd = orderPt.getPtBeltloopCd();
		if(ptBeltloopCd != null && !"".equals(ptBeltloopCd)) {
			String[] ptBeltloopSplit = ptBeltloopCd.split(regex);
			for (String ptBeltloopCode : ptBeltloopSplit) {
				if("0000801".equals(ptBeltloopCode)) {
					optionPantsTuxedoInfo.setTpBeltLoopPlace1(ptBeltloopCode);
				}else if("0000802".equals(ptBeltloopCode)) {
					optionPantsTuxedoInfo.setTpBeltLoopPlace2(ptBeltloopCode);
				}else if("0000803".equals(ptBeltloopCode)) {
					optionPantsTuxedoInfo.setTpBeltLoopPlace3(ptBeltloopCode);
				}else if("0000804".equals(ptBeltloopCode)) {
					optionPantsTuxedoInfo.setTpBeltLoopPlace4(ptBeltloopCode);
				}else if("0000805".equals(ptBeltloopCode)) {
					optionPantsTuxedoInfo.setTpBeltLoopPlace5(ptBeltloopCode);
				}else if("0000806".equals(ptBeltloopCode)) {
					optionPantsTuxedoInfo.setTpBeltLoopPlace6(ptBeltloopCode);
				}else if("0000807".equals(ptBeltloopCode)) {
					optionPantsTuxedoInfo.setTpBeltLoopPlace7(ptBeltloopCode);
				}
			}
		}

		//ボタンホール色指定
		String ptBtnholeColorPlcCd = orderPt.getPtBtnholeColorPlcCd();
		String PtBtnholeColorCd = orderPt.getPtBtnholeColorCd();
		if(!"".equals(ptBtnholeColorPlcCd)&&ptBtnholeColorPlcCd!=null&&!"".equals(PtBtnholeColorCd)&&PtBtnholeColorCd!=null) {
			String[] ptBtnholeColorPlcSplit = ptBtnholeColorPlcCd.split(regex);
			String[] PtBtnholeColorSplit = PtBtnholeColorCd.split(regex);
			for (int i = 0; i < ptBtnholeColorPlcSplit.length; i++) {
				if("0002901".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsTuxedoInfo.setTpBhColorPlace1(ptBtnholeColorPlcSplit[i]);
					optionPantsTuxedoInfo.setTpBhColor1(PtBtnholeColorSplit[i]);
				}else if("0002902".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsTuxedoInfo.setTpBhColorPlace2(ptBtnholeColorPlcSplit[i]);
					optionPantsTuxedoInfo.setTpBhColor2(PtBtnholeColorSplit[i]);
				}else if("0002903".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsTuxedoInfo.setTpBhColorPlace3(ptBtnholeColorPlcSplit[i]);
					optionPantsTuxedoInfo.setTpBhColor3(PtBtnholeColorSplit[i]);
				}else if("0002904".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsTuxedoInfo.setTpBhColorPlace4(ptBtnholeColorPlcSplit[i]);
					optionPantsTuxedoInfo.setTpBhColor4(PtBtnholeColorSplit[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String ptBtnthreadColorPlcCd = orderPt.getPtBtnthreadColorPlcCd();
		String ptBtnthreadColorCd = orderPt.getPtBtnthreadColorCd();
		if(!"".equals(ptBtnthreadColorPlcCd)&&ptBtnthreadColorPlcCd!=null&&!"".equals(ptBtnthreadColorCd)&&ptBtnthreadColorCd!=null) {
			String[] ptBtnthreadColorPlcSplit = ptBtnthreadColorPlcCd.split(regex);
			String[] ptBtnthreadColorSplit = ptBtnthreadColorCd.split(regex);
			for (int i = 0; i < ptBtnthreadColorPlcSplit.length; i++) {
				if("0003201".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsTuxedoInfo.setTpByColorPlace1(ptBtnthreadColorPlcSplit[i]);
					optionPantsTuxedoInfo.setTpByColor1(ptBtnthreadColorSplit[i]);
				}else if("0003202".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsTuxedoInfo.setTpByColorPlace2(ptBtnthreadColorPlcSplit[i]);
					optionPantsTuxedoInfo.setTpByColor2(ptBtnthreadColorSplit[i]);
				}else if("0003203".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsTuxedoInfo.setTpByColorPlace3(ptBtnthreadColorPlcSplit[i]);
					optionPantsTuxedoInfo.setTpByColor3(ptBtnthreadColorSplit[i]);
				}else if("0003204".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsTuxedoInfo.setTpByColorPlace4(ptBtnthreadColorPlcSplit[i]);
					optionPantsTuxedoInfo.setTpByColor4(ptBtnthreadColorSplit[i]);
				}
			}
		}
	}

	private void pluralPtWashableOptionItem(CoOptionPantsWashableInfo optionPantsWashableInfo, Order orderPt) {
		String regex = ",";
		//ベルトループ
		String ptBeltloopCd = orderPt.getPtBeltloopCd();
		if(ptBeltloopCd != null && !"".equals(ptBeltloopCd)) {
			String[] ptBeltloopSplit = ptBeltloopCd.split(regex);
			for (String ptBeltloopCode : ptBeltloopSplit) {
				if("0000801".equals(ptBeltloopCode)) {
					optionPantsWashableInfo.setWpBeltLoopPlace1(ptBeltloopCode);
				}else if("0000802".equals(ptBeltloopCode)) {
					optionPantsWashableInfo.setWpBeltLoopPlace2(ptBeltloopCode);
				}else if("0000803".equals(ptBeltloopCode)) {
					optionPantsWashableInfo.setWpBeltLoopPlace3(ptBeltloopCode);
				}else if("0000804".equals(ptBeltloopCode)) {
					optionPantsWashableInfo.setWpBeltLoopPlace4(ptBeltloopCode);
				}else if("0000805".equals(ptBeltloopCode)) {
					optionPantsWashableInfo.setWpBeltLoopPlace5(ptBeltloopCode);
				}else if("0000806".equals(ptBeltloopCode)) {
					optionPantsWashableInfo.setWpBeltLoopPlace6(ptBeltloopCode);
				}else if("0000807".equals(ptBeltloopCode)) {
					optionPantsWashableInfo.setWpBeltLoopPlace7(ptBeltloopCode);
				}
			}
		}
		
		//ステッチ箇所変更
		String ptStitchPlcCd = orderPt.getPtStitchPlcCd();
		if(ptStitchPlcCd != null && !"".equals(ptStitchPlcCd)) {
			String[] ptStitchPlcSplit = ptStitchPlcCd.split(regex);
			for (String stitchPlcCode : ptStitchPlcSplit) {
				if("0002101".equals(stitchPlcCode)) {
					optionPantsWashableInfo.setWpStitchModifyPlace1(stitchPlcCode);
				}else if("0002102".equals(stitchPlcCode)) {
					optionPantsWashableInfo.setWpStitchModifyPlace2(stitchPlcCode);
				}else if("0002103".equals(stitchPlcCode)) {
					optionPantsWashableInfo.setWpStitchModifyPlace3(stitchPlcCode);
				}else if("0002104".equals(stitchPlcCode)) {
					optionPantsWashableInfo.setWpStitchModifyPlace4(stitchPlcCode);
				}
			}
		}
		
		//ダブルステッチ
		String ptDblstitchPlcCd = orderPt.getPtDblstitchPlcCd();
		if(ptDblstitchPlcCd != null && !"".equals(ptDblstitchPlcCd)) {
			String[] ptDblstitchPlcSplit = ptDblstitchPlcCd.split(regex);
			for (String dblstitchPlcCode : ptDblstitchPlcSplit) {
				if("0002301".equals(dblstitchPlcCode)) {
					optionPantsWashableInfo.setWpDStitchPlace1(dblstitchPlcCode);
				}else if("0002302".equals(dblstitchPlcCode)) {
					optionPantsWashableInfo.setWpDStitchPlace2(dblstitchPlcCode);
				}else if("0002303".equals(dblstitchPlcCode)) {
					optionPantsWashableInfo.setWpDStitchPlace3(dblstitchPlcCode);
				}else if("0002304".equals(dblstitchPlcCode)) {
					optionPantsWashableInfo.setWpDStitchPlace4(dblstitchPlcCode);
				}
			}
		}
		
		//AMF色指定
		String ptAmfColorPlcCd = orderPt.getPtAmfColorPlcCd();
		String ptAmfColorCd = orderPt.getPtAmfColorCd();
		if(ptAmfColorPlcCd!=null && !"".equals(ptAmfColorPlcCd) && ptAmfColorCd !=null && !"".equals(ptAmfColorCd)) {
			String[] ptAmfColorPlcSplit = ptAmfColorPlcCd.split(regex);
			String[] ptAmfColorSplit = ptAmfColorCd.split(regex);
			for (int i = 0;i<ptAmfColorPlcSplit.length;i++) {
				if("0002601".equals(ptAmfColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpAmfColorPlace1(ptAmfColorPlcSplit[i]);
					optionPantsWashableInfo.setWpAmfColor1(ptAmfColorSplit[i]);
				}else if("0002602".equals(ptAmfColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpAmfColorPlace2(ptAmfColorPlcSplit[i]);
					optionPantsWashableInfo.setWpAmfColor2(ptAmfColorSplit[i]);
				}else if("0002603".equals(ptAmfColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpAmfColorPlace3(ptAmfColorPlcSplit[i]);
					optionPantsWashableInfo.setWpAmfColor3(ptAmfColorSplit[i]);
				}else if("0002604".equals(ptAmfColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpAmfColorPlace4(ptAmfColorPlcSplit[i]);
					optionPantsWashableInfo.setWpAmfColor4(ptAmfColorSplit[i]);
				}
			}
		}
		
		//ボタンホール色指定
		String ptBtnholeColorPlcCd = orderPt.getPtBtnholeColorPlcCd();
		String PtBtnholeColorCd = orderPt.getPtBtnholeColorCd();
		if(!"".equals(ptBtnholeColorPlcCd)&&ptBtnholeColorPlcCd!=null&&!"".equals(PtBtnholeColorCd)&&PtBtnholeColorCd!=null) {
			String[] ptBtnholeColorPlcSplit = ptBtnholeColorPlcCd.split(regex);
			String[] PtBtnholeColorSplit = PtBtnholeColorCd.split(regex);
			for (int i = 0; i < ptBtnholeColorPlcSplit.length; i++) {
				if("0002901".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpBhColorPlace1(ptBtnholeColorPlcSplit[i]);
					optionPantsWashableInfo.setWpBhColor1(PtBtnholeColorSplit[i]);
				}else if("0002902".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpBhColorPlace2(ptBtnholeColorPlcSplit[i]);
					optionPantsWashableInfo.setWpBhColor2(PtBtnholeColorSplit[i]);
				}else if("0002903".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpBhColorPlace3(ptBtnholeColorPlcSplit[i]);
					optionPantsWashableInfo.setWpBhColor3(PtBtnholeColorSplit[i]);
				}else if("0002904".equals(ptBtnholeColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpBhColorPlace4(ptBtnholeColorPlcSplit[i]);
					optionPantsWashableInfo.setWpBhColor4(PtBtnholeColorSplit[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String ptBtnthreadColorPlcCd = orderPt.getPtBtnthreadColorPlcCd();
		String ptBtnthreadColorCd = orderPt.getPtBtnthreadColorCd();
		if(!"".equals(ptBtnthreadColorPlcCd)&&ptBtnthreadColorPlcCd!=null&&!"".equals(ptBtnthreadColorCd)&&ptBtnthreadColorCd!=null) {
			String[] ptBtnthreadColorPlcSplit = ptBtnthreadColorPlcCd.split(regex);
			String[] ptBtnthreadColorSplit = ptBtnthreadColorCd.split(regex);
			for (int i = 0; i < ptBtnthreadColorPlcSplit.length; i++) {
				if("0003201".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpByColorPlace1(ptBtnthreadColorPlcSplit[i]);
					optionPantsWashableInfo.setWpByColor1(ptBtnthreadColorSplit[i]);
				}else if("0003202".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpByColorPlace2(ptBtnthreadColorPlcSplit[i]);
					optionPantsWashableInfo.setWpByColor2(ptBtnthreadColorSplit[i]);
				}else if("0003203".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpByColorPlace3(ptBtnthreadColorPlcSplit[i]);
					optionPantsWashableInfo.setWpByColor3(ptBtnthreadColorSplit[i]);
				}else if("0003204".equals(ptBtnthreadColorPlcSplit[i])) {
					optionPantsWashableInfo.setWpByColorPlace4(ptBtnthreadColorPlcSplit[i]);
					optionPantsWashableInfo.setWpByColor4(ptBtnthreadColorSplit[i]);
				}
			}
		}
	}

	
	private void pluralPt2StandardOptionItem(CoOptionPants2StandardInfo optionPants2StandardInfo, Order orderPt2) {
		String regex = ",";
		//ベルトループ
		String pt2BeltloopCd = orderPt2.getPt2BeltloopCd();
		if(pt2BeltloopCd != null && !"".equals(pt2BeltloopCd)) {
			String[] pt2BeltloopSplit = pt2BeltloopCd.split(regex);
			for (String pt2BeltloopCode : pt2BeltloopSplit) {
				if("0000801".equals(pt2BeltloopCode)) {
					optionPants2StandardInfo.setOp2BeltLoopPlace1(pt2BeltloopCode);
				}else if("0000802".equals(pt2BeltloopCode)) {
					optionPants2StandardInfo.setOp2BeltLoopPlace2(pt2BeltloopCode);
				}else if("0000803".equals(pt2BeltloopCode)) {
					optionPants2StandardInfo.setOp2BeltLoopPlace3(pt2BeltloopCode);
				}else if("0000804".equals(pt2BeltloopCode)) {
					optionPants2StandardInfo.setOp2BeltLoopPlace4(pt2BeltloopCode);
				}else if("0000805".equals(pt2BeltloopCode)) {
					optionPants2StandardInfo.setOp2BeltLoopPlace5(pt2BeltloopCode);
				}else if("0000806".equals(pt2BeltloopCode)) {
					optionPants2StandardInfo.setOp2BeltLoopPlace6(pt2BeltloopCode);
				}else if("0000807".equals(pt2BeltloopCode)) {
					optionPants2StandardInfo.setOp2BeltLoopPlace7(pt2BeltloopCode);
				}
			}
		}
		
		//ステッチ箇所変更
		String pt2StitchPlcCd = orderPt2.getPt2StitchPlcCd();
		if(pt2StitchPlcCd != null && !"".equals(pt2StitchPlcCd)) {
			String[] pt2StitchPlcSplit = pt2StitchPlcCd.split(regex);
			for (String stitchPlcCode : pt2StitchPlcSplit) {
				if("0002101".equals(stitchPlcCode)) {
					optionPants2StandardInfo.setOp2StitchModifyPlace1(stitchPlcCode);
				}else if("0002102".equals(stitchPlcCode)) {
					optionPants2StandardInfo.setOp2StitchModifyPlace2(stitchPlcCode);
				}else if("0002103".equals(stitchPlcCode)) {
					optionPants2StandardInfo.setOp2StitchModifyPlace3(stitchPlcCode);
				}else if("0002104".equals(stitchPlcCode)) {
					optionPants2StandardInfo.setOp2StitchModifyPlace4(stitchPlcCode);
				}
			}
		}
		
		//ダブルステッチ
		String pt2DblstitchPlcCd = orderPt2.getPt2DblstitchPlcCd();
		if(pt2DblstitchPlcCd != null && !"".equals(pt2DblstitchPlcCd)) {
			String[] pt2DblstitchPlcSplit = pt2DblstitchPlcCd.split(regex);
			for (String dblstitchPlcCode : pt2DblstitchPlcSplit) {
				if("0002301".equals(dblstitchPlcCode)) {
					optionPants2StandardInfo.setOp2DStitchPlace1(dblstitchPlcCode);
				}else if("0002302".equals(dblstitchPlcCode)) {
					optionPants2StandardInfo.setOp2DStitchPlace2(dblstitchPlcCode);
				}else if("0002303".equals(dblstitchPlcCode)) {
					optionPants2StandardInfo.setOp2DStitchPlace3(dblstitchPlcCode);
				}else if("0002304".equals(dblstitchPlcCode)) {
					optionPants2StandardInfo.setOp2DStitchPlace4(dblstitchPlcCode);
				}
			}
		}
		
		//AMF色指定
		String pt2AmfColorPlcCd = orderPt2.getPt2AmfColorPlcCd();
		String pt2AmfColorCd = orderPt2.getPt2AmfColorCd();
		if(pt2AmfColorPlcCd!=null && !"".equals(pt2AmfColorPlcCd) && pt2AmfColorCd !=null && !"".equals(pt2AmfColorCd)) {
			String[] pt2AmfColorPlcSplit = pt2AmfColorPlcCd.split(regex);
			String[] pt2AmfColorSplit = pt2AmfColorCd.split(regex);
			for (int i = 0;i<pt2AmfColorPlcSplit.length;i++) {
				if("0002601".equals(pt2AmfColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2AmfColorPlace1(pt2AmfColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2AmfColor1(pt2AmfColorSplit[i]);
				}else if("0002602".equals(pt2AmfColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2AmfColorPlace2(pt2AmfColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2AmfColor2(pt2AmfColorSplit[i]);
				}else if("0002603".equals(pt2AmfColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2AmfColorPlace3(pt2AmfColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2AmfColor3(pt2AmfColorSplit[i]);
				}else if("0002604".equals(pt2AmfColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2AmfColorPlace4(pt2AmfColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2AmfColor4(pt2AmfColorSplit[i]);
				}
			}
		}
		
		//ボタンホール色指定
		String pt2BtnholeColorPlcCd = orderPt2.getPt2BtnholeColorPlcCd();
		String Pt2BtnholeColorCd = orderPt2.getPt2BtnholeColorCd();
		if(!"".equals(pt2BtnholeColorPlcCd)&&pt2BtnholeColorPlcCd!=null&&!"".equals(Pt2BtnholeColorCd)&&Pt2BtnholeColorCd!=null) {
			String[] pt2BtnholeColorPlcSplit = pt2BtnholeColorPlcCd.split(regex);
			String[] Pt2BtnholeColorSplit = Pt2BtnholeColorCd.split(regex);
			for (int i = 0; i < pt2BtnholeColorPlcSplit.length; i++) {
				if("0002901".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2BhColorPlace1(pt2BtnholeColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2BhColor1(Pt2BtnholeColorSplit[i]);
				}else if("0002902".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2BhColorPlace2(pt2BtnholeColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2BhColor2(Pt2BtnholeColorSplit[i]);
				}else if("0002903".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2BhColorPlace3(pt2BtnholeColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2BhColor3(Pt2BtnholeColorSplit[i]);
				}else if("0002904".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2BhColorPlace4(pt2BtnholeColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2BhColor4(Pt2BtnholeColorSplit[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String pt2BtnthreadColorPlcCd = orderPt2.getPt2BtnthreadColorPlcCd();
		String pt2BtnthreadColorCd = orderPt2.getPt2BtnthreadColorCd();
		if(!"".equals(pt2BtnthreadColorPlcCd)&&pt2BtnthreadColorPlcCd!=null&&!"".equals(pt2BtnthreadColorCd)&&pt2BtnthreadColorCd!=null) {
			String[] pt2BtnthreadColorPlcSplit = pt2BtnthreadColorPlcCd.split(regex);
			String[] pt2BtnthreadColorSplit = pt2BtnthreadColorCd.split(regex);
			for (int i = 0; i < pt2BtnthreadColorPlcSplit.length; i++) {
				if("0003201".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2ByColorPlace1(pt2BtnthreadColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2ByColor1(pt2BtnthreadColorSplit[i]);
				}else if("0003202".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2ByColorPlace1(pt2BtnthreadColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2ByColor1(pt2BtnthreadColorSplit[i]);
				}else if("0003203".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2ByColorPlace1(pt2BtnthreadColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2ByColor1(pt2BtnthreadColorSplit[i]);
				}else if("0003204".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2StandardInfo.setOp2ByColorPlace1(pt2BtnthreadColorPlcSplit[i]);
					optionPants2StandardInfo.setOp2ByColor1(pt2BtnthreadColorSplit[i]);
				}
			}
		}
	}
	
	private void pluralPt2TuxedoOptionItem(CoOptionPants2TuxedoInfo optionPants2TuxedoInfo, Order orderPt2) {
		String regex = ",";
		//ベルトループ
		String pt2BeltloopCd = orderPt2.getPt2BeltloopCd();
		if(pt2BeltloopCd != null && !"".equals(pt2BeltloopCd)) {
			String[] pt2BeltloopSplit = pt2BeltloopCd.split(regex);
			for (String pt2BeltloopCode : pt2BeltloopSplit) {
				if("0000801".equals(pt2BeltloopCode)) {
					optionPants2TuxedoInfo.setTp2BeltLoopPlace1(pt2BeltloopCode);
				}else if("0000802".equals(pt2BeltloopCode)) {
					optionPants2TuxedoInfo.setTp2BeltLoopPlace2(pt2BeltloopCode);
				}else if("0000803".equals(pt2BeltloopCode)) {
					optionPants2TuxedoInfo.setTp2BeltLoopPlace3(pt2BeltloopCode);
				}else if("0000804".equals(pt2BeltloopCode)) {
					optionPants2TuxedoInfo.setTp2BeltLoopPlace4(pt2BeltloopCode);
				}else if("0000805".equals(pt2BeltloopCode)) {
					optionPants2TuxedoInfo.setTp2BeltLoopPlace5(pt2BeltloopCode);
				}else if("0000806".equals(pt2BeltloopCode)) {
					optionPants2TuxedoInfo.setTp2BeltLoopPlace6(pt2BeltloopCode);
				}else if("0000807".equals(pt2BeltloopCode)) {
					optionPants2TuxedoInfo.setTp2BeltLoopPlace7(pt2BeltloopCode);
				}
			}
		}

		//ボタンホール色指定
		String pt2BtnholeColorPlcCd = orderPt2.getPt2BtnholeColorPlcCd();
		String Pt2BtnholeColorCd = orderPt2.getPt2BtnholeColorCd();
		if(!"".equals(pt2BtnholeColorPlcCd)&&pt2BtnholeColorPlcCd!=null&&!"".equals(Pt2BtnholeColorCd)&&Pt2BtnholeColorCd!=null) {
			String[] pt2BtnholeColorPlcSplit = pt2BtnholeColorPlcCd.split(regex);
			String[] Pt2BtnholeColorSplit = Pt2BtnholeColorCd.split(regex);
			for (int i = 0; i < pt2BtnholeColorPlcSplit.length; i++) {
				if("0002901".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2TuxedoInfo.setTp2BhColorPlace1(pt2BtnholeColorPlcSplit[i]);
					optionPants2TuxedoInfo.setTp2BhColor1(Pt2BtnholeColorSplit[i]);
				}else if("0002902".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2TuxedoInfo.setTp2BhColorPlace2(pt2BtnholeColorPlcSplit[i]);
					optionPants2TuxedoInfo.setTp2BhColor2(Pt2BtnholeColorSplit[i]);
				}else if("0002903".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2TuxedoInfo.setTp2BhColorPlace3(pt2BtnholeColorPlcSplit[i]);
					optionPants2TuxedoInfo.setTp2BhColor3(Pt2BtnholeColorSplit[i]);
				}else if("0002904".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2TuxedoInfo.setTp2BhColorPlace4(pt2BtnholeColorPlcSplit[i]);
					optionPants2TuxedoInfo.setTp2BhColor4(Pt2BtnholeColorSplit[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String pt2BtnthreadColorPlcCd = orderPt2.getPt2BtnthreadColorPlcCd();
		String pt2BtnthreadColorCd = orderPt2.getPt2BtnthreadColorCd();
		if(!"".equals(pt2BtnthreadColorPlcCd)&&pt2BtnthreadColorPlcCd!=null&&!"".equals(pt2BtnthreadColorCd)&&pt2BtnthreadColorCd!=null) {
			String[] pt2BtnthreadColorPlcSplit = pt2BtnthreadColorPlcCd.split(regex);
			String[] pt2BtnthreadColorSplit = pt2BtnthreadColorCd.split(regex);
			for (int i = 0; i < pt2BtnthreadColorPlcSplit.length; i++) {
				if("0003201".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2TuxedoInfo.setTp2ByColorPlace1(pt2BtnthreadColorPlcSplit[i]);
					optionPants2TuxedoInfo.setTp2ByColor1(pt2BtnthreadColorSplit[i]);
				}else if("0003202".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2TuxedoInfo.setTp2ByColorPlace2(pt2BtnthreadColorPlcSplit[i]);
					optionPants2TuxedoInfo.setTp2ByColor2(pt2BtnthreadColorSplit[i]);
				}else if("0003203".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2TuxedoInfo.setTp2ByColorPlace3(pt2BtnthreadColorPlcSplit[i]);
					optionPants2TuxedoInfo.setTp2ByColor3(pt2BtnthreadColorSplit[i]);
				}else if("0003204".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2TuxedoInfo.setTp2ByColorPlace4(pt2BtnthreadColorPlcSplit[i]);
					optionPants2TuxedoInfo.setTp2ByColor4(pt2BtnthreadColorSplit[i]);
				}
			}
		}
	}
	
	private void pluralPt2WashableOptionItem(CoOptionPants2WashableInfo optionPants2WashableInfo, Order orderPt2) {
		String regex = ",";
		//ベルトループ
		String pt2BeltloopCd = orderPt2.getPt2BeltloopCd();
		if(pt2BeltloopCd != null && !"".equals(pt2BeltloopCd)) {
			String[] pt2BeltloopSplit = pt2BeltloopCd.split(regex);
			for (String pt2BeltloopCode : pt2BeltloopSplit) {
				if("0000801".equals(pt2BeltloopCode)) {
					optionPants2WashableInfo.setWp2BeltLoopPlace1(pt2BeltloopCode);
				}else if("0000802".equals(pt2BeltloopCode)) {
					optionPants2WashableInfo.setWp2BeltLoopPlace2(pt2BeltloopCode);
				}else if("0000803".equals(pt2BeltloopCode)) {
					optionPants2WashableInfo.setWp2BeltLoopPlace3(pt2BeltloopCode);
				}else if("0000804".equals(pt2BeltloopCode)) {
					optionPants2WashableInfo.setWp2BeltLoopPlace4(pt2BeltloopCode);
				}else if("0000805".equals(pt2BeltloopCode)) {
					optionPants2WashableInfo.setWp2BeltLoopPlace5(pt2BeltloopCode);
				}else if("0000806".equals(pt2BeltloopCode)) {
					optionPants2WashableInfo.setWp2BeltLoopPlace6(pt2BeltloopCode);
				}else if("0000807".equals(pt2BeltloopCode)) {
					optionPants2WashableInfo.setWp2BeltLoopPlace7(pt2BeltloopCode);
				}
			}
		}
		
		//ステッチ箇所変更
		String pt2StitchPlcCd = orderPt2.getPt2StitchPlcCd();
		if(pt2StitchPlcCd != null && !"".equals(pt2StitchPlcCd)) {
			String[] pt2StitchPlcSplit = pt2StitchPlcCd.split(regex);
			for (String stitchPlcCode : pt2StitchPlcSplit) {
				if("0002101".equals(stitchPlcCode)) {
					optionPants2WashableInfo.setWp2StitchModifyPlace1(stitchPlcCode);
				}else if("0002102".equals(stitchPlcCode)) {
					optionPants2WashableInfo.setWp2StitchModifyPlace2(stitchPlcCode);
				}else if("0002103".equals(stitchPlcCode)) {
					optionPants2WashableInfo.setWp2StitchModifyPlace3(stitchPlcCode);
				}else if("0002104".equals(stitchPlcCode)) {
					optionPants2WashableInfo.setWp2StitchModifyPlace4(stitchPlcCode);
				}
			}
		}
		
		//ダブルステッチ
		String pt2DblstitchPlcCd = orderPt2.getPt2DblstitchPlcCd();
		if(pt2DblstitchPlcCd != null && !"".equals(pt2DblstitchPlcCd)) {
			String[] pt2DblstitchPlcSplit = pt2DblstitchPlcCd.split(regex);
			for (String dblstitchPlcCode : pt2DblstitchPlcSplit) {
				if("0002301".equals(dblstitchPlcCode)) {
					optionPants2WashableInfo.setWp2DStitchPlace1(dblstitchPlcCode);
				}else if("0002302".equals(dblstitchPlcCode)) {
					optionPants2WashableInfo.setWp2DStitchPlace2(dblstitchPlcCode);
				}else if("0002303".equals(dblstitchPlcCode)) {
					optionPants2WashableInfo.setWp2DStitchPlace3(dblstitchPlcCode);
				}else if("0002304".equals(dblstitchPlcCode)) {
					optionPants2WashableInfo.setWp2DStitchPlace4(dblstitchPlcCode);
				}
			}
		}
		
		//AMF色指定
		String pt2AmfColorPlcCd = orderPt2.getPt2AmfColorPlcCd();
		String pt2AmfColorCd = orderPt2.getPt2AmfColorCd();
		if(pt2AmfColorPlcCd!=null && !"".equals(pt2AmfColorPlcCd) && pt2AmfColorCd !=null && !"".equals(pt2AmfColorCd)) {
			String[] pt2AmfColorPlcSplit = pt2AmfColorPlcCd.split(regex);
			String[] pt2AmfColorSplit = pt2AmfColorCd.split(regex);
			for (int i = 0;i<pt2AmfColorPlcSplit.length;i++) {
				if("0002601".equals(pt2AmfColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2AmfColorPlace1(pt2AmfColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2AmfColor1(pt2AmfColorSplit[i]);
				}else if("0002602".equals(pt2AmfColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2AmfColorPlace2(pt2AmfColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2AmfColor2(pt2AmfColorSplit[i]);
				}else if("0002603".equals(pt2AmfColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2AmfColorPlace3(pt2AmfColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2AmfColor3(pt2AmfColorSplit[i]);
				}else if("0002604".equals(pt2AmfColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2AmfColorPlace4(pt2AmfColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2AmfColor4(pt2AmfColorSplit[i]);
				}
			}
		}
		
		//ボタンホール色指定
		String pt2BtnholeColorPlcCd = orderPt2.getPt2BtnholeColorPlcCd();
		String Pt2BtnholeColorCd = orderPt2.getPt2BtnholeColorCd();
		if(!"".equals(pt2BtnholeColorPlcCd)&&pt2BtnholeColorPlcCd!=null&&!"".equals(Pt2BtnholeColorCd)&&Pt2BtnholeColorCd!=null) {
			String[] pt2BtnholeColorPlcSplit = pt2BtnholeColorPlcCd.split(regex);
			String[] Pt2BtnholeColorSplit = Pt2BtnholeColorCd.split(regex);
			for (int i = 0; i < pt2BtnholeColorPlcSplit.length; i++) {
				if("0002901".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2BhColorPlace1(pt2BtnholeColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2BhColor1(Pt2BtnholeColorSplit[i]);
				}else if("0002902".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2BhColorPlace2(pt2BtnholeColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2BhColor2(Pt2BtnholeColorSplit[i]);
				}else if("0002903".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2BhColorPlace3(pt2BtnholeColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2BhColor3(Pt2BtnholeColorSplit[i]);
				}else if("0002904".equals(pt2BtnholeColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2BhColorPlace4(pt2BtnholeColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2BhColor4(Pt2BtnholeColorSplit[i]);
				}
			}
		}
		
		//ボタン付け糸指定
		String pt2BtnthreadColorPlcCd = orderPt2.getPt2BtnthreadColorPlcCd();
		String pt2BtnthreadColorCd = orderPt2.getPt2BtnthreadColorCd();
		if(!"".equals(pt2BtnthreadColorPlcCd)&&pt2BtnthreadColorPlcCd!=null&&!"".equals(pt2BtnthreadColorCd)&&pt2BtnthreadColorCd!=null) {
			String[] pt2BtnthreadColorPlcSplit = pt2BtnthreadColorPlcCd.split(regex);
			String[] pt2BtnthreadColorSplit = pt2BtnthreadColorCd.split(regex);
			for (int i = 0; i < pt2BtnthreadColorPlcSplit.length; i++) {
				if("0003201".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2ByColorPlace1(pt2BtnthreadColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2ByColor1(pt2BtnthreadColorSplit[i]);
				}else if("0003202".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2ByColorPlace2(pt2BtnthreadColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2ByColor2(pt2BtnthreadColorSplit[i]);
				}else if("0003203".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2ByColorPlace3(pt2BtnthreadColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2ByColor3(pt2BtnthreadColorSplit[i]);
				}else if("0003204".equals(pt2BtnthreadColorPlcSplit[i])) {
					optionPants2WashableInfo.setWp2ByColorPlace4(pt2BtnthreadColorPlcSplit[i]);
					optionPants2WashableInfo.setWp2ByColor4(pt2BtnthreadColorSplit[i]);
				}
			}
		}
	}
	
}
